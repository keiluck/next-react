/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wangeditor";
exports.ids = ["vendor-chunks/@wangeditor"];
exports.modules = {

/***/ "(ssr)/./node_modules/@wangeditor/editor-for-react/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@wangeditor/editor-for-react/dist/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("!function(e,t){ true?t(exports,__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"),__webpack_require__(/*! @wangeditor/editor */ \"(ssr)/./node_modules/@wangeditor/editor/dist/index.js\")):0}(this,(function(e,t,r){\"use strict\";function n(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}function o(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if(\"default\"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var a=n(t),l=o(r),u=function(){return u=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},u.apply(this,arguments)};function i(e,t){var r=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,a=r.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)l.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return l}e.Editor=function(e){var n=e.defaultContent,o=void 0===n?[]:n,l=e.onCreated,f=e.defaultHtml,c=void 0===f?\"\":f,d=e.value,s=void 0===d?\"\":d,v=e.onChange,y=e.defaultConfig,g=void 0===y?{}:y,m=e.mode,p=void 0===m?\"default\":m,b=e.style,h=void 0===b?{}:b,j=e.className,E=t.useRef(null),O=i(t.useState(null),2),C=O[0],w=O[1],x=i(t.useState(\"\"),2),N=x[0],P=x[1],R=function(e){l&&l(e);var t=g.onCreated;t&&t(e)},S=function(e){P(e.getHtml()),v&&v(e);var t=g.onChange;t&&t(e)},T=function(e){var t=g.onDestroyed;w(null),t&&t(e)};return t.useEffect((function(){if(null!=C&&s!==N)try{C.setHtml(s)}catch(e){console.error(e)}}),[s]),t.useEffect((function(){var e;if(null!=E.current&&null==C&&!(null===(e=E.current)||void 0===e?void 0:e.getAttribute(\"data-w-e-textarea\"))){var t=r.createEditor({selector:E.current,config:u(u({},g),{onCreated:R,onChange:S,onDestroyed:T}),content:o,html:c||s,mode:p});w(t)}}),[C]),a.default.createElement(\"div\",{style:h,ref:E,className:j})},e.Toolbar=function(e){var r=e.editor,n=e.defaultConfig,o=void 0===n?{}:n,u=e.mode,i=void 0===u?\"default\":u,f=e.style,c=void 0===f?{}:f,d=e.className,s=t.useRef(null);return t.useEffect((function(){null!=s.current&&null!=r&&l.createToolbar({editor:r,selector:s.current,config:o,mode:i})}),[r]),a.default.createElement(\"div\",{style:c,ref:s,className:d})},Object.defineProperty(e,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbmdlZGl0b3IvZWRpdG9yLWZvci1yZWFjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsS0FBb0QsV0FBVyxtQkFBTyxDQUFDLHdHQUFPLEVBQUUsbUJBQU8sQ0FBQyxpRkFBb0IsR0FBRyxDQUE0TCxDQUFDLHVCQUF1QixhQUFhLGNBQWMsK0NBQStDLFdBQVcsY0FBYyw0QkFBNEIsMEJBQTBCLDhDQUE4QyxrQkFBa0IsMkNBQTJDLG1DQUFtQyw2QkFBNkIsYUFBYSxHQUFHLGdDQUFnQywrQkFBK0Isb0NBQW9DLGlDQUFpQyxJQUFJLHVGQUF1RixTQUFTLDBCQUEwQixnQkFBZ0Isb0RBQW9ELGVBQWUseUJBQXlCLElBQUksS0FBSyx5Q0FBeUMsaUJBQWlCLFNBQVMsR0FBRyxTQUFTLFFBQVEsSUFBSSxvQ0FBb0MsUUFBUSxvQkFBb0IsU0FBUyxxQkFBcUIsbUtBQW1LLDhEQUE4RCwwSEFBMEgsUUFBUSxrQkFBa0IsUUFBUSxlQUFlLHVCQUF1QixpQkFBaUIsUUFBUSxlQUFlLG9CQUFvQixpQkFBaUIsK0JBQStCLHNCQUFzQixhQUFhLFNBQVMsa0JBQWtCLCtCQUErQixNQUFNLDZHQUE2RyxzQkFBc0IsZ0NBQWdDLEtBQUsscUNBQXFDLDZCQUE2QixFQUFFLE1BQU0sc0NBQXNDLDBCQUEwQixFQUFFLHVCQUF1QixnREFBZ0QsOERBQThELGtDQUFrQywrQkFBK0IsMkNBQTJDLDRDQUE0QyxFQUFFLHNDQUFzQywwQkFBMEIsRUFBRSx1Q0FBdUMsU0FBUyxFQUFFO0FBQy9nRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LW5leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FuZ2VkaXRvci9lZGl0b3ItZm9yLXJlYWN0L2Rpc3QvaW5kZXguanM/NzYxZSJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT90KGV4cG9ydHMscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJAd2FuZ2VkaXRvci9lZGl0b3JcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiLFwicmVhY3RcIixcIkB3YW5nZWRpdG9yL2VkaXRvclwiXSx0KTp0KChlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuV2FuZ0VkaXRvckZvclJlYWN0PXt9LGUuUmVhY3QsZS53YW5nRWRpdG9yKX0odGhpcywoZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImRlZmF1bHRcImluIGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBvKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBlJiZPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihyKXtpZihcImRlZmF1bHRcIiE9PXIpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLG4uZ2V0P246e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVbcl19fSl9fSkpLHQuZGVmYXVsdD1lLE9iamVjdC5mcmVlemUodCl9dmFyIGE9bih0KSxsPW8ociksdT1mdW5jdGlvbigpe3JldHVybiB1PU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPTEsbj1hcmd1bWVudHMubGVuZ3RoO3I8bjtyKyspZm9yKHZhciBvIGluIHQ9YXJndW1lbnRzW3JdKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0sdS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O2Z1bmN0aW9uIGkoZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixvLGE9ci5jYWxsKGUpLGw9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1hLm5leHQoKSkuZG9uZTspbC5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe289e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPWEucmV0dXJuKSYmci5jYWxsKGEpfWZpbmFsbHl7aWYobyl0aHJvdyBvLmVycm9yfX1yZXR1cm4gbH1lLkVkaXRvcj1mdW5jdGlvbihlKXt2YXIgbj1lLmRlZmF1bHRDb250ZW50LG89dm9pZCAwPT09bj9bXTpuLGw9ZS5vbkNyZWF0ZWQsZj1lLmRlZmF1bHRIdG1sLGM9dm9pZCAwPT09Zj9cIlwiOmYsZD1lLnZhbHVlLHM9dm9pZCAwPT09ZD9cIlwiOmQsdj1lLm9uQ2hhbmdlLHk9ZS5kZWZhdWx0Q29uZmlnLGc9dm9pZCAwPT09eT97fTp5LG09ZS5tb2RlLHA9dm9pZCAwPT09bT9cImRlZmF1bHRcIjptLGI9ZS5zdHlsZSxoPXZvaWQgMD09PWI/e306YixqPWUuY2xhc3NOYW1lLEU9dC51c2VSZWYobnVsbCksTz1pKHQudXNlU3RhdGUobnVsbCksMiksQz1PWzBdLHc9T1sxXSx4PWkodC51c2VTdGF0ZShcIlwiKSwyKSxOPXhbMF0sUD14WzFdLFI9ZnVuY3Rpb24oZSl7bCYmbChlKTt2YXIgdD1nLm9uQ3JlYXRlZDt0JiZ0KGUpfSxTPWZ1bmN0aW9uKGUpe1AoZS5nZXRIdG1sKCkpLHYmJnYoZSk7dmFyIHQ9Zy5vbkNoYW5nZTt0JiZ0KGUpfSxUPWZ1bmN0aW9uKGUpe3ZhciB0PWcub25EZXN0cm95ZWQ7dyhudWxsKSx0JiZ0KGUpfTtyZXR1cm4gdC51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7aWYobnVsbCE9QyYmcyE9PU4pdHJ5e0Muc2V0SHRtbChzKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKGUpfX0pLFtzXSksdC51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7dmFyIGU7aWYobnVsbCE9RS5jdXJyZW50JiZudWxsPT1DJiYhKG51bGw9PT0oZT1FLmN1cnJlbnQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmdldEF0dHJpYnV0ZShcImRhdGEtdy1lLXRleHRhcmVhXCIpKSl7dmFyIHQ9ci5jcmVhdGVFZGl0b3Ioe3NlbGVjdG9yOkUuY3VycmVudCxjb25maWc6dSh1KHt9LGcpLHtvbkNyZWF0ZWQ6UixvbkNoYW5nZTpTLG9uRGVzdHJveWVkOlR9KSxjb250ZW50Om8saHRtbDpjfHxzLG1vZGU6cH0pO3codCl9fSksW0NdKSxhLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtzdHlsZTpoLHJlZjpFLGNsYXNzTmFtZTpqfSl9LGUuVG9vbGJhcj1mdW5jdGlvbihlKXt2YXIgcj1lLmVkaXRvcixuPWUuZGVmYXVsdENvbmZpZyxvPXZvaWQgMD09PW4/e306bix1PWUubW9kZSxpPXZvaWQgMD09PXU/XCJkZWZhdWx0XCI6dSxmPWUuc3R5bGUsYz12b2lkIDA9PT1mP3t9OmYsZD1lLmNsYXNzTmFtZSxzPXQudXNlUmVmKG51bGwpO3JldHVybiB0LnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtudWxsIT1zLmN1cnJlbnQmJm51bGwhPXImJmwuY3JlYXRlVG9vbGJhcih7ZWRpdG9yOnIsc2VsZWN0b3I6cy5jdXJyZW50LGNvbmZpZzpvLG1vZGU6aX0pfSksW3JdKSxhLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtzdHlsZTpjLHJlZjpzLGNsYXNzTmFtZTpkfSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wangeditor/editor-for-react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wangeditor/editor/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@wangeditor/editor/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n})(this, (function (exports) { 'use strict';\n\n  /**\r\n   * @description browser polyfill\r\n   * @author wangfupeng\r\n   */\r\n  var _a;\r\n  // @ts-nocheck\r\n  // 必须是浏览器环境\r\n  if (typeof global === 'undefined') {\r\n      // 检查 IE 浏览器\r\n      if ('ActiveXObject' in window) {\r\n          var info = '抱歉，wangEditor V5+ 版本开始，不在支持 IE 浏览器';\r\n          info += '\\n Sorry, wangEditor V5+ versions do not support IE browser.';\r\n          console.error(info);\r\n      }\r\n      globalThisPolyfill();\r\n      AggregateErrorPolyfill();\r\n  }\r\n  else if (global && ((_a = global.navigator) === null || _a === void 0 ? void 0 : _a.userAgent.match('QQBrowser'))) {\r\n      // 兼容 QQ 浏览器 AggregateError 报错\r\n      globalThisPolyfill();\r\n      AggregateErrorPolyfill();\r\n  }\r\n  function globalThisPolyfill() {\r\n      // 部分浏览器不支持 globalThis\r\n      if (typeof globalThis === 'undefined') {\r\n          // @ts-ignore\r\n          window.globalThis = window;\r\n      }\r\n  }\r\n  function AggregateErrorPolyfill() {\r\n      if (typeof AggregateError === 'undefined') {\r\n          window.AggregateError = function (errors, msg) {\r\n              var err = new Error(msg);\r\n              err.errors = errors;\r\n              return err;\r\n          };\r\n      }\r\n  }\n\n  /**\r\n   * @description node polyfill\r\n   * @author wangfupeng\r\n   */\r\n  // @ts-nocheck\r\n  // 必须是 node 环境\r\n  if (typeof global === 'object') {\r\n      // 用于 nodejs ，避免报错\r\n      var globalProperty = Object.getOwnPropertyDescriptor(global, 'window');\r\n      // global.window 为空则直接写入\r\n      // 部分框架下已经定义了global.window且是不可写属性\r\n      if (!global.window || globalProperty.set) {\r\n          global.window = global;\r\n          global.requestAnimationFrame = function () { };\r\n          global.navigator = {\r\n              userAgent: '',\r\n          };\r\n          global.location = {\r\n              hostname: '0.0.0.0',\r\n              port: 0,\r\n              protocol: 'http:',\r\n          };\r\n          global.btoa = function () { };\r\n          global.crypto = {\r\n              getRandomValues: function (buffer) {\r\n                  return nodeCrypto.randomFillSync(buffer);\r\n              },\r\n          };\r\n      }\r\n      if (global.document != null) {\r\n          // SSR 环境下可能会报错 （issue 4409）\r\n          if (global.document.getElementsByTagName == null) {\r\n              global.document.getElementsByTagName = function () { return []; };\r\n          }\r\n      }\r\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function getDefaultExportFromCjs (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  function createCommonjsModule$1(fn) {\n    var module = { exports: {} };\n  \treturn fn(module, module.exports), module.exports;\n  }\n\n  /*!\n   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n   *\n   * Copyright (c) 2014-2017, Jon Schlinkert.\n   * Released under the MIT License.\n   */\n\n  function isObject$4(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n  }\n\n  function isPlainObject$2(o) {\n    var ctor,prot;\n\n    if (isObject$4(o) === false) return false;\n\n    // If has modified constructor\n    ctor = o.constructor;\n    if (ctor === undefined) return true;\n\n    // If has modified prototype\n    prot = ctor.prototype;\n    if (isObject$4(prot) === false) return false;\n\n    // If constructor does not have an Object-specific method\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n      return false;\n    }\n\n    // Most likely a plain Object\n    return true;\n  }\n\n  var isPlainObject_2 = isPlainObject$2;\n\n  var isPlainObject_1 = /*#__PURE__*/Object.defineProperty({\n  \tisPlainObject: isPlainObject_2\n  }, '__esModule', {value: true});\n\n  var _ref;\n\n  // Should be no imports here!\n  // Some things that should be evaluated before all else...\n  // We only want to know if non-polyfilled symbols are available\n  var hasSymbol = typeof Symbol !== \"undefined\" && typeof\n  /*#__PURE__*/\n  Symbol(\"x\") === \"symbol\";\n  var hasMap = typeof Map !== \"undefined\";\n  var hasSet = typeof Set !== \"undefined\";\n  var hasProxies = typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\";\n  /**\r\n   * The sentinel value returned by producers to replace the draft with undefined.\r\n   */\n\n  var NOTHING = hasSymbol ?\n  /*#__PURE__*/\n  Symbol.for(\"immer-nothing\") : (_ref = {}, _ref[\"immer-nothing\"] = true, _ref);\n  /**\r\n   * To let Immer treat your class instances as plain immutable objects\r\n   * (albeit with a custom prototype), you must define either an instance property\r\n   * or a static property on each of your custom classes.\r\n   *\r\n   * Otherwise, your class instance will never be drafted, which means it won't be\r\n   * safe to mutate in a produce callback.\r\n   */\n\n  var DRAFTABLE = hasSymbol ?\n  /*#__PURE__*/\n  Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\n  var DRAFT_STATE = hasSymbol ?\n  /*#__PURE__*/\n  Symbol.for(\"immer-state\") : \"__$immer_state\"; // Even a polyfilled Symbol might provide Symbol.iterator\n\n  var iteratorSymbol$1 = typeof Symbol != \"undefined\" && Symbol.iterator || \"@@iterator\";\n\n  var errors = {\n    0: \"Illegal state\",\n    1: \"Immer drafts cannot have computed properties\",\n    2: \"This object has been frozen and should not be mutated\",\n    3: function _(data) {\n      return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n    },\n    4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n    5: \"Immer forbids circular references\",\n    6: \"The first or second argument to `produce` must be a function\",\n    7: \"The third argument to `produce` must be a function or undefined\",\n    8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n    9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n    10: \"The given draft is already finalized\",\n    11: \"Object.defineProperty() cannot be used on an Immer draft\",\n    12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n    13: \"Immer only supports deleting array indices\",\n    14: \"Immer only supports setting array indices and the 'length' property\",\n    15: function _(path) {\n      return \"Cannot apply patch, path doesn't resolve: \" + path;\n    },\n    16: 'Sets cannot have \"replace\" patches.',\n    17: function _(op) {\n      return \"Unsupported patch operation: \" + op;\n    },\n    18: function _(plugin) {\n      return \"The plugin for '\" + plugin + \"' has not been loaded into Immer. To enable the plugin, import and call `enable\" + plugin + \"()` when initializing your application.\";\n    },\n    20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n    21: function _(thing) {\n      return \"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\" + thing + \"'\";\n    },\n    22: function _(thing) {\n      return \"'current' expects a draft, got: \" + thing;\n    },\n    23: function _(thing) {\n      return \"'original' expects a draft, got: \" + thing;\n    },\n    24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n  };\n  function die(error) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    {\n      var e = errors[error];\n      var msg = !e ? \"unknown error nr: \" + error : typeof e === \"function\" ? e.apply(null, args) : e;\n      throw new Error(\"[Immer] \" + msg);\n    }\n  }\n\n  /** Returns true if the given value is an Immer draft */\n\n\n\n  function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE];\n  }\n  /** Returns true if the given value can be drafted by Immer */\n\n\n\n  function isDraftable(value) {\n    if (!value) return false;\n    return isPlainObject$1(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);\n  }\n  var objectCtorString =\n  /*#__PURE__*/\n  Object.prototype.constructor.toString();\n\n\n  function isPlainObject$1(value) {\n    if (!value || typeof value !== \"object\") return false;\n    var proto = Object.getPrototypeOf(value);\n\n    if (proto === null) {\n      return true;\n    }\n\n    var Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    if (Ctor === Object) return true;\n    return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n  }\n  function original(value) {\n    if (!isDraft(value)) die(23, value);\n    return value[DRAFT_STATE].base_;\n  }\n\n\n  var ownKeys$a = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n  } :\n  /* istanbul ignore next */\n  Object.getOwnPropertyNames;\n  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n    // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n    var res = {};\n    ownKeys$a(target).forEach(function (key) {\n      res[key] = Object.getOwnPropertyDescriptor(target, key);\n    });\n    return res;\n  };\n  function each$1(obj, iter, enumerableOnly) {\n    if (enumerableOnly === void 0) {\n      enumerableOnly = false;\n    }\n\n    if (getArchtype(obj) === 0\n    /* Object */\n    ) {\n        (enumerableOnly ? Object.keys : ownKeys$a)(obj).forEach(function (key) {\n          if (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj);\n        });\n      } else {\n      obj.forEach(function (entry, index) {\n        return iter(index, entry, obj);\n      });\n    }\n  }\n\n\n  function getArchtype(thing) {\n    /* istanbul ignore next */\n    var state = thing[DRAFT_STATE];\n    return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5\n    : state.type_ // others are the same\n    : Array.isArray(thing) ? 1\n    /* Array */\n    : isMap(thing) ? 2\n    /* Map */\n    : isSet(thing) ? 3\n    /* Set */\n    : 0\n    /* Object */\n    ;\n  }\n\n\n  function has(thing, prop) {\n    return getArchtype(thing) === 2\n    /* Map */\n    ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n  }\n\n\n  function get(thing, prop) {\n    // @ts-ignore\n    return getArchtype(thing) === 2\n    /* Map */\n    ? thing.get(prop) : thing[prop];\n  }\n\n\n  function set(thing, propOrOldValue, value) {\n    var t = getArchtype(thing);\n    if (t === 2\n    /* Map */\n    ) thing.set(propOrOldValue, value);else if (t === 3\n    /* Set */\n    ) {\n        thing.delete(propOrOldValue);\n        thing.add(value);\n      } else thing[propOrOldValue] = value;\n  }\n\n\n  function is$1(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      return x !== x && y !== y;\n    }\n  }\n\n\n  function isMap(target) {\n    return hasMap && target instanceof Map;\n  }\n\n\n  function isSet(target) {\n    return hasSet && target instanceof Set;\n  }\n\n\n  function latest(state) {\n    return state.copy_ || state.base_;\n  }\n\n\n  function shallowCopy(base) {\n    if (Array.isArray(base)) return Array.prototype.slice.call(base);\n    var descriptors = getOwnPropertyDescriptors(base);\n    delete descriptors[DRAFT_STATE];\n    var keys = ownKeys$a(descriptors);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var desc = descriptors[key];\n\n      if (desc.writable === false) {\n        desc.writable = true;\n        desc.configurable = true;\n      } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n      // with libraries that trap values, like mobx or vue\n      // unlike object.assign, non-enumerables will be copied as well\n\n\n      if (desc.get || desc.set) descriptors[key] = {\n        configurable: true,\n        writable: true,\n        enumerable: desc.enumerable,\n        value: base[key]\n      };\n    }\n\n    return Object.create(Object.getPrototypeOf(base), descriptors);\n  }\n  function freeze(obj, deep) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n\n    if (getArchtype(obj) > 1\n    /* Map or Set */\n    ) {\n        obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n      }\n\n    Object.freeze(obj);\n    if (deep) each$1(obj, function (key, value) {\n      return freeze(value, true);\n    }, true);\n    return obj;\n  }\n\n  function dontMutateFrozenCollections() {\n    die(2);\n  }\n\n  function isFrozen(obj) {\n    if (obj == null || typeof obj !== \"object\") return true; // See #600, IE dies on non-objects in Object.isFrozen\n\n    return Object.isFrozen(obj);\n  }\n\n  /** Plugin utilities */\n\n  var plugins = {};\n  function getPlugin(pluginKey) {\n    var plugin = plugins[pluginKey];\n\n    if (!plugin) {\n      die(18, pluginKey);\n    } // @ts-ignore\n\n\n    return plugin;\n  }\n  function loadPlugin(pluginKey, implementation) {\n    if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n  }\n\n  var currentScope;\n  function getCurrentScope() {\n    if ( !currentScope) die(0);\n    return currentScope;\n  }\n\n  function createScope(parent_, immer_) {\n    return {\n      drafts_: [],\n      parent_: parent_,\n      immer_: immer_,\n      // Whenever the modified draft contains a draft from another scope, we\n      // need to prevent auto-freezing so the unowned draft can be finalized.\n      canAutoFreeze_: true,\n      unfinalizedDrafts_: 0\n    };\n  }\n\n  function usePatchesInScope(scope, patchListener) {\n    if (patchListener) {\n      getPlugin(\"Patches\"); // assert we have the plugin\n\n      scope.patches_ = [];\n      scope.inversePatches_ = [];\n      scope.patchListener_ = patchListener;\n    }\n  }\n  function revokeScope(scope) {\n    leaveScope(scope);\n    scope.drafts_.forEach(revokeDraft); // @ts-ignore\n\n    scope.drafts_ = null;\n  }\n  function leaveScope(scope) {\n    if (scope === currentScope) {\n      currentScope = scope.parent_;\n    }\n  }\n  function enterScope(immer) {\n    return currentScope = createScope(currentScope, immer);\n  }\n\n  function revokeDraft(draft) {\n    var state = draft[DRAFT_STATE];\n    if (state.type_ === 0\n    /* ProxyObject */\n    || state.type_ === 1\n    /* ProxyArray */\n    ) state.revoke_();else state.revoked_ = true;\n  }\n\n  function processResult(result, scope) {\n    scope.unfinalizedDrafts_ = scope.drafts_.length;\n    var baseDraft = scope.drafts_[0];\n    var isReplaced = result !== undefined && result !== baseDraft;\n    if (!scope.immer_.useProxies_) getPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced);\n\n    if (isReplaced) {\n      if (baseDraft[DRAFT_STATE].modified_) {\n        revokeScope(scope);\n        die(4);\n      }\n\n      if (isDraftable(result)) {\n        // Finalize the result in case it contains (or is) a subset of the draft.\n        result = finalize(scope, result);\n        if (!scope.parent_) maybeFreeze(scope, result);\n      }\n\n      if (scope.patches_) {\n        getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE], result, scope.patches_, scope.inversePatches_);\n      }\n    } else {\n      // Finalize the base draft.\n      result = finalize(scope, baseDraft, []);\n    }\n\n    revokeScope(scope);\n\n    if (scope.patches_) {\n      scope.patchListener_(scope.patches_, scope.inversePatches_);\n    }\n\n    return result !== NOTHING ? result : undefined;\n  }\n\n  function finalize(rootScope, value, path) {\n    // Don't recurse in tho recursive data structures\n    if (isFrozen(value)) return value;\n    var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts\n\n    if (!state) {\n      each$1(value, function (key, childValue) {\n        return finalizeProperty(rootScope, state, value, key, childValue, path);\n      }, true // See #590, don't recurse into non-enumerable of non drafted objects\n      );\n      return value;\n    } // Never finalize drafts owned by another scope.\n\n\n    if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original\n\n    if (!state.modified_) {\n      maybeFreeze(rootScope, state.base_, true);\n      return state.base_;\n    } // Not finalized yet, let's do that now\n\n\n    if (!state.finalized_) {\n      state.finalized_ = true;\n      state.scope_.unfinalizedDrafts_--;\n      var result = // For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n      state.type_ === 4\n      /* ES5Object */\n      || state.type_ === 5\n      /* ES5Array */\n      ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy\n      // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n      // Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n      // back to each(result, ....)\n\n      each$1(state.type_ === 3\n      /* Set */\n      ? new Set(result) : result, function (key, childValue) {\n        return finalizeProperty(rootScope, state, result, key, childValue, path);\n      }); // everything inside is frozen, we can freeze here\n\n      maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches\n\n      if (path && rootScope.patches_) {\n        getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n      }\n    }\n\n    return state.copy_;\n  }\n\n  function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath) {\n    if ( childValue === targetObject) die(5);\n\n    if (isDraft(childValue)) {\n      var path = rootPath && parentState && parentState.type_ !== 3\n      /* Set */\n      && // Set objects are atomic since they have no keys.\n      !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.\n      ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n\n      var res = finalize(rootScope, childValue, path);\n      set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen\n      // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\n      if (isDraft(res)) {\n        rootScope.canAutoFreeze_ = false;\n      } else return;\n    } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\n\n    if (isDraftable(childValue) && !isFrozen(childValue)) {\n      if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n        // optimization: if an object is not a draft, and we don't have to\n        // deepfreeze everything, and we are sure that no drafts are left in the remaining object\n        // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n        // This benefits especially adding large data tree's without further processing.\n        // See add-data.js perf test\n        return;\n      }\n\n      finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\n      if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);\n    }\n  }\n\n  function maybeFreeze(scope, value, deep) {\n    if (deep === void 0) {\n      deep = false;\n    }\n\n    if (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n      freeze(value, deep);\n    }\n  }\n\n  /**\r\n   * Returns a new draft of the `base` object.\r\n   *\r\n   * The second argument is the parent draft-state (used internally).\r\n   */\n\n  function createProxyProxy(base, parent) {\n    var isArray = Array.isArray(base);\n    var state = {\n      type_: isArray ? 1\n      /* ProxyArray */\n      : 0\n      /* ProxyObject */\n      ,\n      // Track which produce call this is associated with.\n      scope_: parent ? parent.scope_ : getCurrentScope(),\n      // True for both shallow and deep changes.\n      modified_: false,\n      // Used during finalization.\n      finalized_: false,\n      // Track which properties have been assigned (true) or deleted (false).\n      assigned_: {},\n      // The parent draft state.\n      parent_: parent,\n      // The base state.\n      base_: base,\n      // The base proxy.\n      draft_: null,\n      // The base copy with any updated values.\n      copy_: null,\n      // Called by the `produce` function.\n      revoke_: null,\n      isManual_: false\n    }; // the traps must target something, a bit like the 'real' base.\n    // but also, we need to be able to determine from the target what the relevant state is\n    // (to avoid creating traps per instance to capture the state in closure,\n    // and to avoid creating weird hidden properties as well)\n    // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n    // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n    var target = state;\n    var traps = objectTraps;\n\n    if (isArray) {\n      target = [state];\n      traps = arrayTraps;\n    }\n\n    var _Proxy$revocable = Proxy.revocable(target, traps),\n        revoke = _Proxy$revocable.revoke,\n        proxy = _Proxy$revocable.proxy;\n\n    state.draft_ = proxy;\n    state.revoke_ = revoke;\n    return proxy;\n  }\n  /**\r\n   * Object drafts\r\n   */\n\n  var objectTraps = {\n    get: function get(state, prop) {\n      if (prop === DRAFT_STATE) return state;\n      var source = latest(state);\n\n      if (!has(source, prop)) {\n        // non-existing or non-own property...\n        return readPropFromProto(state, source, prop);\n      }\n\n      var value = source[prop];\n\n      if (state.finalized_ || !isDraftable(value)) {\n        return value;\n      } // Check for existing draft in modified state.\n      // Assigned values are never drafted. This catches any drafts we created, too.\n\n\n      if (value === peek(state.base_, prop)) {\n        prepareCopy(state);\n        return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);\n      }\n\n      return value;\n    },\n    has: function has(state, prop) {\n      return prop in latest(state);\n    },\n    ownKeys: function ownKeys(state) {\n      return Reflect.ownKeys(latest(state));\n    },\n    set: function set(state, prop\n    /* strictly not, but helps TS */\n    , value) {\n      var desc = getDescriptorFromProto(latest(state), prop);\n\n      if (desc === null || desc === void 0 ? void 0 : desc.set) {\n        // special case: if this write is captured by a setter, we have\n        // to trigger it with the correct context\n        desc.set.call(state.draft_, value);\n        return true;\n      }\n\n      if (!state.modified_) {\n        // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n        // from setting an existing property with value undefined to undefined (which is not a change)\n        var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment\n\n        var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];\n\n        if (currentState && currentState.base_ === value) {\n          state.copy_[prop] = value;\n          state.assigned_[prop] = false;\n          return true;\n        }\n\n        if (is$1(value, current) && (value !== undefined || has(state.base_, prop))) return true;\n        prepareCopy(state);\n        markChanged(state);\n      }\n\n      if (state.copy_[prop] === value && // special case: NaN\n      typeof value !== \"number\" && ( // special case: handle new props with value 'undefined'\n      value !== undefined || prop in state.copy_)) return true; // @ts-ignore\n\n      state.copy_[prop] = value;\n      state.assigned_[prop] = true;\n      return true;\n    },\n    deleteProperty: function deleteProperty(state, prop) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (peek(state.base_, prop) !== undefined || prop in state.base_) {\n        state.assigned_[prop] = false;\n        prepareCopy(state);\n        markChanged(state);\n      } else {\n        // if an originally not assigned property was deleted\n        delete state.assigned_[prop];\n      } // @ts-ignore\n\n\n      if (state.copy_) delete state.copy_[prop];\n      return true;\n    },\n    // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n    // the same guarantee in ES5 mode.\n    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n      var owner = latest(state);\n      var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n      if (!desc) return desc;\n      return {\n        writable: true,\n        configurable: state.type_ !== 1\n        /* ProxyArray */\n        || prop !== \"length\",\n        enumerable: desc.enumerable,\n        value: owner[prop]\n      };\n    },\n    defineProperty: function defineProperty() {\n      die(11);\n    },\n    getPrototypeOf: function getPrototypeOf(state) {\n      return Object.getPrototypeOf(state.base_);\n    },\n    setPrototypeOf: function setPrototypeOf() {\n      die(12);\n    }\n  };\n  /**\r\n   * Array drafts\r\n   */\n\n  var arrayTraps = {};\n  each$1(objectTraps, function (key, fn) {\n    // @ts-ignore\n    arrayTraps[key] = function () {\n      arguments[0] = arguments[0][0];\n      return fn.apply(this, arguments);\n    };\n  });\n\n  arrayTraps.deleteProperty = function (state, prop) {\n    if ( isNaN(parseInt(prop))) die(13);\n    return objectTraps.deleteProperty.call(this, state[0], prop);\n  };\n\n  arrayTraps.set = function (state, prop, value) {\n    if ( prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n    return objectTraps.set.call(this, state[0], prop, value, state[0]);\n  }; // Access a property without creating an Immer draft.\n\n\n  function peek(draft, prop) {\n    var state = draft[DRAFT_STATE];\n    var source = state ? latest(state) : draft;\n    return source[prop];\n  }\n\n  function readPropFromProto(state, source, prop) {\n    var _desc$get;\n\n    var desc = getDescriptorFromProto(source, prop);\n    return desc ? \"value\" in desc ? desc.value : // This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;\n  }\n\n  function getDescriptorFromProto(source, prop) {\n    // 'in' checks proto!\n    if (!(prop in source)) return undefined;\n    var proto = Object.getPrototypeOf(source);\n\n    while (proto) {\n      var desc = Object.getOwnPropertyDescriptor(proto, prop);\n      if (desc) return desc;\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return undefined;\n  }\n\n  function markChanged(state) {\n    if (!state.modified_) {\n      state.modified_ = true;\n\n      if (state.parent_) {\n        markChanged(state.parent_);\n      }\n    }\n  }\n  function prepareCopy(state) {\n    if (!state.copy_) {\n      state.copy_ = shallowCopy(state.base_);\n    }\n  }\n\n  var Immer =\n  /*#__PURE__*/\n  function () {\n    function Immer(config) {\n      var _this = this;\n\n      this.useProxies_ = hasProxies;\n      this.autoFreeze_ = true;\n      /**\r\n       * The `produce` function takes a value and a \"recipe function\" (whose\r\n       * return value often depends on the base state). The recipe function is\r\n       * free to mutate its first argument however it wants. All mutations are\r\n       * only ever applied to a __copy__ of the base state.\r\n       *\r\n       * Pass only a function to create a \"curried producer\" which relieves you\r\n       * from passing the recipe function every time.\r\n       *\r\n       * Only plain objects and arrays are made mutable. All other objects are\r\n       * considered uncopyable.\r\n       *\r\n       * Note: This function is __bound__ to its `Immer` instance.\r\n       *\r\n       * @param {any} base - the initial state\r\n       * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n       * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n       * @returns {any} a new state, or the initial state if nothing was modified\r\n       */\n\n      this.produce = function (base, recipe, patchListener) {\n        // curried invocation\n        if (typeof base === \"function\" && typeof recipe !== \"function\") {\n          var defaultBase = recipe;\n          recipe = base;\n          var self = _this;\n          return function curriedProduce(base) {\n            var _this2 = this;\n\n            if (base === void 0) {\n              base = defaultBase;\n            }\n\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n\n            return self.produce(base, function (draft) {\n              var _recipe;\n\n              return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args));\n            }); // prettier-ignore\n          };\n        }\n\n        if (typeof recipe !== \"function\") die(6);\n        if (patchListener !== undefined && typeof patchListener !== \"function\") die(7);\n        var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n        if (isDraftable(base)) {\n          var scope = enterScope(_this);\n          var proxy = createProxy(_this, base, undefined);\n          var hasError = true;\n\n          try {\n            result = recipe(proxy);\n            hasError = false;\n          } finally {\n            // finally instead of catch + rethrow better preserves original stack\n            if (hasError) revokeScope(scope);else leaveScope(scope);\n          }\n\n          if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n            return result.then(function (result) {\n              usePatchesInScope(scope, patchListener);\n              return processResult(result, scope);\n            }, function (error) {\n              revokeScope(scope);\n              throw error;\n            });\n          }\n\n          usePatchesInScope(scope, patchListener);\n          return processResult(result, scope);\n        } else if (!base || typeof base !== \"object\") {\n          result = recipe(base);\n          if (result === NOTHING) return undefined;\n          if (result === undefined) result = base;\n          if (_this.autoFreeze_) freeze(result, true);\n          return result;\n        } else die(21, base);\n      };\n\n      this.produceWithPatches = function (arg1, arg2, arg3) {\n        if (typeof arg1 === \"function\") {\n          return function (state) {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n\n            return _this.produceWithPatches(state, function (draft) {\n              return arg1.apply(void 0, [draft].concat(args));\n            });\n          };\n        }\n\n        var patches, inversePatches;\n\n        var nextState = _this.produce(arg1, arg2, function (p, ip) {\n          patches = p;\n          inversePatches = ip;\n        });\n\n        return [nextState, patches, inversePatches];\n      };\n\n      if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === \"boolean\") this.setUseProxies(config.useProxies);\n      if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n    }\n\n    var _proto = Immer.prototype;\n\n    _proto.createDraft = function createDraft(base) {\n      if (!isDraftable(base)) die(8);\n      if (isDraft(base)) base = current(base);\n      var scope = enterScope(this);\n      var proxy = createProxy(this, base, undefined);\n      proxy[DRAFT_STATE].isManual_ = true;\n      leaveScope(scope);\n      return proxy;\n    };\n\n    _proto.finishDraft = function finishDraft(draft, patchListener) {\n      var state = draft && draft[DRAFT_STATE];\n\n      {\n        if (!state || !state.isManual_) die(9);\n        if (state.finalized_) die(10);\n      }\n\n      var scope = state.scope_;\n      usePatchesInScope(scope, patchListener);\n      return processResult(undefined, scope);\n    }\n    /**\r\n     * Pass true to automatically freeze all copies created by Immer.\r\n     *\r\n     * By default, auto-freezing is enabled.\r\n     */\n    ;\n\n    _proto.setAutoFreeze = function setAutoFreeze(value) {\n      this.autoFreeze_ = value;\n    }\n    /**\r\n     * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n     * always faster than using ES5 proxies.\r\n     *\r\n     * By default, feature detection is used, so calling this is rarely necessary.\r\n     */\n    ;\n\n    _proto.setUseProxies = function setUseProxies(value) {\n      if (value && !hasProxies) {\n        die(20);\n      }\n\n      this.useProxies_ = value;\n    };\n\n    _proto.applyPatches = function applyPatches(base, patches) {\n      // If a patch replaces the entire state, take that replacement as base\n      // before applying patches\n      var i;\n\n      for (i = patches.length - 1; i >= 0; i--) {\n        var patch = patches[i];\n\n        if (patch.path.length === 0 && patch.op === \"replace\") {\n          base = patch.value;\n          break;\n        }\n      } // If there was a patch that replaced the entire state, start from the\n      // patch after that.\n\n\n      if (i > -1) {\n        patches = patches.slice(i + 1);\n      }\n\n      var applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n\n      if (isDraft(base)) {\n        // N.B: never hits if some patch a replacement, patches are never drafts\n        return applyPatchesImpl(base, patches);\n      } // Otherwise, produce a copy of the base state.\n\n\n      return this.produce(base, function (draft) {\n        return applyPatchesImpl(draft, patches);\n      });\n    };\n\n    return Immer;\n  }();\n  function createProxy(immer, value, parent) {\n    // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n    var draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin(\"ES5\").createES5Proxy_(value, parent);\n    var scope = parent ? parent.scope_ : getCurrentScope();\n    scope.drafts_.push(draft);\n    return draft;\n  }\n\n  function current(value) {\n    if (!isDraft(value)) die(22, value);\n    return currentImpl(value);\n  }\n\n  function currentImpl(value) {\n    if (!isDraftable(value)) return value;\n    var state = value[DRAFT_STATE];\n    var copy;\n    var archType = getArchtype(value);\n\n    if (state) {\n      if (!state.modified_ && (state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying\n\n      state.finalized_ = true;\n      copy = copyHelper(value, archType);\n      state.finalized_ = false;\n    } else {\n      copy = copyHelper(value, archType);\n    }\n\n    each$1(copy, function (key, childValue) {\n      if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change\n\n      set(copy, key, currentImpl(childValue));\n    }); // In the future, we might consider freezing here, based on the current settings\n\n    return archType === 3\n    /* Set */\n    ? new Set(copy) : copy;\n  }\n\n  function copyHelper(value, archType) {\n    // creates a shallow copy, even if it is a map or set\n    switch (archType) {\n      case 2\n      /* Map */\n      :\n        return new Map(value);\n\n      case 3\n      /* Set */\n      :\n        // Set will be cloned as array temporarily, so that we can replace individual items\n        return Array.from(value);\n    }\n\n    return shallowCopy(value);\n  }\n\n  function enableES5() {\n    function willFinalizeES5_(scope, result, isReplaced) {\n      if (!isReplaced) {\n        if (scope.patches_) {\n          markChangesRecursively(scope.drafts_[0]);\n        } // This is faster when we don't care about which attributes changed.\n\n\n        markChangesSweep(scope.drafts_);\n      } // When a child draft is returned, look for changes.\n      else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {\n          markChangesSweep(scope.drafts_);\n        }\n    }\n\n    function createES5Draft(isArray, base) {\n      if (isArray) {\n        var draft = new Array(base.length);\n\n        for (var i = 0; i < base.length; i++) {\n          Object.defineProperty(draft, \"\" + i, proxyProperty(i, true));\n        }\n\n        return draft;\n      } else {\n        var _descriptors = getOwnPropertyDescriptors(base);\n\n        delete _descriptors[DRAFT_STATE];\n        var keys = ownKeys$a(_descriptors);\n\n        for (var _i = 0; _i < keys.length; _i++) {\n          var key = keys[_i];\n          _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);\n        }\n\n        return Object.create(Object.getPrototypeOf(base), _descriptors);\n      }\n    }\n\n    function createES5Proxy_(base, parent) {\n      var isArray = Array.isArray(base);\n      var draft = createES5Draft(isArray, base);\n      var state = {\n        type_: isArray ? 5\n        /* ES5Array */\n        : 4\n        /* ES5Object */\n        ,\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        modified_: false,\n        finalized_: false,\n        assigned_: {},\n        parent_: parent,\n        // base is the object we are drafting\n        base_: base,\n        // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n        draft_: draft,\n        copy_: null,\n        revoked_: false,\n        isManual_: false\n      };\n      Object.defineProperty(draft, DRAFT_STATE, {\n        value: state,\n        // enumerable: false <- the default\n        writable: true\n      });\n      return draft;\n    } // property descriptors are recycled to make sure we don't create a get and set closure per property,\n    // but share them all instead\n\n\n    var descriptors = {};\n\n    function proxyProperty(prop, enumerable) {\n      var desc = descriptors[prop];\n\n      if (desc) {\n        desc.enumerable = enumerable;\n      } else {\n        descriptors[prop] = desc = {\n          configurable: true,\n          enumerable: enumerable,\n          get: function get() {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state); // @ts-ignore\n\n            return objectTraps.get(state, prop);\n          },\n          set: function set(value) {\n            var state = this[DRAFT_STATE];\n            assertUnrevoked(state); // @ts-ignore\n\n            objectTraps.set(state, prop, value);\n          }\n        };\n      }\n\n      return desc;\n    } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\n    function markChangesSweep(drafts) {\n      // The natural order of drafts in the `scope` array is based on when they\n      // were accessed. By processing drafts in reverse natural order, we have a\n      // better chance of processing leaf nodes first. When a leaf node is known to\n      // have changed, we can avoid any traversal of its ancestor nodes.\n      for (var i = drafts.length - 1; i >= 0; i--) {\n        var state = drafts[i][DRAFT_STATE];\n\n        if (!state.modified_) {\n          switch (state.type_) {\n            case 5\n            /* ES5Array */\n            :\n              if (hasArrayChanges(state)) markChanged(state);\n              break;\n\n            case 4\n            /* ES5Object */\n            :\n              if (hasObjectChanges(state)) markChanged(state);\n              break;\n          }\n        }\n      }\n    }\n\n    function markChangesRecursively(object) {\n      if (!object || typeof object !== \"object\") return;\n      var state = object[DRAFT_STATE];\n      if (!state) return;\n      var base_ = state.base_,\n          draft_ = state.draft_,\n          assigned_ = state.assigned_,\n          type_ = state.type_;\n\n      if (type_ === 4\n      /* ES5Object */\n      ) {\n          // Look for added keys.\n          // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n          // unnecessary work.\n          // also: probably we can store the information we detect here, to speed up tree finalization!\n          each$1(draft_, function (key) {\n            if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.\n\n            if (base_[key] === undefined && !has(base_, key)) {\n              assigned_[key] = true;\n              markChanged(state);\n            } else if (!assigned_[key]) {\n              // Only untouched properties trigger recursion.\n              markChangesRecursively(draft_[key]);\n            }\n          }); // Look for removed keys.\n\n          each$1(base_, function (key) {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (draft_[key] === undefined && !has(draft_, key)) {\n              assigned_[key] = false;\n              markChanged(state);\n            }\n          });\n        } else if (type_ === 5\n      /* ES5Array */\n      ) {\n          if (hasArrayChanges(state)) {\n            markChanged(state);\n            assigned_.length = true;\n          }\n\n          if (draft_.length < base_.length) {\n            for (var i = draft_.length; i < base_.length; i++) {\n              assigned_[i] = false;\n            }\n          } else {\n            for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {\n              assigned_[_i2] = true;\n            }\n          } // Minimum count is enough, the other parts has been processed.\n\n\n          var min = Math.min(draft_.length, base_.length);\n\n          for (var _i3 = 0; _i3 < min; _i3++) {\n            // Only untouched indices trigger recursion.\n            if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);\n          }\n        }\n    }\n\n    function hasObjectChanges(state) {\n      var base_ = state.base_,\n          draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because\n      // non-numeric keys are ordered by time of definition on the object.\n\n      var keys = ownKeys$a(draft_);\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        var key = keys[i];\n        if (key === DRAFT_STATE) continue;\n        var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n        if (baseValue === undefined && !has(base_, key)) {\n          return true;\n        } // Once a base key is deleted, future changes go undetected, because its\n        // descriptor is erased. This branch detects any missed changes.\n        else {\n            var value = draft_[key];\n\n            var _state = value && value[DRAFT_STATE];\n\n            if (_state ? _state.base_ !== baseValue : !is$1(value, baseValue)) {\n              return true;\n            }\n          }\n      } // At this point, no keys were added or changed.\n      // Compare key count to determine if keys were deleted.\n\n\n      var baseIsDraft = !!base_[DRAFT_STATE];\n      return keys.length !== ownKeys$a(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE\n    }\n\n    function hasArrayChanges(state) {\n      var draft_ = state.draft_;\n      if (draft_.length !== state.base_.length) return true; // See #116\n      // If we first shorten the length, our array interceptors will be removed.\n      // If after that new items are added, result in the same original length,\n      // those last items will have no intercepting property.\n      // So if there is no own descriptor on the last position, we know that items were removed and added\n      // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n      // the last one\n\n      var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n      if (descriptor && !descriptor.get) return true; // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n      return false;\n    }\n\n    function hasChanges_(state) {\n      return state.type_ === 4\n      /* ES5Object */\n      ? hasObjectChanges(state) : hasArrayChanges(state);\n    }\n\n    function assertUnrevoked(state\n    /*ES5State | MapState | SetState*/\n    ) {\n      if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n\n    loadPlugin(\"ES5\", {\n      createES5Proxy_: createES5Proxy_,\n      willFinalizeES5_: willFinalizeES5_,\n      hasChanges_: hasChanges_\n    });\n  }\n\n  function enablePatches() {\n    var REPLACE = \"replace\";\n    var ADD = \"add\";\n    var REMOVE = \"remove\";\n\n    function generatePatches_(state, basePath, patches, inversePatches) {\n      switch (state.type_) {\n        case 0\n        /* ProxyObject */\n        :\n        case 4\n        /* ES5Object */\n        :\n        case 2\n        /* Map */\n        :\n          return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n\n        case 5\n        /* ES5Array */\n        :\n        case 1\n        /* ProxyArray */\n        :\n          return generateArrayPatches(state, basePath, patches, inversePatches);\n\n        case 3\n        /* Set */\n        :\n          return generateSetPatches(state, basePath, patches, inversePatches);\n      }\n    }\n\n    function generateArrayPatches(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          assigned_ = state.assigned_;\n      var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.\n\n      if (copy_.length < base_.length) {\n        var _ref = [copy_, base_];\n        base_ = _ref[0];\n        copy_ = _ref[1];\n        var _ref2 = [inversePatches, patches];\n        patches = _ref2[0];\n        inversePatches = _ref2[1];\n      } // Process replaced indices.\n\n\n      for (var i = 0; i < base_.length; i++) {\n        if (assigned_[i] && copy_[i] !== base_[i]) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: REPLACE,\n            path: path,\n            // Need to maybe clone it, as it can in fact be the original value\n            // due to the base/copy inversion at the start of this function\n            value: clonePatchValueIfNeeded(copy_[i])\n          });\n          inversePatches.push({\n            op: REPLACE,\n            path: path,\n            value: clonePatchValueIfNeeded(base_[i])\n          });\n        }\n      } // Process added indices.\n\n\n      for (var _i = base_.length; _i < copy_.length; _i++) {\n        var _path = basePath.concat([_i]);\n\n        patches.push({\n          op: ADD,\n          path: _path,\n          // Need to maybe clone it, as it can in fact be the original value\n          // due to the base/copy inversion at the start of this function\n          value: clonePatchValueIfNeeded(copy_[_i])\n        });\n      }\n\n      if (base_.length < copy_.length) {\n        inversePatches.push({\n          op: REPLACE,\n          path: basePath.concat([\"length\"]),\n          value: base_.length\n        });\n      }\n    } // This is used for both Map objects and normal objects.\n\n\n    function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          copy_ = state.copy_;\n      each$1(state.assigned_, function (key, assignedValue) {\n        var origValue = get(base_, key);\n        var value = get(copy_, key);\n        var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n        if (origValue === value && op === REPLACE) return;\n        var path = basePath.concat(key);\n        patches.push(op === REMOVE ? {\n          op: op,\n          path: path\n        } : {\n          op: op,\n          path: path,\n          value: value\n        });\n        inversePatches.push(op === ADD ? {\n          op: REMOVE,\n          path: path\n        } : op === REMOVE ? {\n          op: ADD,\n          path: path,\n          value: clonePatchValueIfNeeded(origValue)\n        } : {\n          op: REPLACE,\n          path: path,\n          value: clonePatchValueIfNeeded(origValue)\n        });\n      });\n    }\n\n    function generateSetPatches(state, basePath, patches, inversePatches) {\n      var base_ = state.base_,\n          copy_ = state.copy_;\n      var i = 0;\n      base_.forEach(function (value) {\n        if (!copy_.has(value)) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: REMOVE,\n            path: path,\n            value: value\n          });\n          inversePatches.unshift({\n            op: ADD,\n            path: path,\n            value: value\n          });\n        }\n\n        i++;\n      });\n      i = 0;\n      copy_.forEach(function (value) {\n        if (!base_.has(value)) {\n          var path = basePath.concat([i]);\n          patches.push({\n            op: ADD,\n            path: path,\n            value: value\n          });\n          inversePatches.unshift({\n            op: REMOVE,\n            path: path,\n            value: value\n          });\n        }\n\n        i++;\n      });\n    }\n\n    function generateReplacementPatches_(rootState, replacement, patches, inversePatches) {\n      patches.push({\n        op: REPLACE,\n        path: [],\n        value: replacement === NOTHING ? undefined : replacement\n      });\n      inversePatches.push({\n        op: REPLACE,\n        path: [],\n        value: rootState.base_\n      });\n    }\n\n    function applyPatches_(draft, patches) {\n      patches.forEach(function (patch) {\n        var path = patch.path,\n            op = patch.op;\n        var base = draft;\n\n        for (var i = 0; i < path.length - 1; i++) {\n          var parentType = getArchtype(base);\n          var p = \"\" + path[i]; // See #738, avoid prototype pollution\n\n          if ((parentType === 0\n          /* Object */\n          || parentType === 1\n          /* Array */\n          ) && (p === \"__proto__\" || p === \"constructor\")) die(24);\n          if (typeof base === \"function\" && p === \"prototype\") die(24);\n          base = get(base, p);\n          if (typeof base !== \"object\") die(15, path.join(\"/\"));\n        }\n\n        var type = getArchtype(base);\n        var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n        var key = path[path.length - 1];\n\n        switch (op) {\n          case REPLACE:\n            switch (type) {\n              case 2\n              /* Map */\n              :\n                return base.set(key, value);\n\n              /* istanbul ignore next */\n\n              case 3\n              /* Set */\n              :\n                die(16);\n\n              default:\n                // if value is an object, then it's assigned by reference\n                // in the following add or remove ops, the value field inside the patch will also be modifyed\n                // so we use value from the cloned patch\n                // @ts-ignore\n                return base[key] = value;\n            }\n\n          case ADD:\n            switch (type) {\n              case 1\n              /* Array */\n              :\n                return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n\n              case 2\n              /* Map */\n              :\n                return base.set(key, value);\n\n              case 3\n              /* Set */\n              :\n                return base.add(value);\n\n              default:\n                return base[key] = value;\n            }\n\n          case REMOVE:\n            switch (type) {\n              case 1\n              /* Array */\n              :\n                return base.splice(key, 1);\n\n              case 2\n              /* Map */\n              :\n                return base.delete(key);\n\n              case 3\n              /* Set */\n              :\n                return base.delete(patch.value);\n\n              default:\n                return delete base[key];\n            }\n\n          default:\n            die(17, op);\n        }\n      });\n      return draft;\n    }\n\n    function deepClonePatchValue(obj) {\n      if (!isDraftable(obj)) return obj;\n      if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n      if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function (_ref3) {\n        var k = _ref3[0],\n            v = _ref3[1];\n        return [k, deepClonePatchValue(v)];\n      }));\n      if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n      var cloned = Object.create(Object.getPrototypeOf(obj));\n\n      for (var key in obj) {\n        cloned[key] = deepClonePatchValue(obj[key]);\n      }\n\n      if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n      return cloned;\n    }\n\n    function clonePatchValueIfNeeded(obj) {\n      if (isDraft(obj)) {\n        return deepClonePatchValue(obj);\n      } else return obj;\n    }\n\n    loadPlugin(\"Patches\", {\n      applyPatches_: applyPatches_,\n      generatePatches_: generatePatches_,\n      generateReplacementPatches_: generateReplacementPatches_\n    });\n  }\n\n  // types only!\n  function enableMapSet() {\n    /* istanbul ignore next */\n    var _extendStatics = function extendStatics(d, b) {\n      _extendStatics = Object.setPrototypeOf || {\n        __proto__: []\n      } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n      } || function (d, b) {\n        for (var p in b) {\n          if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n      };\n\n      return _extendStatics(d, b);\n    }; // Ugly hack to resolve #502 and inherit built in Map / Set\n\n\n    function __extends(d, b) {\n      _extendStatics(d, b);\n\n      function __() {\n        this.constructor = d;\n      }\n\n      d.prototype = ( // @ts-ignore\n      __.prototype = b.prototype, new __());\n    }\n\n    var DraftMap = function (_super) {\n      __extends(DraftMap, _super); // Create class manually, cause #502\n\n\n      function DraftMap(target, parent) {\n        this[DRAFT_STATE] = {\n          type_: 2\n          /* Map */\n          ,\n          parent_: parent,\n          scope_: parent ? parent.scope_ : getCurrentScope(),\n          modified_: false,\n          finalized_: false,\n          copy_: undefined,\n          assigned_: undefined,\n          base_: target,\n          draft_: this,\n          isManual_: false,\n          revoked_: false\n        };\n        return this;\n      }\n\n      var p = DraftMap.prototype;\n      Object.defineProperty(p, \"size\", {\n        get: function get() {\n          return latest(this[DRAFT_STATE]).size;\n        } // enumerable: false,\n        // configurable: true\n\n      });\n\n      p.has = function (key) {\n        return latest(this[DRAFT_STATE]).has(key);\n      };\n\n      p.set = function (key, value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (!latest(state).has(key) || latest(state).get(key) !== value) {\n          prepareMapCopy(state);\n          markChanged(state);\n          state.assigned_.set(key, true);\n          state.copy_.set(key, value);\n          state.assigned_.set(key, true);\n        }\n\n        return this;\n      };\n\n      p.delete = function (key) {\n        if (!this.has(key)) {\n          return false;\n        }\n\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareMapCopy(state);\n        markChanged(state);\n        state.assigned_.set(key, false);\n        state.copy_.delete(key);\n        return true;\n      };\n\n      p.clear = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (latest(state).size) {\n          prepareMapCopy(state);\n          markChanged(state);\n          state.assigned_ = new Map();\n          each$1(state.base_, function (key) {\n            state.assigned_.set(key, false);\n          });\n          state.copy_.clear();\n        }\n      };\n\n      p.forEach = function (cb, thisArg) {\n        var _this = this;\n\n        var state = this[DRAFT_STATE];\n        latest(state).forEach(function (_value, key, _map) {\n          cb.call(thisArg, _this.get(key), key, _this);\n        });\n      };\n\n      p.get = function (key) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        var value = latest(state).get(key);\n\n        if (state.finalized_ || !isDraftable(value)) {\n          return value;\n        }\n\n        if (value !== state.base_.get(key)) {\n          return value; // either already drafted or reassigned\n        } // despite what it looks, this creates a draft only once, see above condition\n\n\n        var draft = createProxy(state.scope_.immer_, value, state);\n        prepareMapCopy(state);\n        state.copy_.set(key, draft);\n        return draft;\n      };\n\n      p.keys = function () {\n        return latest(this[DRAFT_STATE]).keys();\n      };\n\n      p.values = function () {\n        var _this2 = this,\n            _ref;\n\n        var iterator = this.keys();\n        return _ref = {}, _ref[iteratorSymbol$1] = function () {\n          return _this2.values();\n        }, _ref.next = function next() {\n          var r = iterator.next();\n          /* istanbul ignore next */\n\n          if (r.done) return r;\n\n          var value = _this2.get(r.value);\n\n          return {\n            done: false,\n            value: value\n          };\n        }, _ref;\n      };\n\n      p.entries = function () {\n        var _this3 = this,\n            _ref2;\n\n        var iterator = this.keys();\n        return _ref2 = {}, _ref2[iteratorSymbol$1] = function () {\n          return _this3.entries();\n        }, _ref2.next = function next() {\n          var r = iterator.next();\n          /* istanbul ignore next */\n\n          if (r.done) return r;\n\n          var value = _this3.get(r.value);\n\n          return {\n            done: false,\n            value: [r.value, value]\n          };\n        }, _ref2;\n      };\n\n      p[iteratorSymbol$1] = function () {\n        return this.entries();\n      };\n\n      return DraftMap;\n    }(Map);\n\n    function proxyMap_(target, parent) {\n      // @ts-ignore\n      return new DraftMap(target, parent);\n    }\n\n    function prepareMapCopy(state) {\n      if (!state.copy_) {\n        state.assigned_ = new Map();\n        state.copy_ = new Map(state.base_);\n      }\n    }\n\n    var DraftSet = function (_super) {\n      __extends(DraftSet, _super); // Create class manually, cause #502\n\n\n      function DraftSet(target, parent) {\n        this[DRAFT_STATE] = {\n          type_: 3\n          /* Set */\n          ,\n          parent_: parent,\n          scope_: parent ? parent.scope_ : getCurrentScope(),\n          modified_: false,\n          finalized_: false,\n          copy_: undefined,\n          base_: target,\n          draft_: this,\n          drafts_: new Map(),\n          revoked_: false,\n          isManual_: false\n        };\n        return this;\n      }\n\n      var p = DraftSet.prototype;\n      Object.defineProperty(p, \"size\", {\n        get: function get() {\n          return latest(this[DRAFT_STATE]).size;\n        } // enumerable: true,\n\n      });\n\n      p.has = function (value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n\n        if (!state.copy_) {\n          return state.base_.has(value);\n        }\n\n        if (state.copy_.has(value)) return true;\n        if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n        return false;\n      };\n\n      p.add = function (value) {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (!this.has(value)) {\n          prepareSetCopy(state);\n          markChanged(state);\n          state.copy_.add(value);\n        }\n\n        return this;\n      };\n\n      p.delete = function (value) {\n        if (!this.has(value)) {\n          return false;\n        }\n\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        markChanged(state);\n        return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) :\n        /* istanbul ignore next */\n        false);\n      };\n\n      p.clear = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n\n        if (latest(state).size) {\n          prepareSetCopy(state);\n          markChanged(state);\n          state.copy_.clear();\n        }\n      };\n\n      p.values = function () {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        return state.copy_.values();\n      };\n\n      p.entries = function entries() {\n        var state = this[DRAFT_STATE];\n        assertUnrevoked(state);\n        prepareSetCopy(state);\n        return state.copy_.entries();\n      };\n\n      p.keys = function () {\n        return this.values();\n      };\n\n      p[iteratorSymbol$1] = function () {\n        return this.values();\n      };\n\n      p.forEach = function forEach(cb, thisArg) {\n        var iterator = this.values();\n        var result = iterator.next();\n\n        while (!result.done) {\n          cb.call(thisArg, result.value, result.value, this);\n          result = iterator.next();\n        }\n      };\n\n      return DraftSet;\n    }(Set);\n\n    function proxySet_(target, parent) {\n      // @ts-ignore\n      return new DraftSet(target, parent);\n    }\n\n    function prepareSetCopy(state) {\n      if (!state.copy_) {\n        // create drafts for all entries to preserve insertion order\n        state.copy_ = new Set();\n        state.base_.forEach(function (value) {\n          if (isDraftable(value)) {\n            var draft = createProxy(state.scope_.immer_, value, state);\n            state.drafts_.set(value, draft);\n            state.copy_.add(draft);\n          } else {\n            state.copy_.add(value);\n          }\n        });\n      }\n    }\n\n    function assertUnrevoked(state\n    /*ES5State | MapState | SetState*/\n    ) {\n      if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n\n    loadPlugin(\"MapSet\", {\n      proxyMap_: proxyMap_,\n      proxySet_: proxySet_\n    });\n  }\n\n  function enableAllPlugins() {\n    enableES5();\n    enableMapSet();\n    enablePatches();\n  }\n\n  var immer$1 =\n  /*#__PURE__*/\n  new Immer();\n  /**\r\n   * The `produce` function takes a value and a \"recipe function\" (whose\r\n   * return value often depends on the base state). The recipe function is\r\n   * free to mutate its first argument however it wants. All mutations are\r\n   * only ever applied to a __copy__ of the base state.\r\n   *\r\n   * Pass only a function to create a \"curried producer\" which relieves you\r\n   * from passing the recipe function every time.\r\n   *\r\n   * Only plain objects and arrays are made mutable. All other objects are\r\n   * considered uncopyable.\r\n   *\r\n   * Note: This function is __bound__ to its `Immer` instance.\r\n   *\r\n   * @param {any} base - the initial state\r\n   * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n   * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n   * @returns {any} a new state, or the initial state if nothing was modified\r\n   */\n\n  var produce = immer$1.produce;\n  /**\r\n   * Like `produce`, but `produceWithPatches` always returns a tuple\r\n   * [nextState, patches, inversePatches] (instead of just the next state)\r\n   */\n\n  var produceWithPatches =\n  /*#__PURE__*/\n  immer$1.produceWithPatches.bind(immer$1);\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * Always freeze by default, even in production mode\r\n   */\n\n  var setAutoFreeze =\n  /*#__PURE__*/\n  immer$1.setAutoFreeze.bind(immer$1);\n  /**\r\n   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n   * always faster than using ES5 proxies.\r\n   *\r\n   * By default, feature detection is used, so calling this is rarely necessary.\r\n   */\n\n  var setUseProxies =\n  /*#__PURE__*/\n  immer$1.setUseProxies.bind(immer$1);\n  /**\r\n   * Apply an array of Immer patches to the first argument.\r\n   *\r\n   * This function is a producer, which means copy-on-write is in effect.\r\n   */\n\n  var applyPatches =\n  /*#__PURE__*/\n  immer$1.applyPatches.bind(immer$1);\n  /**\r\n   * Create an Immer draft from the given base state, which may be a draft itself.\r\n   * The draft can be modified until you finalize it with the `finishDraft` function.\r\n   */\n\n  var createDraft =\n  /*#__PURE__*/\n  immer$1.createDraft.bind(immer$1);\n  /**\r\n   * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n   * (if no changes were made) or a modified copy. The draft must *not* be\r\n   * mutated afterwards.\r\n   *\r\n   * Pass a function as the 2nd argument to generate Immer patches based on the\r\n   * changes that were made.\r\n   */\n\n  var finishDraft =\n  /*#__PURE__*/\n  immer$1.finishDraft.bind(immer$1);\n  /**\r\n   * This function is actually a no-op, but can be used to cast an immutable type\r\n   * to an draft type and make TypeScript happy\r\n   *\r\n   * @param value\r\n   */\n\n  function castDraft(value) {\n    return value;\n  }\n  /**\r\n   * This function is actually a no-op, but can be used to cast a mutable type\r\n   * to an immutable type and make TypeScript happy\r\n   * @param value\r\n   */\n\n  function castImmutable(value) {\n    return value;\n  }\n\n  var Immer_1 = Immer;\n  var applyPatches_1 = applyPatches;\n  var castDraft_1 = castDraft;\n  var castImmutable_1 = castImmutable;\n  var createDraft_1 = createDraft;\n  var current_1 = current;\n  var _default$2 = produce;\n  var enableAllPlugins_1 = enableAllPlugins;\n  var enableES5_1 = enableES5;\n  var enableMapSet_1 = enableMapSet;\n  var enablePatches_1 = enablePatches;\n  var finishDraft_1 = finishDraft;\n  var freeze_1 = freeze;\n  var immerable = DRAFTABLE;\n  var isDraft_1 = isDraft;\n  var isDraftable_1 = isDraftable;\n  var nothing = NOTHING;\n  var original_1 = original;\n  var produce_1 = produce;\n  var produceWithPatches_1 = produceWithPatches;\n  var setAutoFreeze_1 = setAutoFreeze;\n  var setUseProxies_1 = setUseProxies;\n\n\n  var immer_cjs_development = /*#__PURE__*/Object.defineProperty({\n  \tImmer: Immer_1,\n  \tapplyPatches: applyPatches_1,\n  \tcastDraft: castDraft_1,\n  \tcastImmutable: castImmutable_1,\n  \tcreateDraft: createDraft_1,\n  \tcurrent: current_1,\n  \tdefault: _default$2,\n  \tenableAllPlugins: enableAllPlugins_1,\n  \tenableES5: enableES5_1,\n  \tenableMapSet: enableMapSet_1,\n  \tenablePatches: enablePatches_1,\n  \tfinishDraft: finishDraft_1,\n  \tfreeze: freeze_1,\n  \timmerable: immerable,\n  \tisDraft: isDraft_1,\n  \tisDraftable: isDraftable_1,\n  \tnothing: nothing,\n  \toriginal: original_1,\n  \tproduce: produce_1,\n  \tproduceWithPatches: produceWithPatches_1,\n  \tsetAutoFreeze: setAutoFreeze_1,\n  \tsetUseProxies: setUseProxies_1\n  }, '__esModule', {value: true});\n\n  var require$$1$1 = immer_cjs_development;\n\n  var dist$8 = createCommonjsModule$1(function (module) {\n\n  {\n    module.exports = require$$1$1;\n  }\n  });\n\n  var isPlainObject = isPlainObject_1;\n\n  var immer = dist$8;\n\n  function unwrapExports (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var arrayLikeToArray = createCommonjsModule(function (module) {\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  module.exports = _arrayLikeToArray;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(arrayLikeToArray);\n\n  var arrayWithoutHoles = createCommonjsModule(function (module) {\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return arrayLikeToArray(arr);\n  }\n\n  module.exports = _arrayWithoutHoles;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(arrayWithoutHoles);\n\n  var iterableToArray = createCommonjsModule(function (module) {\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n\n  module.exports = _iterableToArray;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(iterableToArray);\n\n  var unsupportedIterableToArray = createCommonjsModule(function (module) {\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n  }\n\n  module.exports = _unsupportedIterableToArray;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(unsupportedIterableToArray);\n\n  var nonIterableSpread = createCommonjsModule(function (module) {\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  module.exports = _nonIterableSpread;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(nonIterableSpread);\n\n  var toConsumableArray = createCommonjsModule(function (module) {\n  function _toConsumableArray(arr) {\n    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n  }\n\n  module.exports = _toConsumableArray;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  var _toConsumableArray = unwrapExports(toConsumableArray);\n\n  var arrayWithHoles = createCommonjsModule(function (module) {\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  module.exports = _arrayWithHoles;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(arrayWithHoles);\n\n  var iterableToArrayLimit = createCommonjsModule(function (module) {\n  function _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n\n    var _s, _e;\n\n    try {\n      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  module.exports = _iterableToArrayLimit;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(iterableToArrayLimit);\n\n  var nonIterableRest = createCommonjsModule(function (module) {\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  module.exports = _nonIterableRest;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(nonIterableRest);\n\n  var slicedToArray = createCommonjsModule(function (module) {\n  function _slicedToArray(arr, i) {\n    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n  }\n\n  module.exports = _slicedToArray;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  var _slicedToArray = unwrapExports(slicedToArray);\n\n  var defineProperty = createCommonjsModule(function (module) {\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  module.exports = _defineProperty;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  var _defineProperty = unwrapExports(defineProperty);\n\n  var DIRTY_PATHS = new WeakMap();\n  var FLUSHING = new WeakMap();\n  var NORMALIZING = new WeakMap();\n  var PATH_REFS = new WeakMap();\n  var POINT_REFS = new WeakMap();\n  var RANGE_REFS = new WeakMap();\n\n  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createForOfIteratorHelper$7(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$7(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$7(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$7(o, minLen); }\n\n  function _arrayLikeToArray$7(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n  /**\r\n   * Create a new Slate `Editor` object.\r\n   */\n\n  var createEditor$1 = function createEditor() {\n    var editor = {\n      children: [],\n      operations: [],\n      selection: null,\n      marks: null,\n      isInline: function isInline() {\n        return false;\n      },\n      isVoid: function isVoid() {\n        return false;\n      },\n      onChange: function onChange() {},\n      apply: function apply(op) {\n        var _iterator = _createForOfIteratorHelper$7(Editor.pathRefs(editor)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var ref = _step.value;\n            PathRef.transform(ref, op);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper$7(Editor.pointRefs(editor)),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _ref = _step2.value;\n            PointRef.transform(_ref, op);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var _iterator3 = _createForOfIteratorHelper$7(Editor.rangeRefs(editor)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _ref2 = _step3.value;\n            RangeRef.transform(_ref2, op);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var set = new Set();\n        var dirtyPaths = [];\n\n        var add = function add(path) {\n          if (path) {\n            var key = path.join(',');\n\n            if (!set.has(key)) {\n              set.add(key);\n              dirtyPaths.push(path);\n            }\n          }\n        };\n\n        var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];\n        var newDirtyPaths = getDirtyPaths(op);\n\n        var _iterator4 = _createForOfIteratorHelper$7(oldDirtyPaths),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var path = _step4.value;\n            var newPath = Path.transform(path, op);\n            add(newPath);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper$7(newDirtyPaths),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _path = _step5.value;\n            add(_path);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        DIRTY_PATHS.set(editor, dirtyPaths);\n        Transforms.transform(editor, op);\n        editor.operations.push(op);\n        Editor.normalize(editor); // Clear any formats applied to the cursor if the selection changes.\n\n        if (op.type === 'set_selection') {\n          editor.marks = null;\n        }\n\n        if (!FLUSHING.get(editor)) {\n          FLUSHING.set(editor, true);\n          Promise.resolve().then(function () {\n            FLUSHING.set(editor, false);\n            editor.onChange();\n            editor.operations = [];\n          });\n        }\n      },\n      addMark: function addMark(key, value) {\n        var selection = editor.selection;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Transforms.setNodes(editor, _defineProperty({}, key, value), {\n              match: Text.isText,\n              split: true\n            });\n          } else {\n            var marks = _objectSpread$9(_objectSpread$9({}, Editor.marks(editor) || {}), {}, _defineProperty({}, key, value));\n\n            editor.marks = marks;\n\n            if (!FLUSHING.get(editor)) {\n              editor.onChange();\n            }\n          }\n        }\n      },\n      deleteBackward: function deleteBackward(unit) {\n        var selection = editor.selection;\n\n        if (selection && Range.isCollapsed(selection)) {\n          Transforms[\"delete\"](editor, {\n            unit: unit,\n            reverse: true\n          });\n        }\n      },\n      deleteForward: function deleteForward(unit) {\n        var selection = editor.selection;\n\n        if (selection && Range.isCollapsed(selection)) {\n          Transforms[\"delete\"](editor, {\n            unit: unit\n          });\n        }\n      },\n      deleteFragment: function deleteFragment(direction) {\n        var selection = editor.selection;\n\n        if (selection && Range.isExpanded(selection)) {\n          Transforms[\"delete\"](editor, {\n            reverse: direction === 'backward'\n          });\n        }\n      },\n      getFragment: function getFragment() {\n        var selection = editor.selection;\n\n        if (selection) {\n          return Node$1.fragment(editor, selection);\n        }\n\n        return [];\n      },\n      insertBreak: function insertBreak() {\n        Transforms.splitNodes(editor, {\n          always: true\n        });\n      },\n      insertFragment: function insertFragment(fragment) {\n        Transforms.insertFragment(editor, fragment);\n      },\n      insertNode: function insertNode(node) {\n        Transforms.insertNodes(editor, node);\n      },\n      insertText: function insertText(text) {\n        var selection = editor.selection,\n            marks = editor.marks;\n\n        if (selection) {\n          if (marks) {\n            var node = _objectSpread$9({\n              text: text\n            }, marks);\n\n            Transforms.insertNodes(editor, node);\n          } else {\n            Transforms.insertText(editor, text);\n          }\n\n          editor.marks = null;\n        }\n      },\n      normalizeNode: function normalizeNode(entry) {\n        var _entry = _slicedToArray(entry, 2),\n            node = _entry[0],\n            path = _entry[1]; // There are no core normalizations for text nodes.\n\n\n        if (Text.isText(node)) {\n          return;\n        } // Ensure that block and inline nodes have at least one text child.\n\n\n        if (Element$1.isElement(node) && node.children.length === 0) {\n          var child = {\n            text: ''\n          };\n          Transforms.insertNodes(editor, child, {\n            at: path.concat(0),\n            voids: true\n          });\n          return;\n        } // Determine whether the node should have block or inline children.\n\n\n        var shouldHaveInlines = Editor.isEditor(node) ? false : Element$1.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an\n        // index that accounts for any added/removed nodes.\n\n        var n = 0;\n\n        for (var i = 0; i < node.children.length; i++, n++) {\n          var currentNode = Node$1.get(editor, path);\n          if (Text.isText(currentNode)) continue;\n          var _child = node.children[i];\n          var prev = currentNode.children[n - 1];\n          var isLast = i === node.children.length - 1;\n          var isInlineOrText = Text.isText(_child) || Element$1.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks\n          // that only contain block nodes. Similarly, only allow inline nodes in\n          // other inline nodes, or parent blocks that only contain inlines and\n          // text.\n\n          if (isInlineOrText !== shouldHaveInlines) {\n            Transforms.removeNodes(editor, {\n              at: path.concat(n),\n              voids: true\n            });\n            n--;\n          } else if (Element$1.isElement(_child)) {\n            // Ensure that inline nodes are surrounded by text nodes.\n            if (editor.isInline(_child)) {\n              if (prev == null || !Text.isText(prev)) {\n                var newChild = {\n                  text: ''\n                };\n                Transforms.insertNodes(editor, newChild, {\n                  at: path.concat(n),\n                  voids: true\n                });\n                n++;\n              } else if (isLast) {\n                var _newChild = {\n                  text: ''\n                };\n                Transforms.insertNodes(editor, _newChild, {\n                  at: path.concat(n + 1),\n                  voids: true\n                });\n                n++;\n              }\n            }\n          } else {\n            // Merge adjacent text nodes that are empty or match.\n            if (prev != null && Text.isText(prev)) {\n              if (Text.equals(_child, prev, {\n                loose: true\n              })) {\n                Transforms.mergeNodes(editor, {\n                  at: path.concat(n),\n                  voids: true\n                });\n                n--;\n              } else if (prev.text === '') {\n                Transforms.removeNodes(editor, {\n                  at: path.concat(n - 1),\n                  voids: true\n                });\n                n--;\n              } else if (_child.text === '') {\n                Transforms.removeNodes(editor, {\n                  at: path.concat(n),\n                  voids: true\n                });\n                n--;\n              }\n            }\n          }\n        }\n      },\n      removeMark: function removeMark(key) {\n        var selection = editor.selection;\n\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Transforms.unsetNodes(editor, key, {\n              match: Text.isText,\n              split: true\n            });\n          } else {\n            var marks = _objectSpread$9({}, Editor.marks(editor) || {});\n\n            delete marks[key];\n            editor.marks = marks;\n\n            if (!FLUSHING.get(editor)) {\n              editor.onChange();\n            }\n          }\n        }\n      }\n    };\n    return editor;\n  };\n  /**\r\n   * Get the \"dirty\" paths generated from an operation.\r\n   */\n\n  var getDirtyPaths = function getDirtyPaths(op) {\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n        {\n          var path = op.path;\n          return Path.levels(path);\n        }\n\n      case 'insert_node':\n        {\n          var node = op.node,\n              _path2 = op.path;\n          var levels = Path.levels(_path2);\n          var descendants = Text.isText(node) ? [] : Array.from(Node$1.nodes(node), function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                p = _ref4[1];\n\n            return _path2.concat(p);\n          });\n          return [].concat(_toConsumableArray(levels), _toConsumableArray(descendants));\n        }\n\n      case 'merge_node':\n        {\n          var _path3 = op.path;\n          var ancestors = Path.ancestors(_path3);\n          var previousPath = Path.previous(_path3);\n          return [].concat(_toConsumableArray(ancestors), [previousPath]);\n        }\n\n      case 'move_node':\n        {\n          var _path4 = op.path,\n              newPath = op.newPath;\n\n          if (Path.equals(_path4, newPath)) {\n            return [];\n          }\n\n          var oldAncestors = [];\n          var newAncestors = [];\n\n          var _iterator6 = _createForOfIteratorHelper$7(Path.ancestors(_path4)),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var ancestor = _step6.value;\n              var p = Path.transform(ancestor, op);\n              oldAncestors.push(p);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          var _iterator7 = _createForOfIteratorHelper$7(Path.ancestors(newPath)),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _ancestor = _step7.value;\n\n              var _p = Path.transform(_ancestor, op);\n\n              newAncestors.push(_p);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          var newParent = newAncestors[newAncestors.length - 1];\n          var newIndex = newPath[newPath.length - 1];\n          var resultPath = newParent.concat(newIndex);\n          return [].concat(oldAncestors, newAncestors, [resultPath]);\n        }\n\n      case 'remove_node':\n        {\n          var _path5 = op.path;\n\n          var _ancestors = Path.ancestors(_path5);\n\n          return _toConsumableArray(_ancestors);\n        }\n\n      case 'split_node':\n        {\n          var _path6 = op.path;\n\n          var _levels = Path.levels(_path6);\n\n          var nextPath = Path.next(_path6);\n          return [].concat(_toConsumableArray(_levels), [nextPath]);\n        }\n\n      default:\n        {\n          return [];\n        }\n    }\n  };\n\n  var objectWithoutPropertiesLoose = createCommonjsModule(function (module) {\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  module.exports = _objectWithoutPropertiesLoose;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  unwrapExports(objectWithoutPropertiesLoose);\n\n  var objectWithoutProperties = createCommonjsModule(function (module) {\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  module.exports = _objectWithoutProperties;\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  });\n\n  var _objectWithoutProperties = unwrapExports(objectWithoutProperties);\n\n  function _createForOfIteratorHelper$6(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$6(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$6(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }\n\n  function _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  // Character (grapheme cluster) boundaries are determined according to\n  // the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n  //\n  // References:\n  //\n  // [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n  // [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n  // [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n  // [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n  /**\r\n   * Get the distance to the end of the first character in a string of text.\r\n   */\n  var getCharacterDistance = function getCharacterDistance(str) {\n    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isLTR = !isRTL;\n    var codepoints = isRTL ? codepointsIteratorRTL(str) : str;\n    var left = CodepointType.None;\n    var right = CodepointType.None;\n    var distance = 0; // Evaluation of these conditions are deferred.\n\n    var gb11 = null; // Is GB11 applicable?\n\n    var gb12Or13 = null; // Is GB12 or GB13 applicable?\n\n    var _iterator = _createForOfIteratorHelper$6(codepoints),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _char = _step.value;\n\n        var code = _char.codePointAt(0);\n\n        if (!code) break;\n        var type = getCodepointType(_char, code);\n\n        var _ref = isLTR ? [right, type] : [type, left];\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        left = _ref2[0];\n        right = _ref2[1];\n\n        if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {\n          if (isLTR) {\n            gb11 = endsWithEmojiZWJ(str.substring(0, distance));\n          } else {\n            gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));\n          }\n\n          if (!gb11) break;\n        }\n\n        if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {\n          if (gb12Or13 !== null) {\n            gb12Or13 = !gb12Or13;\n          } else {\n            if (isLTR) {\n              gb12Or13 = true;\n            } else {\n              gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));\n            }\n          }\n\n          if (!gb12Or13) break;\n        }\n\n        if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {\n          break;\n        }\n\n        distance += _char.length;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return distance || 1;\n  };\n  var SPACE = /\\s/;\n  var PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\n  var CHAMELEON = /['\\u2018\\u2019]/;\n  /**\r\n   * Get the distance to the end of the first word in a string of text.\r\n   */\n\n  var getWordDistance = function getWordDistance(text) {\n    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var dist = 0;\n    var started = false;\n\n    while (text.length > 0) {\n      var charDist = getCharacterDistance(text, isRTL);\n\n      var _splitByCharacterDist = splitByCharacterDistance(text, charDist, isRTL),\n          _splitByCharacterDist2 = _slicedToArray(_splitByCharacterDist, 2),\n          _char2 = _splitByCharacterDist2[0],\n          remaining = _splitByCharacterDist2[1];\n\n      if (isWordCharacter(_char2, remaining, isRTL)) {\n        started = true;\n        dist += charDist;\n      } else if (!started) {\n        dist += charDist;\n      } else {\n        break;\n      }\n\n      text = remaining;\n    }\n\n    return dist;\n  };\n  /**\r\n   * Split a string in two parts at a given distance starting from the end when\r\n   * `isRTL` is set to `true`.\r\n   */\n\n  var splitByCharacterDistance = function splitByCharacterDistance(str, dist, isRTL) {\n    if (isRTL) {\n      var at = str.length - dist;\n      return [str.slice(at, str.length), str.slice(0, at)];\n    }\n\n    return [str.slice(0, dist), str.slice(dist)];\n  };\n  /**\r\n   * Check if a character is a word character. The `remaining` argument is used\r\n   * because sometimes you must read subsequent characters to truly determine it.\r\n   */\n\n  var isWordCharacter = function isWordCharacter(_char3, remaining) {\n    var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (SPACE.test(_char3)) {\n      return false;\n    } // Chameleons count as word characters as long as they're in a word, so\n    // recurse to see if the next one is a word character or not.\n\n\n    if (CHAMELEON.test(_char3)) {\n      var charDist = getCharacterDistance(remaining, isRTL);\n\n      var _splitByCharacterDist3 = splitByCharacterDistance(remaining, charDist, isRTL),\n          _splitByCharacterDist4 = _slicedToArray(_splitByCharacterDist3, 2),\n          nextChar = _splitByCharacterDist4[0],\n          nextRemaining = _splitByCharacterDist4[1];\n\n      if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n        return true;\n      }\n    }\n\n    if (PUNCTUATION.test(_char3)) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Iterate on codepoints from right to left.\r\n   */\n\n\n  var codepointsIteratorRTL = function* codepointsIteratorRTL(str) {\n    var end = str.length - 1;\n\n    for (var i = 0; i < str.length; i++) {\n      var char1 = str.charAt(end - i);\n\n      if (isLowSurrogate(char1.charCodeAt(0))) {\n        var char2 = str.charAt(end - i - 1);\n\n        if (isHighSurrogate(char2.charCodeAt(0))) {\n          yield char2 + char1;\n          i++;\n          continue;\n        }\n      }\n\n      yield char1;\n    }\n  };\n  /**\r\n   * Is `charCode` a high surrogate.\r\n   *\r\n   * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n   */\n\n  var isHighSurrogate = function isHighSurrogate(charCode) {\n    return charCode >= 0xd800 && charCode <= 0xdbff;\n  };\n  /**\r\n   * Is `charCode` a low surrogate.\r\n   *\r\n   * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n   */\n\n\n  var isLowSurrogate = function isLowSurrogate(charCode) {\n    return charCode >= 0xdc00 && charCode <= 0xdfff;\n  };\n\n  var CodepointType;\n\n  (function (CodepointType) {\n    CodepointType[CodepointType[\"None\"] = 0] = \"None\";\n    CodepointType[CodepointType[\"Extend\"] = 1] = \"Extend\";\n    CodepointType[CodepointType[\"ZWJ\"] = 2] = \"ZWJ\";\n    CodepointType[CodepointType[\"RI\"] = 4] = \"RI\";\n    CodepointType[CodepointType[\"Prepend\"] = 8] = \"Prepend\";\n    CodepointType[CodepointType[\"SpacingMark\"] = 16] = \"SpacingMark\";\n    CodepointType[CodepointType[\"L\"] = 32] = \"L\";\n    CodepointType[CodepointType[\"V\"] = 64] = \"V\";\n    CodepointType[CodepointType[\"T\"] = 128] = \"T\";\n    CodepointType[CodepointType[\"LV\"] = 256] = \"LV\";\n    CodepointType[CodepointType[\"LVT\"] = 512] = \"LVT\";\n    CodepointType[CodepointType[\"ExtPict\"] = 1024] = \"ExtPict\";\n    CodepointType[CodepointType[\"Any\"] = 2048] = \"Any\";\n  })(CodepointType || (CodepointType = {}));\n\n  var reExtend = /^(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])$/;\n  var rePrepend = /^(?:[\\u0600-\\u0605\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u0D4E]|\\uD804[\\uDCBD\\uDCCD\\uDDC2\\uDDC3]|\\uD806[\\uDD3F\\uDD41\\uDE3A\\uDE84-\\uDE89]|\\uD807\\uDD46)$/;\n  var reSpacingMark = /^(?:[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0D02\\u0D03\\u0D3F\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82\\u0D83\\u0DD0\\u0DD1\\u0DD8-\\u0DDE\\u0DF2\\u0DF3\\u0E33\\u0EB3\\u0F3E\\u0F3F\\u0F7F\\u1031\\u103B\\u103C\\u1056\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF7\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD45\\uDD46\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDDCE\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB1\\uDCB2\\uDCB9\\uDCBB\\uDCBC\\uDCBE\\uDCC1\\uDDB0\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF26]|\\uD806[\\uDC2C-\\uDC2E\\uDC38\\uDD31-\\uDD35\\uDD37\\uDD38\\uDD3D\\uDD40\\uDD42\\uDDD1-\\uDDD3\\uDDDC-\\uDDDF\\uDDE4\\uDE39\\uDE57\\uDE58\\uDE97]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4\\uDD8A-\\uDD8E\\uDD93\\uDD94\\uDD96\\uDEF5\\uDEF6]|\\uD81B[\\uDF51-\\uDF87\\uDFF0\\uDFF1]|\\uD834[\\uDD66\\uDD6D])$/;\n  var reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/;\n  var reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/;\n  var reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/;\n  var reLV = /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/;\n  var reLVT = /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/;\n  var reExtPict = /^(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])$/;\n\n  var getCodepointType = function getCodepointType(_char4, code) {\n    var type = CodepointType.Any;\n\n    if (_char4.search(reExtend) !== -1) {\n      type |= CodepointType.Extend;\n    }\n\n    if (code === 0x200d) {\n      type |= CodepointType.ZWJ;\n    }\n\n    if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n      type |= CodepointType.RI;\n    }\n\n    if (_char4.search(rePrepend) !== -1) {\n      type |= CodepointType.Prepend;\n    }\n\n    if (_char4.search(reSpacingMark) !== -1) {\n      type |= CodepointType.SpacingMark;\n    }\n\n    if (_char4.search(reL) !== -1) {\n      type |= CodepointType.L;\n    }\n\n    if (_char4.search(reV) !== -1) {\n      type |= CodepointType.V;\n    }\n\n    if (_char4.search(reT) !== -1) {\n      type |= CodepointType.T;\n    }\n\n    if (_char4.search(reLV) !== -1) {\n      type |= CodepointType.LV;\n    }\n\n    if (_char4.search(reLVT) !== -1) {\n      type |= CodepointType.LVT;\n    }\n\n    if (_char4.search(reExtPict) !== -1) {\n      type |= CodepointType.ExtPict;\n    }\n\n    return type;\n  };\n\n  function intersects(x, y) {\n    return (x & y) !== 0;\n  }\n\n  var NonBoundaryPairs = [// GB6\n  [CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT], // GB7\n  [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T], // GB8\n  [CodepointType.LVT | CodepointType.T, CodepointType.T], // GB9\n  [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ], // GB9a\n  [CodepointType.Any, CodepointType.SpacingMark], // GB9b\n  [CodepointType.Prepend, CodepointType.Any], // GB11\n  [CodepointType.ZWJ, CodepointType.ExtPict], // GB12 and GB13\n  [CodepointType.RI, CodepointType.RI]];\n\n  function isBoundaryPair(left, right) {\n    return NonBoundaryPairs.findIndex(function (r) {\n      return intersects(left, r[0]) && intersects(right, r[1]);\n    }) === -1;\n  }\n\n  var endingEmojiZWJ = /(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])*\\u200D$/;\n\n  var endsWithEmojiZWJ = function endsWithEmojiZWJ(str) {\n    return str.search(endingEmojiZWJ) !== -1;\n  };\n\n  var endingRIs = /(?:\\uD83C[\\uDDE6-\\uDDFF])+$/g;\n\n  var endsWithOddNumberOfRIs = function endsWithOddNumberOfRIs(str) {\n    var match = str.match(endingRIs);\n\n    if (match === null) {\n      return false;\n    } else {\n      // A RI is represented by a surrogate pair.\n      var numRIs = match[0].length / 2;\n      return numRIs % 2 === 1;\n    }\n  };\n\n  /**\r\n   * Shared the function with isElementType utility\r\n   */\n\n  var isElement = function isElement(value) {\n    return isPlainObject.isPlainObject(value) && Node$1.isNodeList(value.children) && !Editor.isEditor(value);\n  };\n\n  var Element$1 = {\n    /**\r\n     * Check if a value implements the 'Ancestor' interface.\r\n     */\n    isAncestor: function isAncestor(value) {\n      return isPlainObject.isPlainObject(value) && Node$1.isNodeList(value.children);\n    },\n\n    /**\r\n     * Check if a value implements the `Element` interface.\r\n     */\n    isElement: isElement,\n\n    /**\r\n     * Check if a value is an array of `Element` objects.\r\n     */\n    isElementList: function isElementList(value) {\n      return Array.isArray(value) && value.every(function (val) {\n        return Element$1.isElement(val);\n      });\n    },\n\n    /**\r\n     * Check if a set of props is a partial of Element.\r\n     */\n    isElementProps: function isElementProps(props) {\n      return props.children !== undefined;\n    },\n\n    /**\r\n     * Check if a value implements the `Element` interface and has elementKey with selected value.\r\n     * Default it check to `type` key value\r\n     */\n    isElementType: function isElementType(value, elementVal) {\n      var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';\n      return isElement(value) && value[elementKey] === elementVal;\n    },\n\n    /**\r\n     * Check if an element matches set of properties.\r\n     *\r\n     * Note: this checks custom properties, and it does not ensure that any\r\n     * children are equivalent.\r\n     */\n    matches: function matches(element, props) {\n      for (var key in props) {\n        if (key === 'children') {\n          continue;\n        }\n\n        if (element[key] !== props[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  };\n\n  var _excluded$4 = [\"text\"],\n      _excluded2$3 = [\"text\"];\n\n  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }\n\n  function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n  var IS_EDITOR_CACHE = new WeakMap();\n  var Editor = {\n    /**\r\n     * Get the ancestor above a location in the document.\r\n     */\n    above: function above(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$voids = options.voids,\n          voids = _options$voids === void 0 ? false : _options$voids,\n          _options$mode = options.mode,\n          mode = _options$mode === void 0 ? 'lowest' : _options$mode,\n          _options$at = options.at,\n          at = _options$at === void 0 ? editor.selection : _options$at,\n          match = options.match;\n\n      if (!at) {\n        return;\n      }\n\n      var path = Editor.path(editor, at);\n      var reverse = mode === 'lowest';\n\n      var _iterator = _createForOfIteratorHelper$5(Editor.levels(editor, {\n        at: path,\n        voids: voids,\n        match: match,\n        reverse: reverse\n      })),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              n = _step$value[0],\n              p = _step$value[1];\n\n          if (!Text.isText(n) && !Path.equals(path, p)) {\n            return [n, p];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n\n    /**\r\n     * Add a custom property to the leaf text nodes in the current selection.\r\n     *\r\n     * If the selection is currently collapsed, the marks will be added to the\r\n     * `editor.marks` property instead, and applied when text is inserted next.\r\n     */\n    addMark: function addMark(editor, key, value) {\n      editor.addMark(key, value);\n    },\n\n    /**\r\n     * Get the point after a location.\r\n     */\n    after: function after(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var anchor = Editor.point(editor, at, {\n        edge: 'end'\n      });\n      var focus = Editor.end(editor, []);\n      var range = {\n        anchor: anchor,\n        focus: focus\n      };\n      var _options$distance = options.distance,\n          distance = _options$distance === void 0 ? 1 : _options$distance;\n      var d = 0;\n      var target;\n\n      var _iterator2 = _createForOfIteratorHelper$5(Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n        at: range\n      }))),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var p = _step2.value;\n\n          if (d > distance) {\n            break;\n          }\n\n          if (d !== 0) {\n            target = p;\n          }\n\n          d++;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return target;\n    },\n\n    /**\r\n     * Get the point before a location.\r\n     */\n    before: function before(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var anchor = Editor.start(editor, []);\n      var focus = Editor.point(editor, at, {\n        edge: 'start'\n      });\n      var range = {\n        anchor: anchor,\n        focus: focus\n      };\n      var _options$distance2 = options.distance,\n          distance = _options$distance2 === void 0 ? 1 : _options$distance2;\n      var d = 0;\n      var target;\n\n      var _iterator3 = _createForOfIteratorHelper$5(Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n        at: range,\n        reverse: true\n      }))),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var p = _step3.value;\n\n          if (d > distance) {\n            break;\n          }\n\n          if (d !== 0) {\n            target = p;\n          }\n\n          d++;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return target;\n    },\n\n    /**\r\n     * Delete content in the editor backward from the current selection.\r\n     */\n    deleteBackward: function deleteBackward(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$unit = options.unit,\n          unit = _options$unit === void 0 ? 'character' : _options$unit;\n      editor.deleteBackward(unit);\n    },\n\n    /**\r\n     * Delete content in the editor forward from the current selection.\r\n     */\n    deleteForward: function deleteForward(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$unit2 = options.unit,\n          unit = _options$unit2 === void 0 ? 'character' : _options$unit2;\n      editor.deleteForward(unit);\n    },\n\n    /**\r\n     * Delete the content in the current selection.\r\n     */\n    deleteFragment: function deleteFragment(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$direction = options.direction,\n          direction = _options$direction === void 0 ? 'forward' : _options$direction;\n      editor.deleteFragment(direction);\n    },\n\n    /**\r\n     * Get the start and end points of a location.\r\n     */\n    edges: function edges(editor, at) {\n      return [Editor.start(editor, at), Editor.end(editor, at)];\n    },\n\n    /**\r\n     * Get the end point of a location.\r\n     */\n    end: function end(editor, at) {\n      return Editor.point(editor, at, {\n        edge: 'end'\n      });\n    },\n\n    /**\r\n     * Get the first node at a location.\r\n     */\n    first: function first(editor, at) {\n      var path = Editor.path(editor, at, {\n        edge: 'start'\n      });\n      return Editor.node(editor, path);\n    },\n\n    /**\r\n     * Get the fragment at a location.\r\n     */\n    fragment: function fragment(editor, at) {\n      var range = Editor.range(editor, at);\n      var fragment = Node$1.fragment(editor, range);\n      return fragment;\n    },\n\n    /**\r\n     * Check if a node has block children.\r\n     */\n    hasBlocks: function hasBlocks(editor, element) {\n      return element.children.some(function (n) {\n        return Editor.isBlock(editor, n);\n      });\n    },\n\n    /**\r\n     * Check if a node has inline and text children.\r\n     */\n    hasInlines: function hasInlines(editor, element) {\n      return element.children.some(function (n) {\n        return Text.isText(n) || Editor.isInline(editor, n);\n      });\n    },\n\n    /**\r\n     * Check if a node has text children.\r\n     */\n    hasTexts: function hasTexts(editor, element) {\n      return element.children.every(function (n) {\n        return Text.isText(n);\n      });\n    },\n\n    /**\r\n     * Insert a block break at the current selection.\r\n     *\r\n     * If the selection is currently expanded, it will be deleted first.\r\n     */\n    insertBreak: function insertBreak(editor) {\n      editor.insertBreak();\n    },\n\n    /**\r\n     * Insert a fragment at the current selection.\r\n     *\r\n     * If the selection is currently expanded, it will be deleted first.\r\n     */\n    insertFragment: function insertFragment(editor, fragment) {\n      editor.insertFragment(fragment);\n    },\n\n    /**\r\n     * Insert a node at the current selection.\r\n     *\r\n     * If the selection is currently expanded, it will be deleted first.\r\n     */\n    insertNode: function insertNode(editor, node) {\n      editor.insertNode(node);\n    },\n\n    /**\r\n     * Insert text at the current selection.\r\n     *\r\n     * If the selection is currently expanded, it will be deleted first.\r\n     */\n    insertText: function insertText(editor, text) {\n      editor.insertText(text);\n    },\n\n    /**\r\n     * Check if a value is a block `Element` object.\r\n     */\n    isBlock: function isBlock(editor, value) {\n      return Element$1.isElement(value) && !editor.isInline(value);\n    },\n\n    /**\r\n     * Check if a value is an `Editor` object.\r\n     */\n    isEditor: function isEditor(value) {\n      if (!isPlainObject.isPlainObject(value)) return false;\n      var cachedIsEditor = IS_EDITOR_CACHE.get(value);\n\n      if (cachedIsEditor !== undefined) {\n        return cachedIsEditor;\n      }\n\n      var isEditor = typeof value.addMark === 'function' && typeof value.apply === 'function' && typeof value.deleteBackward === 'function' && typeof value.deleteForward === 'function' && typeof value.deleteFragment === 'function' && typeof value.insertBreak === 'function' && typeof value.insertFragment === 'function' && typeof value.insertNode === 'function' && typeof value.insertText === 'function' && typeof value.isInline === 'function' && typeof value.isVoid === 'function' && typeof value.normalizeNode === 'function' && typeof value.onChange === 'function' && typeof value.removeMark === 'function' && (value.marks === null || isPlainObject.isPlainObject(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node$1.isNodeList(value.children) && Operation.isOperationList(value.operations);\n      IS_EDITOR_CACHE.set(value, isEditor);\n      return isEditor;\n    },\n\n    /**\r\n     * Check if a point is the end point of a location.\r\n     */\n    isEnd: function isEnd(editor, point, at) {\n      var end = Editor.end(editor, at);\n      return Point.equals(point, end);\n    },\n\n    /**\r\n     * Check if a point is an edge of a location.\r\n     */\n    isEdge: function isEdge(editor, point, at) {\n      return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);\n    },\n\n    /**\r\n     * Check if an element is empty, accounting for void nodes.\r\n     */\n    isEmpty: function isEmpty(editor, element) {\n      var children = element.children;\n\n      var _children = _slicedToArray(children, 1),\n          first = _children[0];\n\n      return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === '' && !editor.isVoid(element);\n    },\n\n    /**\r\n     * Check if a value is an inline `Element` object.\r\n     */\n    isInline: function isInline(editor, value) {\n      return Element$1.isElement(value) && editor.isInline(value);\n    },\n\n    /**\r\n     * Check if the editor is currently normalizing after each operation.\r\n     */\n    isNormalizing: function isNormalizing(editor) {\n      var isNormalizing = NORMALIZING.get(editor);\n      return isNormalizing === undefined ? true : isNormalizing;\n    },\n\n    /**\r\n     * Check if a point is the start point of a location.\r\n     */\n    isStart: function isStart(editor, point, at) {\n      // PERF: If the offset isn't `0` we know it's not the start.\n      if (point.offset !== 0) {\n        return false;\n      }\n\n      var start = Editor.start(editor, at);\n      return Point.equals(point, start);\n    },\n\n    /**\r\n     * Check if a value is a void `Element` object.\r\n     */\n    isVoid: function isVoid(editor, value) {\n      return Element$1.isElement(value) && editor.isVoid(value);\n    },\n\n    /**\r\n     * Get the last node at a location.\r\n     */\n    last: function last(editor, at) {\n      var path = Editor.path(editor, at, {\n        edge: 'end'\n      });\n      return Editor.node(editor, path);\n    },\n\n    /**\r\n     * Get the leaf text node at a location.\r\n     */\n    leaf: function leaf(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = Editor.path(editor, at, options);\n      var node = Node$1.leaf(editor, path);\n      return [node, path];\n    },\n\n    /**\r\n     * Iterate through all of the levels at a location.\r\n     */\n    levels: function* levels(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$at2 = options.at,\n          at = _options$at2 === void 0 ? editor.selection : _options$at2,\n          _options$reverse = options.reverse,\n          reverse = _options$reverse === void 0 ? false : _options$reverse,\n          _options$voids2 = options.voids,\n          voids = _options$voids2 === void 0 ? false : _options$voids2;\n      var match = options.match;\n\n      if (match == null) {\n        match = function match() {\n          return true;\n        };\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var levels = [];\n      var path = Editor.path(editor, at);\n\n      var _iterator4 = _createForOfIteratorHelper$5(Node$1.levels(editor, path)),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              n = _step4$value[0],\n              p = _step4$value[1];\n\n          if (!match(n, p)) {\n            continue;\n          }\n\n          levels.push([n, p]);\n\n          if (!voids && Editor.isVoid(editor, n)) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (reverse) {\n        levels.reverse();\n      }\n\n      yield* levels;\n    },\n\n    /**\r\n     * Get the marks that would be added to text at the current selection.\r\n     */\n    marks: function marks(editor) {\n      var marks = editor.marks,\n          selection = editor.selection;\n\n      if (!selection) {\n        return null;\n      }\n\n      if (marks) {\n        return marks;\n      }\n\n      if (Range.isExpanded(selection)) {\n        var _Editor$nodes = Editor.nodes(editor, {\n          match: Text.isText\n        }),\n            _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n            match = _Editor$nodes2[0];\n\n        if (match) {\n          var _match = _slicedToArray(match, 1),\n              _node = _match[0];\n\n          _node.text;\n              var _rest = _objectWithoutProperties(_node, _excluded$4);\n\n          return _rest;\n        } else {\n          return {};\n        }\n      }\n\n      var anchor = selection.anchor;\n      var path = anchor.path;\n\n      var _Editor$leaf = Editor.leaf(editor, path),\n          _Editor$leaf2 = _slicedToArray(_Editor$leaf, 1),\n          node = _Editor$leaf2[0];\n\n      if (anchor.offset === 0) {\n        var prev = Editor.previous(editor, {\n          at: path,\n          match: Text.isText\n        });\n        var block = Editor.above(editor, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          }\n        });\n\n        if (prev && block) {\n          var _prev = _slicedToArray(prev, 2),\n              prevNode = _prev[0],\n              prevPath = _prev[1];\n\n          var _block = _slicedToArray(block, 2),\n              blockPath = _block[1];\n\n          if (Path.isAncestor(blockPath, prevPath)) {\n            node = prevNode;\n          }\n        }\n      }\n\n      var _node2 = node;\n          _node2.text;\n          var rest = _objectWithoutProperties(_node2, _excluded2$3);\n\n      return rest;\n    },\n\n    /**\r\n     * Get the matching node in the branch of the document after a location.\r\n     */\n    next: function next(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$mode2 = options.mode,\n          mode = _options$mode2 === void 0 ? 'lowest' : _options$mode2,\n          _options$voids3 = options.voids,\n          voids = _options$voids3 === void 0 ? false : _options$voids3;\n      var match = options.match,\n          _options$at3 = options.at,\n          at = _options$at3 === void 0 ? editor.selection : _options$at3;\n\n      if (!at) {\n        return;\n      }\n\n      var pointAfterLocation = Editor.after(editor, at, {\n        voids: voids\n      });\n      if (!pointAfterLocation) return;\n\n      var _Editor$last = Editor.last(editor, []),\n          _Editor$last2 = _slicedToArray(_Editor$last, 2),\n          to = _Editor$last2[1];\n\n      var span = [pointAfterLocation.path, to];\n\n      if (Path.isPath(at) && at.length === 0) {\n        throw new Error(\"Cannot get the next node from the root node!\");\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          var _Editor$parent = Editor.parent(editor, at),\n              _Editor$parent2 = _slicedToArray(_Editor$parent, 1),\n              parent = _Editor$parent2[0];\n\n          match = function match(n) {\n            return parent.children.includes(n);\n          };\n        } else {\n          match = function match() {\n            return true;\n          };\n        }\n      }\n\n      var _Editor$nodes3 = Editor.nodes(editor, {\n        at: span,\n        match: match,\n        mode: mode,\n        voids: voids\n      }),\n          _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n          next = _Editor$nodes4[0];\n\n      return next;\n    },\n\n    /**\r\n     * Get the node at a location.\r\n     */\n    node: function node(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = Editor.path(editor, at, options);\n      var node = Node$1.get(editor, path);\n      return [node, path];\n    },\n\n    /**\r\n     * Iterate through all of the nodes in the Editor.\r\n     */\n    nodes: function* nodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$at4 = options.at,\n          at = _options$at4 === void 0 ? editor.selection : _options$at4,\n          _options$mode3 = options.mode,\n          mode = _options$mode3 === void 0 ? 'all' : _options$mode3,\n          _options$universal = options.universal,\n          universal = _options$universal === void 0 ? false : _options$universal,\n          _options$reverse2 = options.reverse,\n          reverse = _options$reverse2 === void 0 ? false : _options$reverse2,\n          _options$voids4 = options.voids,\n          voids = _options$voids4 === void 0 ? false : _options$voids4;\n      var match = options.match;\n\n      if (!match) {\n        match = function match() {\n          return true;\n        };\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var from;\n      var to;\n\n      if (Span.isSpan(at)) {\n        from = at[0];\n        to = at[1];\n      } else {\n        var first = Editor.path(editor, at, {\n          edge: 'start'\n        });\n        var last = Editor.path(editor, at, {\n          edge: 'end'\n        });\n        from = reverse ? last : first;\n        to = reverse ? first : last;\n      }\n\n      var nodeEntries = Node$1.nodes(editor, {\n        reverse: reverse,\n        from: from,\n        to: to,\n        pass: function pass(_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              n = _ref2[0];\n\n          return voids ? false : Editor.isVoid(editor, n);\n        }\n      });\n      var matches = [];\n      var hit;\n\n      var _iterator5 = _createForOfIteratorHelper$5(nodeEntries),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              node = _step5$value[0],\n              path = _step5$value[1];\n\n          var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.\n\n          if (mode === 'highest' && isLower) {\n            continue;\n          }\n\n          if (!match(node, path)) {\n            // If we've arrived at a leaf text node that is not lower than the last\n            // hit, then we've found a branch that doesn't include a match, which\n            // means the match is not universal.\n            if (universal && !isLower && Text.isText(node)) {\n              return;\n            } else {\n              continue;\n            }\n          } // If there's a match and it's lower than the last, update the hit.\n\n\n          if (mode === 'lowest' && isLower) {\n            hit = [node, path];\n            continue;\n          } // In lowest mode we emit the last hit, once it's guaranteed lowest.\n\n\n          var emit = mode === 'lowest' ? hit : [node, path];\n\n          if (emit) {\n            if (universal) {\n              matches.push(emit);\n            } else {\n              yield emit;\n            }\n          }\n\n          hit = [node, path];\n        } // Since lowest is always emitting one behind, catch up at the end.\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (mode === 'lowest' && hit) {\n        if (universal) {\n          matches.push(hit);\n        } else {\n          yield hit;\n        }\n      } // Universal defers to ensure that the match occurs in every branch, so we\n      // yield all of the matches after iterating.\n\n\n      if (universal) {\n        yield* matches;\n      }\n    },\n\n    /**\r\n     * Normalize any dirty objects in the editor.\r\n     */\n    normalize: function normalize(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$force = options.force,\n          force = _options$force === void 0 ? false : _options$force;\n\n      var getDirtyPaths = function getDirtyPaths(editor) {\n        return DIRTY_PATHS.get(editor) || [];\n      };\n\n      if (!Editor.isNormalizing(editor)) {\n        return;\n      }\n\n      if (force) {\n        var allPaths = Array.from(Node$1.nodes(editor), function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              p = _ref4[1];\n\n          return p;\n        });\n        DIRTY_PATHS.set(editor, allPaths);\n      }\n\n      if (getDirtyPaths(editor).length === 0) {\n        return;\n      }\n\n      Editor.withoutNormalizing(editor, function () {\n        /*\r\n          Fix dirty elements with no children.\r\n          editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\r\n          Running an initial pass avoids the catch-22 race condition.\r\n        */\n        var _iterator6 = _createForOfIteratorHelper$5(getDirtyPaths(editor)),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var _dirtyPath = _step6.value;\n\n            if (Node$1.has(editor, _dirtyPath)) {\n              var _entry = Editor.node(editor, _dirtyPath);\n\n              var _entry2 = _slicedToArray(_entry, 2),\n                  node = _entry2[0],\n                  _ = _entry2[1];\n              /*\r\n                The default normalizer inserts an empty text node in this scenario, but it can be customised.\r\n                So there is some risk here.\r\n                           As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\r\n                by definition adding children to an empty node can't cause other paths to change.\r\n              */\n\n\n              if (Element$1.isElement(node) && node.children.length === 0) {\n                editor.normalizeNode(_entry);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        var max = getDirtyPaths(editor).length * 42; // HACK: better way?\n\n        var m = 0;\n\n        while (getDirtyPaths(editor).length !== 0) {\n          if (m > max) {\n            throw new Error(\"\\n            Could not completely normalize the editor after \".concat(max, \" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\\n          \"));\n          }\n\n          var dirtyPath = getDirtyPaths(editor).pop(); // If the node doesn't exist in the tree, it does not need to be normalized.\n\n          if (Node$1.has(editor, dirtyPath)) {\n            var entry = Editor.node(editor, dirtyPath);\n            editor.normalizeNode(entry);\n          }\n\n          m++;\n        }\n      });\n    },\n\n    /**\r\n     * Get the parent node of a location.\r\n     */\n    parent: function parent(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = Editor.path(editor, at, options);\n      var parentPath = Path.parent(path);\n      var entry = Editor.node(editor, parentPath);\n      return entry;\n    },\n\n    /**\r\n     * Get the path of a location.\r\n     */\n    path: function path(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var depth = options.depth,\n          edge = options.edge;\n\n      if (Path.isPath(at)) {\n        if (edge === 'start') {\n          var _Node$first = Node$1.first(editor, at),\n              _Node$first2 = _slicedToArray(_Node$first, 2),\n              firstPath = _Node$first2[1];\n\n          at = firstPath;\n        } else if (edge === 'end') {\n          var _Node$last = Node$1.last(editor, at),\n              _Node$last2 = _slicedToArray(_Node$last, 2),\n              lastPath = _Node$last2[1];\n\n          at = lastPath;\n        }\n      }\n\n      if (Range.isRange(at)) {\n        if (edge === 'start') {\n          at = Range.start(at);\n        } else if (edge === 'end') {\n          at = Range.end(at);\n        } else {\n          at = Path.common(at.anchor.path, at.focus.path);\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        at = at.path;\n      }\n\n      if (depth != null) {\n        at = at.slice(0, depth);\n      }\n\n      return at;\n    },\n    hasPath: function hasPath(editor, path) {\n      return Node$1.has(editor, path);\n    },\n\n    /**\r\n     * Create a mutable ref for a `Path` object, which will stay in sync as new\r\n     * operations are applied to the editor.\r\n     */\n    pathRef: function pathRef(editor, path) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$affinity = options.affinity,\n          affinity = _options$affinity === void 0 ? 'forward' : _options$affinity;\n      var ref = {\n        current: path,\n        affinity: affinity,\n        unref: function unref() {\n          var current = ref.current;\n          var pathRefs = Editor.pathRefs(editor);\n          pathRefs[\"delete\"](ref);\n          ref.current = null;\n          return current;\n        }\n      };\n      var refs = Editor.pathRefs(editor);\n      refs.add(ref);\n      return ref;\n    },\n\n    /**\r\n     * Get the set of currently tracked path refs of the editor.\r\n     */\n    pathRefs: function pathRefs(editor) {\n      var refs = PATH_REFS.get(editor);\n\n      if (!refs) {\n        refs = new Set();\n        PATH_REFS.set(editor, refs);\n      }\n\n      return refs;\n    },\n\n    /**\r\n     * Get the start or end point of a location.\r\n     */\n    point: function point(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$edge = options.edge,\n          edge = _options$edge === void 0 ? 'start' : _options$edge;\n\n      if (Path.isPath(at)) {\n        var path;\n\n        if (edge === 'end') {\n          var _Node$last3 = Node$1.last(editor, at),\n              _Node$last4 = _slicedToArray(_Node$last3, 2),\n              lastPath = _Node$last4[1];\n\n          path = lastPath;\n        } else {\n          var _Node$first3 = Node$1.first(editor, at),\n              _Node$first4 = _slicedToArray(_Node$first3, 2),\n              firstPath = _Node$first4[1];\n\n          path = firstPath;\n        }\n\n        var node = Node$1.get(editor, path);\n\n        if (!Text.isText(node)) {\n          throw new Error(\"Cannot get the \".concat(edge, \" point in the node at path [\").concat(at, \"] because it has no \").concat(edge, \" text node.\"));\n        }\n\n        return {\n          path: path,\n          offset: edge === 'end' ? node.text.length : 0\n        };\n      }\n\n      if (Range.isRange(at)) {\n        var _Range$edges = Range.edges(at),\n            _Range$edges2 = _slicedToArray(_Range$edges, 2),\n            start = _Range$edges2[0],\n            end = _Range$edges2[1];\n\n        return edge === 'start' ? start : end;\n      }\n\n      return at;\n    },\n\n    /**\r\n     * Create a mutable ref for a `Point` object, which will stay in sync as new\r\n     * operations are applied to the editor.\r\n     */\n    pointRef: function pointRef(editor, point) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$affinity2 = options.affinity,\n          affinity = _options$affinity2 === void 0 ? 'forward' : _options$affinity2;\n      var ref = {\n        current: point,\n        affinity: affinity,\n        unref: function unref() {\n          var current = ref.current;\n          var pointRefs = Editor.pointRefs(editor);\n          pointRefs[\"delete\"](ref);\n          ref.current = null;\n          return current;\n        }\n      };\n      var refs = Editor.pointRefs(editor);\n      refs.add(ref);\n      return ref;\n    },\n\n    /**\r\n     * Get the set of currently tracked point refs of the editor.\r\n     */\n    pointRefs: function pointRefs(editor) {\n      var refs = POINT_REFS.get(editor);\n\n      if (!refs) {\n        refs = new Set();\n        POINT_REFS.set(editor, refs);\n      }\n\n      return refs;\n    },\n\n    /**\r\n     * Return all the positions in `at` range where a `Point` can be placed.\r\n     *\r\n     * By default, moves forward by individual offsets at a time, but\r\n     * the `unit` option can be used to to move by character, word, line, or block.\r\n     *\r\n     * The `reverse` option can be used to change iteration direction.\r\n     *\r\n     * Note: By default void nodes are treated as a single point and iteration\r\n     * will not happen inside their content unless you pass in true for the\r\n     * `voids` option, then iteration will occur.\r\n     */\n    positions: function* positions(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$at5 = options.at,\n          at = _options$at5 === void 0 ? editor.selection : _options$at5,\n          _options$unit3 = options.unit,\n          unit = _options$unit3 === void 0 ? 'offset' : _options$unit3,\n          _options$reverse3 = options.reverse,\n          reverse = _options$reverse3 === void 0 ? false : _options$reverse3,\n          _options$voids5 = options.voids,\n          voids = _options$voids5 === void 0 ? false : _options$voids5;\n\n      if (!at) {\n        return;\n      }\n      /**\r\n       * Algorithm notes:\r\n       *\r\n       * Each step `distance` is dynamic depending on the underlying text\r\n       * and the `unit` specified.  Each step, e.g., a line or word, may\r\n       * span multiple text nodes, so we iterate through the text both on\r\n       * two levels in step-sync:\r\n       *\r\n       * `leafText` stores the text on a text leaf level, and is advanced\r\n       * through using the counters `leafTextOffset` and `leafTextRemaining`.\r\n       *\r\n       * `blockText` stores the text on a block level, and is shortened\r\n       * by `distance` every time it is advanced.\r\n       *\r\n       * We only maintain a window of one blockText and one leafText because\r\n       * a block node always appears before all of its leaf nodes.\r\n       */\n\n\n      var range = Editor.range(editor, at);\n\n      var _Range$edges3 = Range.edges(range),\n          _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n          start = _Range$edges4[0],\n          end = _Range$edges4[1];\n\n      var first = reverse ? end : start;\n      var isNewBlock = false;\n      var blockText = '';\n      var distance = 0; // Distance for leafText to catch up to blockText.\n\n      var leafTextRemaining = 0;\n      var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content\n      // of block nodes in blockText, and text nodes in leafText.\n      // Exploits the fact that nodes are sequenced in such a way that we first\n      // encounter the block node, then all of its text nodes, so when iterating\n      // through the blockText and leafText we just need to remember a window of\n      // one block node and leaf node, respectively.\n\n      var _iterator7 = _createForOfIteratorHelper$5(Editor.nodes(editor, {\n        at: at,\n        reverse: reverse,\n        voids: voids\n      })),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              node = _step7$value[0],\n              path = _step7$value[1];\n\n          /*\r\n           * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\r\n           */\n          if (Element$1.isElement(node)) {\n            // Void nodes are a special case, so by default we will always\n            // yield their first point. If the `voids` option is set to true,\n            // then we will iterate over their content.\n            if (!voids && editor.isVoid(node)) {\n              yield Editor.start(editor, path);\n              continue;\n            } // Inline element nodes are ignored as they don't themselves\n            // contribute to `blockText` or `leafText` - their parent and\n            // children do.\n\n\n            if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.\n\n            if (Editor.hasInlines(editor, node)) {\n              // We always exhaust block nodes before encountering a new one:\n              //   console.assert(blockText === '',\n              //     `blockText='${blockText}' - `+\n              //     `not exhausted before new block node`, path)\n              // Ensure range considered is capped to `range`, in the\n              // start/end edge cases where block extends beyond range.\n              // Equivalent to this, but presumably more performant:\n              //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n              //   blockRange = Range.intersection(range, blockRange) // intersect\n              //   blockText = Editor.string(editor, blockRange, { voids })\n              var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);\n              var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);\n              blockText = Editor.string(editor, {\n                anchor: s,\n                focus: e\n              }, {\n                voids: voids\n              });\n              isNewBlock = true;\n            }\n          }\n          /*\r\n           * TEXT LEAF NODE - Iterate through text content, yielding\r\n           * positions every `distance` offset according to `unit`.\r\n           */\n\n\n          if (Text.isText(node)) {\n            var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:\n            //   console.assert(leafTextRemaining <= 0,\n            //     `leafTextRemaining=${leafTextRemaining} - `+\n            //     `not exhausted before new leaf text node`, path)\n            // Reset `leafText` counters for new text node.\n\n            if (isFirst) {\n              leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;\n              leafTextOffset = first.offset; // Works for reverse too.\n            } else {\n              leafTextRemaining = node.text.length;\n              leafTextOffset = reverse ? leafTextRemaining : 0;\n            } // Yield position at the start of node (potentially).\n\n\n            if (isFirst || isNewBlock || unit === 'offset') {\n              yield {\n                path: path,\n                offset: leafTextOffset\n              };\n              isNewBlock = false;\n            } // Yield positions every (dynamically calculated) `distance` offset.\n\n\n            while (true) {\n              // If `leafText` has caught up with `blockText` (distance=0),\n              // and if blockText is exhausted, break to get another block node,\n              // otherwise advance blockText forward by the new `distance`.\n              if (distance === 0) {\n                if (blockText === '') break;\n                distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the\n                // remaining string for the next iteration.\n\n                blockText = splitByCharacterDistance(blockText, distance, reverse)[1];\n              } // Advance `leafText` by the current `distance`.\n\n\n              leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;\n              leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node\n              // and set distance to the overflow amount, so we'll (maybe)\n              // catch up to blockText in the next leaf text node.\n\n              if (leafTextRemaining < 0) {\n                distance = -leafTextRemaining;\n                break;\n              } // Successfully walked `distance` offsets through `leafText`\n              // to catch up with `blockText`, so we can reset `distance`\n              // and yield this position in this node.\n\n\n              distance = 0;\n              yield {\n                path: path,\n                offset: leafTextOffset\n              };\n            }\n          }\n        } // Proof that upon completion, we've exahusted both leaf and block text:\n        //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n        //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n        // Helper:\n        // Return the distance in offsets for a step of size `unit` on given string.\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      function calcDistance(text, unit, reverse) {\n        if (unit === 'character') {\n          return getCharacterDistance(text, reverse);\n        } else if (unit === 'word') {\n          return getWordDistance(text, reverse);\n        } else if (unit === 'line' || unit === 'block') {\n          return text.length;\n        }\n\n        return 1;\n      }\n    },\n\n    /**\r\n     * Get the matching node in the branch of the document before a location.\r\n     */\n    previous: function previous(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$mode4 = options.mode,\n          mode = _options$mode4 === void 0 ? 'lowest' : _options$mode4,\n          _options$voids6 = options.voids,\n          voids = _options$voids6 === void 0 ? false : _options$voids6;\n      var match = options.match,\n          _options$at6 = options.at,\n          at = _options$at6 === void 0 ? editor.selection : _options$at6;\n\n      if (!at) {\n        return;\n      }\n\n      var pointBeforeLocation = Editor.before(editor, at, {\n        voids: voids\n      });\n\n      if (!pointBeforeLocation) {\n        return;\n      }\n\n      var _Editor$first = Editor.first(editor, []),\n          _Editor$first2 = _slicedToArray(_Editor$first, 2),\n          to = _Editor$first2[1]; // The search location is from the start of the document to the path of\n      // the point before the location passed in\n\n\n      var span = [pointBeforeLocation.path, to];\n\n      if (Path.isPath(at) && at.length === 0) {\n        throw new Error(\"Cannot get the previous node from the root node!\");\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          var _Editor$parent3 = Editor.parent(editor, at),\n              _Editor$parent4 = _slicedToArray(_Editor$parent3, 1),\n              parent = _Editor$parent4[0];\n\n          match = function match(n) {\n            return parent.children.includes(n);\n          };\n        } else {\n          match = function match() {\n            return true;\n          };\n        }\n      }\n\n      var _Editor$nodes5 = Editor.nodes(editor, {\n        reverse: true,\n        at: span,\n        match: match,\n        mode: mode,\n        voids: voids\n      }),\n          _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),\n          previous = _Editor$nodes6[0];\n\n      return previous;\n    },\n\n    /**\r\n     * Get a range of a location.\r\n     */\n    range: function range(editor, at, to) {\n      if (Range.isRange(at) && !to) {\n        return at;\n      }\n\n      var start = Editor.start(editor, at);\n      var end = Editor.end(editor, to || at);\n      return {\n        anchor: start,\n        focus: end\n      };\n    },\n\n    /**\r\n     * Create a mutable ref for a `Range` object, which will stay in sync as new\r\n     * operations are applied to the editor.\r\n     */\n    rangeRef: function rangeRef(editor, range) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$affinity3 = options.affinity,\n          affinity = _options$affinity3 === void 0 ? 'forward' : _options$affinity3;\n      var ref = {\n        current: range,\n        affinity: affinity,\n        unref: function unref() {\n          var current = ref.current;\n          var rangeRefs = Editor.rangeRefs(editor);\n          rangeRefs[\"delete\"](ref);\n          ref.current = null;\n          return current;\n        }\n      };\n      var refs = Editor.rangeRefs(editor);\n      refs.add(ref);\n      return ref;\n    },\n\n    /**\r\n     * Get the set of currently tracked range refs of the editor.\r\n     */\n    rangeRefs: function rangeRefs(editor) {\n      var refs = RANGE_REFS.get(editor);\n\n      if (!refs) {\n        refs = new Set();\n        RANGE_REFS.set(editor, refs);\n      }\n\n      return refs;\n    },\n\n    /**\r\n     * Remove a custom property from all of the leaf text nodes in the current\r\n     * selection.\r\n     *\r\n     * If the selection is currently collapsed, the removal will be stored on\r\n     * `editor.marks` and applied to the text inserted next.\r\n     */\n    removeMark: function removeMark(editor, key) {\n      editor.removeMark(key);\n    },\n\n    /**\r\n     * Manually set if the editor should currently be normalizing.\r\n     *\r\n     * Note: Using this incorrectly can leave the editor in an invalid state.\r\n     *\r\n     */\n    setNormalizing: function setNormalizing(editor, isNormalizing) {\n      NORMALIZING.set(editor, isNormalizing);\n    },\n\n    /**\r\n     * Get the start point of a location.\r\n     */\n    start: function start(editor, at) {\n      return Editor.point(editor, at, {\n        edge: 'start'\n      });\n    },\n\n    /**\r\n     * Get the text string content of a location.\r\n     *\r\n     * Note: by default the text of void nodes is considered to be an empty\r\n     * string, regardless of content, unless you pass in true for the voids option\r\n     */\n    string: function string(editor, at) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$voids7 = options.voids,\n          voids = _options$voids7 === void 0 ? false : _options$voids7;\n      var range = Editor.range(editor, at);\n\n      var _Range$edges5 = Range.edges(range),\n          _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n          start = _Range$edges6[0],\n          end = _Range$edges6[1];\n\n      var text = '';\n\n      var _iterator8 = _createForOfIteratorHelper$5(Editor.nodes(editor, {\n        at: range,\n        match: Text.isText,\n        voids: voids\n      })),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n              node = _step8$value[0],\n              path = _step8$value[1];\n\n          var t = node.text;\n\n          if (Path.equals(path, end.path)) {\n            t = t.slice(0, end.offset);\n          }\n\n          if (Path.equals(path, start.path)) {\n            t = t.slice(start.offset);\n          }\n\n          text += t;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return text;\n    },\n\n    /**\r\n     * Convert a range into a non-hanging one.\r\n     */\n    unhangRange: function unhangRange(editor, range) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$voids8 = options.voids,\n          voids = _options$voids8 === void 0 ? false : _options$voids8;\n\n      var _Range$edges7 = Range.edges(range),\n          _Range$edges8 = _slicedToArray(_Range$edges7, 2),\n          start = _Range$edges8[0],\n          end = _Range$edges8[1]; // PERF: exit early if we can guarantee that the range isn't hanging.\n\n\n      if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n        return range;\n      }\n\n      var endBlock = Editor.above(editor, {\n        at: end,\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n      var blockPath = endBlock ? endBlock[1] : [];\n      var first = Editor.start(editor, []);\n      var before = {\n        anchor: first,\n        focus: end\n      };\n      var skip = true;\n\n      var _iterator9 = _createForOfIteratorHelper$5(Editor.nodes(editor, {\n        at: before,\n        match: Text.isText,\n        reverse: true,\n        voids: voids\n      })),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n              node = _step9$value[0],\n              path = _step9$value[1];\n\n          if (skip) {\n            skip = false;\n            continue;\n          }\n\n          if (node.text !== '' || Path.isBefore(path, blockPath)) {\n            end = {\n              path: path,\n              offset: node.text.length\n            };\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return {\n        anchor: start,\n        focus: end\n      };\n    },\n\n    /**\r\n     * Match a void node in the current branch of the editor.\r\n     */\n    \"void\": function _void(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Editor.above(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n        match: function match(n) {\n          return Editor.isVoid(editor, n);\n        }\n      }));\n    },\n\n    /**\r\n     * Call a function, deferring normalization until after it completes.\r\n     */\n    withoutNormalizing: function withoutNormalizing(editor, fn) {\n      var value = Editor.isNormalizing(editor);\n      Editor.setNormalizing(editor, false);\n\n      try {\n        fn();\n      } finally {\n        Editor.setNormalizing(editor, value);\n      }\n\n      Editor.normalize(editor);\n    }\n  };\n\n  var Location = {\n    /**\r\n     * Check if a value implements the `Location` interface.\r\n     */\n    isLocation: function isLocation(value) {\n      return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);\n    }\n  };\n  var Span = {\n    /**\r\n     * Check if a value implements the `Span` interface.\r\n     */\n    isSpan: function isSpan(value) {\n      return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);\n    }\n  };\n\n  var _excluded$3 = [\"children\"],\n      _excluded2$2 = [\"text\"];\n\n  function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }\n\n  function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n  var IS_NODE_LIST_CACHE = new WeakMap();\n  var Node$1 = {\n    /**\r\n     * Get the node at a specific path, asserting that it's an ancestor node.\r\n     */\n    ancestor: function ancestor(root, path) {\n      var node = Node$1.get(root, path);\n\n      if (Text.isText(node)) {\n        throw new Error(\"Cannot get the ancestor node at path [\".concat(path, \"] because it refers to a text node instead: \").concat(node));\n      }\n\n      return node;\n    },\n\n    /**\r\n     * Return a generator of all the ancestor nodes above a specific path.\r\n     *\r\n     * By default the order is bottom-up, from lowest to highest ancestor in\r\n     * the tree, but you can pass the `reverse: true` option to go top-down.\r\n     */\n    ancestors: function* ancestors(root, path) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _iterator = _createForOfIteratorHelper$4(Path.ancestors(path, options)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          var n = Node$1.ancestor(root, p);\n          var entry = [n, p];\n          yield entry;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n\n    /**\r\n     * Get the child of a node at a specific index.\r\n     */\n    child: function child(root, index) {\n      if (Text.isText(root)) {\n        throw new Error(\"Cannot get the child of a text node: \".concat(JSON.stringify(root)));\n      }\n\n      var c = root.children[index];\n\n      if (c == null) {\n        throw new Error(\"Cannot get child at index `\".concat(index, \"` in node: \").concat(JSON.stringify(root)));\n      }\n\n      return c;\n    },\n\n    /**\r\n     * Iterate over the children of a node at a specific path.\r\n     */\n    children: function* children(root, path) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$reverse = options.reverse,\n          reverse = _options$reverse === void 0 ? false : _options$reverse;\n      var ancestor = Node$1.ancestor(root, path);\n      var children = ancestor.children;\n      var index = reverse ? children.length - 1 : 0;\n\n      while (reverse ? index >= 0 : index < children.length) {\n        var child = Node$1.child(ancestor, index);\n        var childPath = path.concat(index);\n        yield [child, childPath];\n        index = reverse ? index - 1 : index + 1;\n      }\n    },\n\n    /**\r\n     * Get an entry for the common ancesetor node of two paths.\r\n     */\n    common: function common(root, path, another) {\n      var p = Path.common(path, another);\n      var n = Node$1.get(root, p);\n      return [n, p];\n    },\n\n    /**\r\n     * Get the node at a specific path, asserting that it's a descendant node.\r\n     */\n    descendant: function descendant(root, path) {\n      var node = Node$1.get(root, path);\n\n      if (Editor.isEditor(node)) {\n        throw new Error(\"Cannot get the descendant node at path [\".concat(path, \"] because it refers to the root editor node instead: \").concat(node));\n      }\n\n      return node;\n    },\n\n    /**\r\n     * Return a generator of all the descendant node entries inside a root node.\r\n     */\n    descendants: function* descendants(root) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _iterator2 = _createForOfIteratorHelper$4(Node$1.nodes(root, options)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              node = _step2$value[0],\n              path = _step2$value[1];\n\n          if (path.length !== 0) {\n            // NOTE: we have to coerce here because checking the path's length does\n            // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n            yield [node, path];\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n\n    /**\r\n     * Return a generator of all the element nodes inside a root node. Each iteration\r\n     * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\r\n     * root node is an element it will be included in the iteration as well.\r\n     */\n    elements: function* elements(root) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _iterator3 = _createForOfIteratorHelper$4(Node$1.nodes(root, options)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              node = _step3$value[0],\n              path = _step3$value[1];\n\n          if (Element$1.isElement(node)) {\n            yield [node, path];\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    },\n\n    /**\r\n     * Extract props from a Node.\r\n     */\n    extractProps: function extractProps(node) {\n      if (Element$1.isAncestor(node)) {\n        node.children;\n            var properties = _objectWithoutProperties(node, _excluded$3);\n\n        return properties;\n      } else {\n        node.text;\n            var _properties = _objectWithoutProperties(node, _excluded2$2);\n\n        return _properties;\n      }\n    },\n\n    /**\r\n     * Get the first node entry in a root node from a path.\r\n     */\n    first: function first(root, path) {\n      var p = path.slice();\n      var n = Node$1.get(root, p);\n\n      while (n) {\n        if (Text.isText(n) || n.children.length === 0) {\n          break;\n        } else {\n          n = n.children[0];\n          p.push(0);\n        }\n      }\n\n      return [n, p];\n    },\n\n    /**\r\n     * Get the sliced fragment represented by a range inside a root node.\r\n     */\n    fragment: function fragment(root, range) {\n      if (Text.isText(root)) {\n        throw new Error(\"Cannot get a fragment starting from a root text node: \".concat(JSON.stringify(root)));\n      }\n\n      var newRoot = immer.produce({\n        children: root.children\n      }, function (r) {\n        var _Range$edges = Range.edges(range),\n            _Range$edges2 = _slicedToArray(_Range$edges, 2),\n            start = _Range$edges2[0],\n            end = _Range$edges2[1];\n\n        var nodeEntries = Node$1.nodes(r, {\n          reverse: true,\n          pass: function pass(_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                path = _ref2[1];\n\n            return !Range.includes(range, path);\n          }\n        });\n\n        var _iterator4 = _createForOfIteratorHelper$4(nodeEntries),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _step4$value = _slicedToArray(_step4.value, 2),\n                path = _step4$value[1];\n\n            if (!Range.includes(range, path)) {\n              var parent = Node$1.parent(r, path);\n              var index = path[path.length - 1];\n              parent.children.splice(index, 1);\n            }\n\n            if (Path.equals(path, end.path)) {\n              var leaf = Node$1.leaf(r, path);\n              leaf.text = leaf.text.slice(0, end.offset);\n            }\n\n            if (Path.equals(path, start.path)) {\n              var _leaf = Node$1.leaf(r, path);\n\n              _leaf.text = _leaf.text.slice(start.offset);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        if (Editor.isEditor(r)) {\n          r.selection = null;\n        }\n      });\n      return newRoot.children;\n    },\n\n    /**\r\n     * Get the descendant node referred to by a specific path. If the path is an\r\n     * empty array, it refers to the root node itself.\r\n     */\n    get: function get(root, path) {\n      var node = root;\n\n      for (var i = 0; i < path.length; i++) {\n        var p = path[i];\n\n        if (Text.isText(node) || !node.children[p]) {\n          throw new Error(\"Cannot find a descendant at path [\".concat(path, \"] in node: \").concat(JSON.stringify(root)));\n        }\n\n        node = node.children[p];\n      }\n\n      return node;\n    },\n\n    /**\r\n     * Check if a descendant node exists at a specific path.\r\n     */\n    has: function has(root, path) {\n      var node = root;\n\n      for (var i = 0; i < path.length; i++) {\n        var p = path[i];\n\n        if (Text.isText(node) || !node.children[p]) {\n          return false;\n        }\n\n        node = node.children[p];\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Check if a value implements the `Node` interface.\r\n     */\n    isNode: function isNode(value) {\n      return Text.isText(value) || Element$1.isElement(value) || Editor.isEditor(value);\n    },\n\n    /**\r\n     * Check if a value is a list of `Node` objects.\r\n     */\n    isNodeList: function isNodeList(value) {\n      if (!Array.isArray(value)) {\n        return false;\n      }\n\n      var cachedResult = IS_NODE_LIST_CACHE.get(value);\n\n      if (cachedResult !== undefined) {\n        return cachedResult;\n      }\n\n      var isNodeList = value.every(function (val) {\n        return Node$1.isNode(val);\n      });\n      IS_NODE_LIST_CACHE.set(value, isNodeList);\n      return isNodeList;\n    },\n\n    /**\r\n     * Get the last node entry in a root node from a path.\r\n     */\n    last: function last(root, path) {\n      var p = path.slice();\n      var n = Node$1.get(root, p);\n\n      while (n) {\n        if (Text.isText(n) || n.children.length === 0) {\n          break;\n        } else {\n          var i = n.children.length - 1;\n          n = n.children[i];\n          p.push(i);\n        }\n      }\n\n      return [n, p];\n    },\n\n    /**\r\n     * Get the node at a specific path, ensuring it's a leaf text node.\r\n     */\n    leaf: function leaf(root, path) {\n      var node = Node$1.get(root, path);\n\n      if (!Text.isText(node)) {\n        throw new Error(\"Cannot get the leaf node at path [\".concat(path, \"] because it refers to a non-leaf node: \").concat(node));\n      }\n\n      return node;\n    },\n\n    /**\r\n     * Return a generator of the in a branch of the tree, from a specific path.\r\n     *\r\n     * By default the order is top-down, from lowest to highest node in the tree,\r\n     * but you can pass the `reverse: true` option to go bottom-up.\r\n     */\n    levels: function* levels(root, path) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _iterator5 = _createForOfIteratorHelper$4(Path.levels(path, options)),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var p = _step5.value;\n          var n = Node$1.get(root, p);\n          yield [n, p];\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    },\n\n    /**\r\n     * Check if a node matches a set of props.\r\n     */\n    matches: function matches(node, props) {\n      return Element$1.isElement(node) && Element$1.isElementProps(props) && Element$1.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);\n    },\n\n    /**\r\n     * Return a generator of all the node entries of a root node. Each entry is\r\n     * returned as a `[Node, Path]` tuple, with the path referring to the node's\r\n     * position inside the root node.\r\n     */\n    nodes: function* nodes(root) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var pass = options.pass,\n          _options$reverse2 = options.reverse,\n          reverse = _options$reverse2 === void 0 ? false : _options$reverse2;\n      var _options$from = options.from,\n          from = _options$from === void 0 ? [] : _options$from,\n          to = options.to;\n      var visited = new Set();\n      var p = [];\n      var n = root;\n\n      while (true) {\n        if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n          break;\n        }\n\n        if (!visited.has(n)) {\n          yield [n, p];\n        } // If we're allowed to go downward and we haven't descended yet, do.\n\n\n        if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {\n          visited.add(n);\n          var nextIndex = reverse ? n.children.length - 1 : 0;\n\n          if (Path.isAncestor(p, from)) {\n            nextIndex = from[p.length];\n          }\n\n          p = p.concat(nextIndex);\n          n = Node$1.get(root, p);\n          continue;\n        } // If we're at the root and we can't go down, we're done.\n\n\n        if (p.length === 0) {\n          break;\n        } // If we're going forward...\n\n\n        if (!reverse) {\n          var newPath = Path.next(p);\n\n          if (Node$1.has(root, newPath)) {\n            p = newPath;\n            n = Node$1.get(root, p);\n            continue;\n          }\n        } // If we're going backward...\n\n\n        if (reverse && p[p.length - 1] !== 0) {\n          var _newPath = Path.previous(p);\n\n          p = _newPath;\n          n = Node$1.get(root, p);\n          continue;\n        } // Otherwise we're going upward...\n\n\n        p = Path.parent(p);\n        n = Node$1.get(root, p);\n        visited.add(n);\n      }\n    },\n\n    /**\r\n     * Get the parent of a node at a specific path.\r\n     */\n    parent: function parent(root, path) {\n      var parentPath = Path.parent(path);\n      var p = Node$1.get(root, parentPath);\n\n      if (Text.isText(p)) {\n        throw new Error(\"Cannot get the parent of path [\".concat(path, \"] because it does not exist in the root.\"));\n      }\n\n      return p;\n    },\n\n    /**\r\n     * Get the concatenated text string of a node's content.\r\n     *\r\n     * Note that this will not include spaces or line breaks between block nodes.\r\n     * It is not a user-facing string, but a string for performing offset-related\r\n     * computations for a node.\r\n     */\n    string: function string(node) {\n      if (Text.isText(node)) {\n        return node.text;\n      } else {\n        return node.children.map(Node$1.string).join('');\n      }\n    },\n\n    /**\r\n     * Return a generator of all leaf text nodes in a root node.\r\n     */\n    texts: function* texts(root) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _iterator6 = _createForOfIteratorHelper$4(Node$1.nodes(root, options)),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              node = _step6$value[0],\n              path = _step6$value[1];\n\n          if (Text.isText(node)) {\n            yield [node, path];\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  };\n\n  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var Operation = {\n    /**\r\n     * Check of a value is a `NodeOperation` object.\r\n     */\n    isNodeOperation: function isNodeOperation(value) {\n      return Operation.isOperation(value) && value.type.endsWith('_node');\n    },\n\n    /**\r\n     * Check of a value is an `Operation` object.\r\n     */\n    isOperation: function isOperation(value) {\n      if (!isPlainObject.isPlainObject(value)) {\n        return false;\n      }\n\n      switch (value.type) {\n        case 'insert_node':\n          return Path.isPath(value.path) && Node$1.isNode(value.node);\n\n        case 'insert_text':\n          return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n        case 'merge_node':\n          return typeof value.position === 'number' && Path.isPath(value.path) && isPlainObject.isPlainObject(value.properties);\n\n        case 'move_node':\n          return Path.isPath(value.path) && Path.isPath(value.newPath);\n\n        case 'remove_node':\n          return Path.isPath(value.path) && Node$1.isNode(value.node);\n\n        case 'remove_text':\n          return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n        case 'set_node':\n          return Path.isPath(value.path) && isPlainObject.isPlainObject(value.properties) && isPlainObject.isPlainObject(value.newProperties);\n\n        case 'set_selection':\n          return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject.isPlainObject(value.properties) && isPlainObject.isPlainObject(value.newProperties);\n\n        case 'split_node':\n          return Path.isPath(value.path) && typeof value.position === 'number' && isPlainObject.isPlainObject(value.properties);\n\n        default:\n          return false;\n      }\n    },\n\n    /**\r\n     * Check if a value is a list of `Operation` objects.\r\n     */\n    isOperationList: function isOperationList(value) {\n      return Array.isArray(value) && value.every(function (val) {\n        return Operation.isOperation(val);\n      });\n    },\n\n    /**\r\n     * Check of a value is a `SelectionOperation` object.\r\n     */\n    isSelectionOperation: function isSelectionOperation(value) {\n      return Operation.isOperation(value) && value.type.endsWith('_selection');\n    },\n\n    /**\r\n     * Check of a value is a `TextOperation` object.\r\n     */\n    isTextOperation: function isTextOperation(value) {\n      return Operation.isOperation(value) && value.type.endsWith('_text');\n    },\n\n    /**\r\n     * Invert an operation, returning a new operation that will exactly undo the\r\n     * original when applied.\r\n     */\n    inverse: function inverse(op) {\n      switch (op.type) {\n        case 'insert_node':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'remove_node'\n            });\n          }\n\n        case 'insert_text':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'remove_text'\n            });\n          }\n\n        case 'merge_node':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'split_node',\n              path: Path.previous(op.path)\n            });\n          }\n\n        case 'move_node':\n          {\n            var newPath = op.newPath,\n                path = op.path; // PERF: in this case the move operation is a no-op anyways.\n\n            if (Path.equals(newPath, path)) {\n              return op;\n            } // If the move happens completely within a single parent the path and\n            // newPath are stable with respect to each other.\n\n\n            if (Path.isSibling(path, newPath)) {\n              return _objectSpread$7(_objectSpread$7({}, op), {}, {\n                path: newPath,\n                newPath: path\n              });\n            } // If the move does not happen within a single parent it is possible\n            // for the move to impact the true path to the location where the node\n            // was removed from and where it was inserted. We have to adjust for this\n            // and find the original path. We can accomplish this (only in non-sibling)\n            // moves by looking at the impact of the move operation on the node\n            // after the original move path.\n\n\n            var inversePath = Path.transform(path, op);\n            var inverseNewPath = Path.transform(Path.next(path), op);\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              path: inversePath,\n              newPath: inverseNewPath\n            });\n          }\n\n        case 'remove_node':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'insert_node'\n            });\n          }\n\n        case 'remove_text':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'insert_text'\n            });\n          }\n\n        case 'set_node':\n          {\n            var properties = op.properties,\n                newProperties = op.newProperties;\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              properties: newProperties,\n              newProperties: properties\n            });\n          }\n\n        case 'set_selection':\n          {\n            var _properties = op.properties,\n                _newProperties = op.newProperties;\n\n            if (_properties == null) {\n              return _objectSpread$7(_objectSpread$7({}, op), {}, {\n                properties: _newProperties,\n                newProperties: null\n              });\n            } else if (_newProperties == null) {\n              return _objectSpread$7(_objectSpread$7({}, op), {}, {\n                properties: null,\n                newProperties: _properties\n              });\n            } else {\n              return _objectSpread$7(_objectSpread$7({}, op), {}, {\n                properties: _newProperties,\n                newProperties: _properties\n              });\n            }\n          }\n\n        case 'split_node':\n          {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              type: 'merge_node',\n              path: Path.next(op.path)\n            });\n          }\n      }\n    }\n  };\n\n  var Path = {\n    /**\r\n     * Get a list of ancestor paths for a given path.\r\n     *\r\n     * The paths are sorted from deepest to shallowest ancestor. However, if the\r\n     * `reverse: true` option is passed, they are reversed.\r\n     */\n    ancestors: function ancestors(path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$reverse = options.reverse,\n          reverse = _options$reverse === void 0 ? false : _options$reverse;\n      var paths = Path.levels(path, options);\n\n      if (reverse) {\n        paths = paths.slice(1);\n      } else {\n        paths = paths.slice(0, -1);\n      }\n\n      return paths;\n    },\n\n    /**\r\n     * Get the common ancestor path of two paths.\r\n     */\n    common: function common(path, another) {\n      var common = [];\n\n      for (var i = 0; i < path.length && i < another.length; i++) {\n        var av = path[i];\n        var bv = another[i];\n\n        if (av !== bv) {\n          break;\n        }\n\n        common.push(av);\n      }\n\n      return common;\n    },\n\n    /**\r\n     * Compare a path to another, returning an integer indicating whether the path\r\n     * was before, at, or after the other.\r\n     *\r\n     * Note: Two paths of unequal length can still receive a `0` result if one is\r\n     * directly above or below the other. If you want exact matching, use\r\n     * [[Path.equals]] instead.\r\n     */\n    compare: function compare(path, another) {\n      var min = Math.min(path.length, another.length);\n\n      for (var i = 0; i < min; i++) {\n        if (path[i] < another[i]) return -1;\n        if (path[i] > another[i]) return 1;\n      }\n\n      return 0;\n    },\n\n    /**\r\n     * Check if a path ends after one of the indexes in another.\r\n     */\n    endsAfter: function endsAfter(path, another) {\n      var i = path.length - 1;\n      var as = path.slice(0, i);\n      var bs = another.slice(0, i);\n      var av = path[i];\n      var bv = another[i];\n      return Path.equals(as, bs) && av > bv;\n    },\n\n    /**\r\n     * Check if a path ends at one of the indexes in another.\r\n     */\n    endsAt: function endsAt(path, another) {\n      var i = path.length;\n      var as = path.slice(0, i);\n      var bs = another.slice(0, i);\n      return Path.equals(as, bs);\n    },\n\n    /**\r\n     * Check if a path ends before one of the indexes in another.\r\n     */\n    endsBefore: function endsBefore(path, another) {\n      var i = path.length - 1;\n      var as = path.slice(0, i);\n      var bs = another.slice(0, i);\n      var av = path[i];\n      var bv = another[i];\n      return Path.equals(as, bs) && av < bv;\n    },\n\n    /**\r\n     * Check if a path is exactly equal to another.\r\n     */\n    equals: function equals(path, another) {\n      return path.length === another.length && path.every(function (n, i) {\n        return n === another[i];\n      });\n    },\n\n    /**\r\n     * Check if the path of previous sibling node exists\r\n     */\n    hasPrevious: function hasPrevious(path) {\n      return path[path.length - 1] > 0;\n    },\n\n    /**\r\n     * Check if a path is after another.\r\n     */\n    isAfter: function isAfter(path, another) {\n      return Path.compare(path, another) === 1;\n    },\n\n    /**\r\n     * Check if a path is an ancestor of another.\r\n     */\n    isAncestor: function isAncestor(path, another) {\n      return path.length < another.length && Path.compare(path, another) === 0;\n    },\n\n    /**\r\n     * Check if a path is before another.\r\n     */\n    isBefore: function isBefore(path, another) {\n      return Path.compare(path, another) === -1;\n    },\n\n    /**\r\n     * Check if a path is a child of another.\r\n     */\n    isChild: function isChild(path, another) {\n      return path.length === another.length + 1 && Path.compare(path, another) === 0;\n    },\n\n    /**\r\n     * Check if a path is equal to or an ancestor of another.\r\n     */\n    isCommon: function isCommon(path, another) {\n      return path.length <= another.length && Path.compare(path, another) === 0;\n    },\n\n    /**\r\n     * Check if a path is a descendant of another.\r\n     */\n    isDescendant: function isDescendant(path, another) {\n      return path.length > another.length && Path.compare(path, another) === 0;\n    },\n\n    /**\r\n     * Check if a path is the parent of another.\r\n     */\n    isParent: function isParent(path, another) {\n      return path.length + 1 === another.length && Path.compare(path, another) === 0;\n    },\n\n    /**\r\n     * Check is a value implements the `Path` interface.\r\n     */\n    isPath: function isPath(value) {\n      return Array.isArray(value) && (value.length === 0 || typeof value[0] === 'number');\n    },\n\n    /**\r\n     * Check if a path is a sibling of another.\r\n     */\n    isSibling: function isSibling(path, another) {\n      if (path.length !== another.length) {\n        return false;\n      }\n\n      var as = path.slice(0, -1);\n      var bs = another.slice(0, -1);\n      var al = path[path.length - 1];\n      var bl = another[another.length - 1];\n      return al !== bl && Path.equals(as, bs);\n    },\n\n    /**\r\n     * Get a list of paths at every level down to a path. Note: this is the same\r\n     * as `Path.ancestors`, but including the path itself.\r\n     *\r\n     * The paths are sorted from shallowest to deepest. However, if the `reverse:\r\n     * true` option is passed, they are reversed.\r\n     */\n    levels: function levels(path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$reverse2 = options.reverse,\n          reverse = _options$reverse2 === void 0 ? false : _options$reverse2;\n      var list = [];\n\n      for (var i = 0; i <= path.length; i++) {\n        list.push(path.slice(0, i));\n      }\n\n      if (reverse) {\n        list.reverse();\n      }\n\n      return list;\n    },\n\n    /**\r\n     * Given a path, get the path to the next sibling node.\r\n     */\n    next: function next(path) {\n      if (path.length === 0) {\n        throw new Error(\"Cannot get the next path of a root path [\".concat(path, \"], because it has no next index.\"));\n      }\n\n      var last = path[path.length - 1];\n      return path.slice(0, -1).concat(last + 1);\n    },\n\n    /**\r\n     * Given a path, return a new path referring to the parent node above it.\r\n     */\n    parent: function parent(path) {\n      if (path.length === 0) {\n        throw new Error(\"Cannot get the parent path of the root path [\".concat(path, \"].\"));\n      }\n\n      return path.slice(0, -1);\n    },\n\n    /**\r\n     * Given a path, get the path to the previous sibling node.\r\n     */\n    previous: function previous(path) {\n      if (path.length === 0) {\n        throw new Error(\"Cannot get the previous path of a root path [\".concat(path, \"], because it has no previous index.\"));\n      }\n\n      var last = path[path.length - 1];\n\n      if (last <= 0) {\n        throw new Error(\"Cannot get the previous path of a first child path [\".concat(path, \"] because it would result in a negative index.\"));\n      }\n\n      return path.slice(0, -1).concat(last - 1);\n    },\n\n    /**\r\n     * Get a path relative to an ancestor.\r\n     */\n    relative: function relative(path, ancestor) {\n      if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n        throw new Error(\"Cannot get the relative path of [\".concat(path, \"] inside ancestor [\").concat(ancestor, \"], because it is not above or equal to the path.\"));\n      }\n\n      return path.slice(ancestor.length);\n    },\n\n    /**\r\n     * Transform a path by an operation.\r\n     */\n    transform: function transform(path, operation) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return immer.produce(path, function (p) {\n        var _options$affinity = options.affinity,\n            affinity = _options$affinity === void 0 ? 'forward' : _options$affinity; // PERF: Exit early if the operation is guaranteed not to have an effect.\n\n        if (!path || (path === null || path === void 0 ? void 0 : path.length) === 0) {\n          return;\n        }\n\n        if (p === null) {\n          return null;\n        }\n\n        switch (operation.type) {\n          case 'insert_node':\n            {\n              var op = operation.path;\n\n              if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {\n                p[op.length - 1] += 1;\n              }\n\n              break;\n            }\n\n          case 'remove_node':\n            {\n              var _op = operation.path;\n\n              if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {\n                return null;\n              } else if (Path.endsBefore(_op, p)) {\n                p[_op.length - 1] -= 1;\n              }\n\n              break;\n            }\n\n          case 'merge_node':\n            {\n              var _op2 = operation.path,\n                  position = operation.position;\n\n              if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {\n                p[_op2.length - 1] -= 1;\n              } else if (Path.isAncestor(_op2, p)) {\n                p[_op2.length - 1] -= 1;\n                p[_op2.length] += position;\n              }\n\n              break;\n            }\n\n          case 'split_node':\n            {\n              var _op3 = operation.path,\n                  _position = operation.position;\n\n              if (Path.equals(_op3, p)) {\n                if (affinity === 'forward') {\n                  p[p.length - 1] += 1;\n                } else if (affinity === 'backward') ; else {\n                  return null;\n                }\n              } else if (Path.endsBefore(_op3, p)) {\n                p[_op3.length - 1] += 1;\n              } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {\n                p[_op3.length - 1] += 1;\n                p[_op3.length] -= _position;\n              }\n\n              break;\n            }\n\n          case 'move_node':\n            {\n              var _op4 = operation.path,\n                  onp = operation.newPath; // If the old and new path are the same, it's a no-op.\n\n              if (Path.equals(_op4, onp)) {\n                return;\n              }\n\n              if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {\n                var copy = onp.slice();\n\n                if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {\n                  copy[_op4.length - 1] -= 1;\n                }\n\n                return copy.concat(p.slice(_op4.length));\n              } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {\n                if (Path.endsBefore(_op4, p)) {\n                  p[_op4.length - 1] -= 1;\n                } else {\n                  p[_op4.length - 1] += 1;\n                }\n              } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {\n                if (Path.endsBefore(_op4, p)) {\n                  p[_op4.length - 1] -= 1;\n                }\n\n                p[onp.length - 1] += 1;\n              } else if (Path.endsBefore(_op4, p)) {\n                if (Path.equals(onp, p)) {\n                  p[onp.length - 1] += 1;\n                }\n\n                p[_op4.length - 1] -= 1;\n              }\n\n              break;\n            }\n        }\n      });\n    }\n  };\n\n  var PathRef = {\n    /**\r\n     * Transform the path ref's current value by an operation.\r\n     */\n    transform: function transform(ref, op) {\n      var current = ref.current,\n          affinity = ref.affinity;\n\n      if (current == null) {\n        return;\n      }\n\n      var path = Path.transform(current, op, {\n        affinity: affinity\n      });\n      ref.current = path;\n\n      if (path == null) {\n        ref.unref();\n      }\n    }\n  };\n\n  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var Point = {\n    /**\r\n     * Compare a point to another, returning an integer indicating whether the\r\n     * point was before, at, or after the other.\r\n     */\n    compare: function compare(point, another) {\n      var result = Path.compare(point.path, another.path);\n\n      if (result === 0) {\n        if (point.offset < another.offset) return -1;\n        if (point.offset > another.offset) return 1;\n        return 0;\n      }\n\n      return result;\n    },\n\n    /**\r\n     * Check if a point is after another.\r\n     */\n    isAfter: function isAfter(point, another) {\n      return Point.compare(point, another) === 1;\n    },\n\n    /**\r\n     * Check if a point is before another.\r\n     */\n    isBefore: function isBefore(point, another) {\n      return Point.compare(point, another) === -1;\n    },\n\n    /**\r\n     * Check if a point is exactly equal to another.\r\n     */\n    equals: function equals(point, another) {\n      // PERF: ensure the offsets are equal first since they are cheaper to check.\n      return point.offset === another.offset && Path.equals(point.path, another.path);\n    },\n\n    /**\r\n     * Check if a value implements the `Point` interface.\r\n     */\n    isPoint: function isPoint(value) {\n      return isPlainObject.isPlainObject(value) && typeof value.offset === 'number' && Path.isPath(value.path);\n    },\n\n    /**\r\n     * Transform a point by an operation.\r\n     */\n    transform: function transform(point, op) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return immer.produce(point, function (p) {\n        if (p === null) {\n          return null;\n        }\n\n        var _options$affinity = options.affinity,\n            affinity = _options$affinity === void 0 ? 'forward' : _options$affinity;\n        var path = p.path,\n            offset = p.offset;\n\n        switch (op.type) {\n          case 'insert_node':\n          case 'move_node':\n            {\n              p.path = Path.transform(path, op, options);\n              break;\n            }\n\n          case 'insert_text':\n            {\n              if (Path.equals(op.path, path) && op.offset <= offset) {\n                p.offset += op.text.length;\n              }\n\n              break;\n            }\n\n          case 'merge_node':\n            {\n              if (Path.equals(op.path, path)) {\n                p.offset += op.position;\n              }\n\n              p.path = Path.transform(path, op, options);\n              break;\n            }\n\n          case 'remove_text':\n            {\n              if (Path.equals(op.path, path) && op.offset <= offset) {\n                p.offset -= Math.min(offset - op.offset, op.text.length);\n              }\n\n              break;\n            }\n\n          case 'remove_node':\n            {\n              if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n                return null;\n              }\n\n              p.path = Path.transform(path, op, options);\n              break;\n            }\n\n          case 'split_node':\n            {\n              if (Path.equals(op.path, path)) {\n                if (op.position === offset && affinity == null) {\n                  return null;\n                } else if (op.position < offset || op.position === offset && affinity === 'forward') {\n                  p.offset -= op.position;\n                  p.path = Path.transform(path, op, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                    affinity: 'forward'\n                  }));\n                }\n              } else {\n                p.path = Path.transform(path, op, options);\n              }\n\n              break;\n            }\n        }\n      });\n    }\n  };\n\n  var PointRef = {\n    /**\r\n     * Transform the point ref's current value by an operation.\r\n     */\n    transform: function transform(ref, op) {\n      var current = ref.current,\n          affinity = ref.affinity;\n\n      if (current == null) {\n        return;\n      }\n\n      var point = Point.transform(current, op, {\n        affinity: affinity\n      });\n      ref.current = point;\n\n      if (point == null) {\n        ref.unref();\n      }\n    }\n  };\n\n  var _excluded$2 = [\"anchor\", \"focus\"];\n\n  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var Range = {\n    /**\r\n     * Get the start and end points of a range, in the order in which they appear\r\n     * in the document.\r\n     */\n    edges: function edges(range) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$reverse = options.reverse,\n          reverse = _options$reverse === void 0 ? false : _options$reverse;\n      var anchor = range.anchor,\n          focus = range.focus;\n      return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];\n    },\n\n    /**\r\n     * Get the end point of a range.\r\n     */\n    end: function end(range) {\n      var _Range$edges = Range.edges(range),\n          _Range$edges2 = _slicedToArray(_Range$edges, 2),\n          end = _Range$edges2[1];\n\n      return end;\n    },\n\n    /**\r\n     * Check if a range is exactly equal to another.\r\n     */\n    equals: function equals(range, another) {\n      return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);\n    },\n\n    /**\r\n     * Check if a range includes a path, a point or part of another range.\r\n     */\n    includes: function includes(range, target) {\n      if (Range.isRange(target)) {\n        if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {\n          return true;\n        }\n\n        var _Range$edges3 = Range.edges(range),\n            _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n            rs = _Range$edges4[0],\n            re = _Range$edges4[1];\n\n        var _Range$edges5 = Range.edges(target),\n            _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n            ts = _Range$edges6[0],\n            te = _Range$edges6[1];\n\n        return Point.isBefore(rs, ts) && Point.isAfter(re, te);\n      }\n\n      var _Range$edges7 = Range.edges(range),\n          _Range$edges8 = _slicedToArray(_Range$edges7, 2),\n          start = _Range$edges8[0],\n          end = _Range$edges8[1];\n\n      var isAfterStart = false;\n      var isBeforeEnd = false;\n\n      if (Point.isPoint(target)) {\n        isAfterStart = Point.compare(target, start) >= 0;\n        isBeforeEnd = Point.compare(target, end) <= 0;\n      } else {\n        isAfterStart = Path.compare(target, start.path) >= 0;\n        isBeforeEnd = Path.compare(target, end.path) <= 0;\n      }\n\n      return isAfterStart && isBeforeEnd;\n    },\n\n    /**\r\n     * Get the intersection of a range with another.\r\n     */\n    intersection: function intersection(range, another) {\n      range.anchor;\n          range.focus;\n          var rest = _objectWithoutProperties(range, _excluded$2);\n\n      var _Range$edges9 = Range.edges(range),\n          _Range$edges10 = _slicedToArray(_Range$edges9, 2),\n          s1 = _Range$edges10[0],\n          e1 = _Range$edges10[1];\n\n      var _Range$edges11 = Range.edges(another),\n          _Range$edges12 = _slicedToArray(_Range$edges11, 2),\n          s2 = _Range$edges12[0],\n          e2 = _Range$edges12[1];\n\n      var start = Point.isBefore(s1, s2) ? s2 : s1;\n      var end = Point.isBefore(e1, e2) ? e1 : e2;\n\n      if (Point.isBefore(end, start)) {\n        return null;\n      } else {\n        return _objectSpread$5({\n          anchor: start,\n          focus: end\n        }, rest);\n      }\n    },\n\n    /**\r\n     * Check if a range is backward, meaning that its anchor point appears in the\r\n     * document _after_ its focus point.\r\n     */\n    isBackward: function isBackward(range) {\n      var anchor = range.anchor,\n          focus = range.focus;\n      return Point.isAfter(anchor, focus);\n    },\n\n    /**\r\n     * Check if a range is collapsed, meaning that both its anchor and focus\r\n     * points refer to the exact same position in the document.\r\n     */\n    isCollapsed: function isCollapsed(range) {\n      var anchor = range.anchor,\n          focus = range.focus;\n      return Point.equals(anchor, focus);\n    },\n\n    /**\r\n     * Check if a range is expanded.\r\n     *\r\n     * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\r\n     */\n    isExpanded: function isExpanded(range) {\n      return !Range.isCollapsed(range);\n    },\n\n    /**\r\n     * Check if a range is forward.\r\n     *\r\n     * This is the opposite of [[Range.isBackward]] and is provided for legibility.\r\n     */\n    isForward: function isForward(range) {\n      return !Range.isBackward(range);\n    },\n\n    /**\r\n     * Check if a value implements the [[Range]] interface.\r\n     */\n    isRange: function isRange(value) {\n      return isPlainObject.isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);\n    },\n\n    /**\r\n     * Iterate through all of the point entries in a range.\r\n     */\n    points: function* points(range) {\n      yield [range.anchor, 'anchor'];\n      yield [range.focus, 'focus'];\n    },\n\n    /**\r\n     * Get the start point of a range.\r\n     */\n    start: function start(range) {\n      var _Range$edges13 = Range.edges(range),\n          _Range$edges14 = _slicedToArray(_Range$edges13, 1),\n          start = _Range$edges14[0];\n\n      return start;\n    },\n\n    /**\r\n     * Transform a range by an operation.\r\n     */\n    transform: function transform(range, op) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return immer.produce(range, function (r) {\n        if (r === null) {\n          return null;\n        }\n\n        var _options$affinity = options.affinity,\n            affinity = _options$affinity === void 0 ? 'inward' : _options$affinity;\n        var affinityAnchor;\n        var affinityFocus;\n\n        if (affinity === 'inward') {\n          // If the range is collapsed, make sure to use the same affinity to\n          // avoid the two points passing each other and expanding in the opposite\n          // direction\n          var isCollapsed = Range.isCollapsed(r);\n\n          if (Range.isForward(r)) {\n            affinityAnchor = 'forward';\n            affinityFocus = isCollapsed ? affinityAnchor : 'backward';\n          } else {\n            affinityAnchor = 'backward';\n            affinityFocus = isCollapsed ? affinityAnchor : 'forward';\n          }\n        } else if (affinity === 'outward') {\n          if (Range.isForward(r)) {\n            affinityAnchor = 'backward';\n            affinityFocus = 'forward';\n          } else {\n            affinityAnchor = 'forward';\n            affinityFocus = 'backward';\n          }\n        } else {\n          affinityAnchor = affinity;\n          affinityFocus = affinity;\n        }\n\n        var anchor = Point.transform(r.anchor, op, {\n          affinity: affinityAnchor\n        });\n        var focus = Point.transform(r.focus, op, {\n          affinity: affinityFocus\n        });\n\n        if (!anchor || !focus) {\n          return null;\n        }\n\n        r.anchor = anchor;\n        r.focus = focus;\n      });\n    }\n  };\n\n  var RangeRef = {\n    /**\r\n     * Transform the range ref's current value by an operation.\r\n     */\n    transform: function transform(ref, op) {\n      var current = ref.current,\n          affinity = ref.affinity;\n\n      if (current == null) {\n        return;\n      }\n\n      var path = Range.transform(current, op, {\n        affinity: affinity\n      });\n      ref.current = path;\n\n      if (path == null) {\n        ref.unref();\n      }\n    }\n  };\n\n  /*\r\n    Custom deep equal comparison for Slate nodes.\r\n\n    We don't need general purpose deep equality;\r\n    Slate only supports plain values, Arrays, and nested objects.\r\n    Complex values nested inside Arrays are not supported.\r\n\n    Slate objects are designed to be serialised, so\r\n    missing keys are deliberately normalised to undefined.\r\n   */\n\n  var isDeepEqual = function isDeepEqual(node, another) {\n    for (var key in node) {\n      var a = node[key];\n      var b = another[key];\n\n      if (isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b)) {\n        if (!isDeepEqual(a, b)) return false;\n      } else if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) return false;\n\n        for (var i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) return false;\n        }\n      } else if (a !== b) {\n        return false;\n      }\n    }\n    /*\r\n      Deep object equality is only necessary in one direction; in the reverse direction\r\n      we are only looking for keys that are missing.\r\n      As above, undefined keys are normalised to missing.\r\n    */\n\n\n    for (var _key in another) {\n      if (node[_key] === undefined && another[_key] !== undefined) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var _excluded$1 = [\"text\"],\n      _excluded2$1 = [\"anchor\", \"focus\"];\n\n  function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }\n\n  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var Text = {\n    /**\r\n     * Check if two text nodes are equal.\r\n     *\r\n     * When loose is set, the text is not compared. This is\r\n     * used to check whether sibling text nodes can be merged.\r\n     */\n    equals: function equals(text, another) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _options$loose = options.loose,\n          loose = _options$loose === void 0 ? false : _options$loose;\n\n      function omitText(obj) {\n        obj.text;\n            var rest = _objectWithoutProperties(obj, _excluded$1);\n\n        return rest;\n      }\n\n      return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);\n    },\n\n    /**\r\n     * Check if a value implements the `Text` interface.\r\n     */\n    isText: function isText(value) {\n      return isPlainObject.isPlainObject(value) && typeof value.text === 'string';\n    },\n\n    /**\r\n     * Check if a value is a list of `Text` objects.\r\n     */\n    isTextList: function isTextList(value) {\n      return Array.isArray(value) && value.every(function (val) {\n        return Text.isText(val);\n      });\n    },\n\n    /**\r\n     * Check if some props are a partial of Text.\r\n     */\n    isTextProps: function isTextProps(props) {\n      return props.text !== undefined;\n    },\n\n    /**\r\n     * Check if an text matches set of properties.\r\n     *\r\n     * Note: this is for matching custom properties, and it does not ensure that\r\n     * the `text` property are two nodes equal.\r\n     */\n    matches: function matches(text, props) {\n      for (var key in props) {\n        if (key === 'text') {\n          continue;\n        }\n\n        if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Get the leaves for a text node given decorations.\r\n     */\n    decorations: function decorations(node, _decorations) {\n      var leaves = [_objectSpread$4({}, node)];\n\n      var _iterator = _createForOfIteratorHelper$3(_decorations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dec = _step.value;\n\n          var anchor = dec.anchor,\n              focus = dec.focus,\n              rest = _objectWithoutProperties(dec, _excluded2$1);\n\n          var _Range$edges = Range.edges(dec),\n              _Range$edges2 = _slicedToArray(_Range$edges, 2),\n              start = _Range$edges2[0],\n              end = _Range$edges2[1];\n\n          var next = [];\n          var o = 0;\n\n          var _iterator2 = _createForOfIteratorHelper$3(leaves),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var leaf = _step2.value;\n              var length = leaf.text.length;\n              var offset = o;\n              o += length; // If the range encompases the entire leaf, add the range.\n\n              if (start.offset <= offset && end.offset >= o) {\n                Object.assign(leaf, rest);\n                next.push(leaf);\n                continue;\n              } // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n\n\n              if (start.offset !== end.offset && (start.offset === o || end.offset === offset) || start.offset > o || end.offset < offset || end.offset === offset && offset !== 0) {\n                next.push(leaf);\n                continue;\n              } // Otherwise we need to split the leaf, at the start, end, or both,\n              // and add the range to the middle intersecting section. Do the end\n              // split first since we don't need to update the offset that way.\n\n\n              var middle = leaf;\n              var before = void 0;\n              var after = void 0;\n\n              if (end.offset < o) {\n                var off = end.offset - offset;\n                after = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n                  text: middle.text.slice(off)\n                });\n                middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n                  text: middle.text.slice(0, off)\n                });\n              }\n\n              if (start.offset > offset) {\n                var _off = start.offset - offset;\n\n                before = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n                  text: middle.text.slice(0, _off)\n                });\n                middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n                  text: middle.text.slice(_off)\n                });\n              }\n\n              Object.assign(middle, rest);\n\n              if (before) {\n                next.push(before);\n              }\n\n              next.push(middle);\n\n              if (after) {\n                next.push(after);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          leaves = next;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return leaves;\n    }\n  };\n\n  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }\n\n  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  var applyToDraft = function applyToDraft(editor, selection, op) {\n    switch (op.type) {\n      case 'insert_node':\n        {\n          var path = op.path,\n              node = op.node;\n          var parent = Node$1.parent(editor, path);\n          var index = path[path.length - 1];\n\n          if (index > parent.children.length) {\n            throw new Error(\"Cannot apply an \\\"insert_node\\\" operation at path [\".concat(path, \"] because the destination is past the end of the node.\"));\n          }\n\n          parent.children.splice(index, 0, node);\n\n          if (selection) {\n            var _iterator = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                    point = _step$value[0],\n                    key = _step$value[1];\n\n                selection[key] = Point.transform(point, op);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'insert_text':\n        {\n          var _path = op.path,\n              offset = op.offset,\n              text = op.text;\n          if (text.length === 0) break;\n\n          var _node = Node$1.leaf(editor, _path);\n\n          var before = _node.text.slice(0, offset);\n\n          var after = _node.text.slice(offset);\n\n          _node.text = before + text + after;\n\n          if (selection) {\n            var _iterator2 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _step2$value = _slicedToArray(_step2.value, 2),\n                    _point = _step2$value[0],\n                    _key = _step2$value[1];\n\n                selection[_key] = Point.transform(_point, op);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var _path2 = op.path;\n\n          var _node2 = Node$1.get(editor, _path2);\n\n          var prevPath = Path.previous(_path2);\n          var prev = Node$1.get(editor, prevPath);\n\n          var _parent = Node$1.parent(editor, _path2);\n\n          var _index = _path2[_path2.length - 1];\n\n          if (Text.isText(_node2) && Text.isText(prev)) {\n            prev.text += _node2.text;\n          } else if (!Text.isText(_node2) && !Text.isText(prev)) {\n            var _prev$children;\n\n            (_prev$children = prev.children).push.apply(_prev$children, _toConsumableArray(_node2.children));\n          } else {\n            throw new Error(\"Cannot apply a \\\"merge_node\\\" operation at path [\".concat(_path2, \"] to nodes of different interfaces: \").concat(_node2, \" \").concat(prev));\n          }\n\n          _parent.children.splice(_index, 1);\n\n          if (selection) {\n            var _iterator3 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _step3$value = _slicedToArray(_step3.value, 2),\n                    _point2 = _step3$value[0],\n                    _key2 = _step3$value[1];\n\n                selection[_key2] = Point.transform(_point2, op);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'move_node':\n        {\n          var _path3 = op.path,\n              newPath = op.newPath;\n\n          if (Path.isAncestor(_path3, newPath)) {\n            throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n          }\n\n          var _node3 = Node$1.get(editor, _path3);\n\n          var _parent2 = Node$1.parent(editor, _path3);\n\n          var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n          // the same snapshot in time, there's a mismatch. After either\n          // removing the original position, the second step's path can be out\n          // of date. So instead of using the `op.newPath` directly, we\n          // transform `op.path` to ascertain what the `newPath` would be after\n          // the operation was applied.\n\n          _parent2.children.splice(_index2, 1);\n\n          var truePath = Path.transform(_path3, op);\n          var newParent = Node$1.get(editor, Path.parent(truePath));\n          var newIndex = truePath[truePath.length - 1];\n          newParent.children.splice(newIndex, 0, _node3);\n\n          if (selection) {\n            var _iterator4 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _step4$value = _slicedToArray(_step4.value, 2),\n                    _point3 = _step4$value[0],\n                    _key3 = _step4$value[1];\n\n                selection[_key3] = Point.transform(_point3, op);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_node':\n        {\n          var _path4 = op.path;\n          var _index3 = _path4[_path4.length - 1];\n\n          var _parent3 = Node$1.parent(editor, _path4);\n\n          _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n          // node that was removed we need to update the range or remove it.\n\n\n          if (selection) {\n            var _iterator5 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _step5$value = _slicedToArray(_step5.value, 2),\n                    _point4 = _step5$value[0],\n                    _key4 = _step5$value[1];\n\n                var result = Point.transform(_point4, op);\n\n                if (selection != null && result != null) {\n                  selection[_key4] = result;\n                } else {\n                  var _prev = void 0;\n\n                  var next = void 0;\n\n                  var _iterator6 = _createForOfIteratorHelper$2(Node$1.texts(editor)),\n                      _step6;\n\n                  try {\n                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                      var _step6$value = _slicedToArray(_step6.value, 2),\n                          n = _step6$value[0],\n                          p = _step6$value[1];\n\n                      if (Path.compare(p, _path4) === -1) {\n                        _prev = [n, p];\n                      } else {\n                        next = [n, p];\n                        break;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator6.e(err);\n                  } finally {\n                    _iterator6.f();\n                  }\n\n                  var preferNext = false;\n\n                  if (_prev && next) {\n                    if (Path.equals(next[1], _path4)) {\n                      preferNext = !Path.hasPrevious(next[1]);\n                    } else {\n                      preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;\n                    }\n                  }\n\n                  if (_prev && !preferNext) {\n                    _point4.path = _prev[1];\n                    _point4.offset = _prev[0].text.length;\n                  } else if (next) {\n                    _point4.path = next[1];\n                    _point4.offset = 0;\n                  } else {\n                    selection = null;\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'remove_text':\n        {\n          var _path5 = op.path,\n              _offset = op.offset,\n              _text = op.text;\n          if (_text.length === 0) break;\n\n          var _node4 = Node$1.leaf(editor, _path5);\n\n          var _before = _node4.text.slice(0, _offset);\n\n          var _after = _node4.text.slice(_offset + _text.length);\n\n          _node4.text = _before + _after;\n\n          if (selection) {\n            var _iterator7 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _step7$value = _slicedToArray(_step7.value, 2),\n                    _point5 = _step7$value[0],\n                    _key5 = _step7$value[1];\n\n                selection[_key5] = Point.transform(_point5, op);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n\n          break;\n        }\n\n      case 'set_node':\n        {\n          var _path6 = op.path,\n              properties = op.properties,\n              newProperties = op.newProperties;\n\n          if (_path6.length === 0) {\n            throw new Error(\"Cannot set properties on the root node!\");\n          }\n\n          var _node5 = Node$1.get(editor, _path6);\n\n          for (var _key6 in newProperties) {\n            if (_key6 === 'children' || _key6 === 'text') {\n              throw new Error(\"Cannot set the \\\"\".concat(_key6, \"\\\" property of nodes!\"));\n            }\n\n            var value = newProperties[_key6];\n\n            if (value == null) {\n              delete _node5[_key6];\n            } else {\n              _node5[_key6] = value;\n            }\n          } // properties that were previously defined, but are now missing, must be deleted\n\n\n          for (var _key7 in properties) {\n            if (!newProperties.hasOwnProperty(_key7)) {\n              delete _node5[_key7];\n            }\n          }\n\n          break;\n        }\n\n      case 'set_selection':\n        {\n          var _newProperties = op.newProperties;\n\n          if (_newProperties == null) {\n            selection = _newProperties;\n          } else {\n            if (selection == null) {\n              if (!Range.isRange(_newProperties)) {\n                throw new Error(\"Cannot apply an incomplete \\\"set_selection\\\" operation properties \".concat(JSON.stringify(_newProperties), \" when there is no current selection.\"));\n              }\n\n              selection = _objectSpread$3({}, _newProperties);\n            }\n\n            for (var _key8 in _newProperties) {\n              var _value = _newProperties[_key8];\n\n              if (_value == null) {\n                if (_key8 === 'anchor' || _key8 === 'focus') {\n                  throw new Error(\"Cannot remove the \\\"\".concat(_key8, \"\\\" selection property\"));\n                }\n\n                delete selection[_key8];\n              } else {\n                selection[_key8] = _value;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case 'split_node':\n        {\n          var _path7 = op.path,\n              position = op.position,\n              _properties = op.properties;\n\n          if (_path7.length === 0) {\n            throw new Error(\"Cannot apply a \\\"split_node\\\" operation at path [\".concat(_path7, \"] because the root node cannot be split.\"));\n          }\n\n          var _node6 = Node$1.get(editor, _path7);\n\n          var _parent4 = Node$1.parent(editor, _path7);\n\n          var _index4 = _path7[_path7.length - 1];\n          var newNode;\n\n          if (Text.isText(_node6)) {\n            var _before2 = _node6.text.slice(0, position);\n\n            var _after2 = _node6.text.slice(position);\n\n            _node6.text = _before2;\n            newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {\n              text: _after2\n            });\n          } else {\n            var _before3 = _node6.children.slice(0, position);\n\n            var _after3 = _node6.children.slice(position);\n\n            _node6.children = _before3;\n            newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {\n              children: _after3\n            });\n          }\n\n          _parent4.children.splice(_index4 + 1, 0, newNode);\n\n          if (selection) {\n            var _iterator8 = _createForOfIteratorHelper$2(Range.points(selection)),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var _step8$value = _slicedToArray(_step8.value, 2),\n                    _point6 = _step8$value[0],\n                    _key9 = _step8$value[1];\n\n                selection[_key9] = Point.transform(_point6, op);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n\n          break;\n        }\n    }\n\n    return selection;\n  };\n\n  var GeneralTransforms = {\n    /**\r\n     * Transform the editor by an operation.\r\n     */\n    transform: function transform(editor, op) {\n      editor.children = immer.createDraft(editor.children);\n      var selection = editor.selection && immer.createDraft(editor.selection);\n\n      try {\n        selection = applyToDraft(editor, selection, op);\n      } finally {\n        editor.children = immer.finishDraft(editor.children);\n\n        if (selection) {\n          editor.selection = immer.isDraft(selection) ? immer.finishDraft(selection) : selection;\n        } else {\n          editor.selection = null;\n        }\n      }\n    }\n  };\n\n  var _excluded = [\"text\"],\n      _excluded2 = [\"children\"];\n\n  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }\n\n  function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n  var NodeTransforms = {\n    /**\r\n     * Insert nodes at a specific location in the Editor.\r\n     */\n    insertNodes: function insertNodes(editor, nodes) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$hanging = options.hanging,\n            hanging = _options$hanging === void 0 ? false : _options$hanging,\n            _options$voids = options.voids,\n            voids = _options$voids === void 0 ? false : _options$voids,\n            _options$mode = options.mode,\n            mode = _options$mode === void 0 ? 'lowest' : _options$mode;\n        var at = options.at,\n            match = options.match,\n            select = options.select;\n\n        if (Node$1.isNode(nodes)) {\n          nodes = [nodes];\n        }\n\n        if (nodes.length === 0) {\n          return;\n        }\n\n        var _nodes = nodes,\n            _nodes2 = _slicedToArray(_nodes, 1),\n            node = _nodes2[0]; // By default, use the selection as the target location. But if there is\n        // no selection, insert at the end of the document since that is such a\n        // common use case when inserting from a non-selected state.\n\n\n        if (!at) {\n          if (editor.selection) {\n            at = editor.selection;\n          } else if (editor.children.length > 0) {\n            at = Editor.end(editor, []);\n          } else {\n            at = [0];\n          }\n\n          select = true;\n        }\n\n        if (select == null) {\n          select = false;\n        }\n\n        if (Range.isRange(at)) {\n          if (!hanging) {\n            at = Editor.unhangRange(editor, at);\n          }\n\n          if (Range.isCollapsed(at)) {\n            at = at.anchor;\n          } else {\n            var _Range$edges = Range.edges(at),\n                _Range$edges2 = _slicedToArray(_Range$edges, 2),\n                end = _Range$edges2[1];\n\n            var pointRef = Editor.pointRef(editor, end);\n            Transforms[\"delete\"](editor, {\n              at: at\n            });\n            at = pointRef.unref();\n          }\n        }\n\n        if (Point.isPoint(at)) {\n          if (match == null) {\n            if (Text.isText(node)) {\n              match = function match(n) {\n                return Text.isText(n);\n              };\n            } else if (editor.isInline(node)) {\n              match = function match(n) {\n                return Text.isText(n) || Editor.isInline(editor, n);\n              };\n            } else {\n              match = function match(n) {\n                return Editor.isBlock(editor, n);\n              };\n            }\n          }\n\n          var _Editor$nodes = Editor.nodes(editor, {\n            at: at.path,\n            match: match,\n            mode: mode,\n            voids: voids\n          }),\n              _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n              entry = _Editor$nodes2[0];\n\n          if (entry) {\n            var _entry = _slicedToArray(entry, 2),\n                _matchPath = _entry[1];\n\n            var pathRef = Editor.pathRef(editor, _matchPath);\n            var isAtEnd = Editor.isEnd(editor, at, _matchPath);\n            Transforms.splitNodes(editor, {\n              at: at,\n              match: match,\n              mode: mode,\n              voids: voids\n            });\n            var path = pathRef.unref();\n            at = isAtEnd ? Path.next(path) : path;\n          } else {\n            return;\n          }\n        }\n\n        var parentPath = Path.parent(at);\n        var index = at[at.length - 1];\n\n        if (!voids && Editor[\"void\"](editor, {\n          at: parentPath\n        })) {\n          return;\n        }\n\n        var _iterator = _createForOfIteratorHelper$1(nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _node = _step.value;\n\n            var _path = parentPath.concat(index);\n\n            index++;\n            editor.apply({\n              type: 'insert_node',\n              path: _path,\n              node: _node\n            });\n            at = Path.next(at);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        at = Path.previous(at);\n\n        if (select) {\n          var point = Editor.end(editor, at);\n\n          if (point) {\n            Transforms.select(editor, point);\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Lift nodes at a specific location upwards in the document tree, splitting\r\n     * their parent in two if necessary.\r\n     */\n    liftNodes: function liftNodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$at = options.at,\n            at = _options$at === void 0 ? editor.selection : _options$at,\n            _options$mode2 = options.mode,\n            mode = _options$mode2 === void 0 ? 'lowest' : _options$mode2,\n            _options$voids2 = options.voids,\n            voids = _options$voids2 === void 0 ? false : _options$voids2;\n        var match = options.match;\n\n        if (match == null) {\n          match = Path.isPath(at) ? matchPath(editor, at) : function (n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        if (!at) {\n          return;\n        }\n\n        var matches = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        });\n        var pathRefs = Array.from(matches, function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              p = _ref2[1];\n\n          return Editor.pathRef(editor, p);\n        });\n\n        for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {\n          var pathRef = _pathRefs[_i];\n          var path = pathRef.unref();\n\n          if (path.length < 2) {\n            throw new Error(\"Cannot lift node at a path [\".concat(path, \"] because it has a depth of less than `2`.\"));\n          }\n\n          var parentNodeEntry = Editor.node(editor, Path.parent(path));\n\n          var _parentNodeEntry = _slicedToArray(parentNodeEntry, 2),\n              parent = _parentNodeEntry[0],\n              parentPath = _parentNodeEntry[1];\n\n          var index = path[path.length - 1];\n          var length = parent.children.length;\n\n          if (length === 1) {\n            var toPath = Path.next(parentPath);\n            Transforms.moveNodes(editor, {\n              at: path,\n              to: toPath,\n              voids: voids\n            });\n            Transforms.removeNodes(editor, {\n              at: parentPath,\n              voids: voids\n            });\n          } else if (index === 0) {\n            Transforms.moveNodes(editor, {\n              at: path,\n              to: parentPath,\n              voids: voids\n            });\n          } else if (index === length - 1) {\n            var _toPath = Path.next(parentPath);\n\n            Transforms.moveNodes(editor, {\n              at: path,\n              to: _toPath,\n              voids: voids\n            });\n          } else {\n            var splitPath = Path.next(path);\n\n            var _toPath2 = Path.next(parentPath);\n\n            Transforms.splitNodes(editor, {\n              at: splitPath,\n              voids: voids\n            });\n            Transforms.moveNodes(editor, {\n              at: path,\n              to: _toPath2,\n              voids: voids\n            });\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Merge a node at a location with the previous node of the same depth,\r\n     * removing any empty containing nodes after the merge if necessary.\r\n     */\n    mergeNodes: function mergeNodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var match = options.match,\n            _options$at2 = options.at,\n            at = _options$at2 === void 0 ? editor.selection : _options$at2;\n        var _options$hanging2 = options.hanging,\n            hanging = _options$hanging2 === void 0 ? false : _options$hanging2,\n            _options$voids3 = options.voids,\n            voids = _options$voids3 === void 0 ? false : _options$voids3,\n            _options$mode3 = options.mode,\n            mode = _options$mode3 === void 0 ? 'lowest' : _options$mode3;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          if (Path.isPath(at)) {\n            var _Editor$parent = Editor.parent(editor, at),\n                _Editor$parent2 = _slicedToArray(_Editor$parent, 1),\n                parent = _Editor$parent2[0];\n\n            match = function match(n) {\n              return parent.children.includes(n);\n            };\n          } else {\n            match = function match(n) {\n              return Editor.isBlock(editor, n);\n            };\n          }\n        }\n\n        if (!hanging && Range.isRange(at)) {\n          at = Editor.unhangRange(editor, at);\n        }\n\n        if (Range.isRange(at)) {\n          if (Range.isCollapsed(at)) {\n            at = at.anchor;\n          } else {\n            var _Range$edges3 = Range.edges(at),\n                _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n                end = _Range$edges4[1];\n\n            var pointRef = Editor.pointRef(editor, end);\n            Transforms[\"delete\"](editor, {\n              at: at\n            });\n            at = pointRef.unref();\n\n            if (options.at == null) {\n              Transforms.select(editor, at);\n            }\n          }\n        }\n\n        var _Editor$nodes3 = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          voids: voids,\n          mode: mode\n        }),\n            _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n            current = _Editor$nodes4[0];\n\n        var prev = Editor.previous(editor, {\n          at: at,\n          match: match,\n          voids: voids,\n          mode: mode\n        });\n\n        if (!current || !prev) {\n          return;\n        }\n\n        var _current = _slicedToArray(current, 2),\n            node = _current[0],\n            path = _current[1];\n\n        var _prev = _slicedToArray(prev, 2),\n            prevNode = _prev[0],\n            prevPath = _prev[1];\n\n        if (path.length === 0 || prevPath.length === 0) {\n          return;\n        }\n\n        var newPath = Path.next(prevPath);\n        var commonPath = Path.common(path, prevPath);\n        var isPreviousSibling = Path.isSibling(path, prevPath);\n        var levels = Array.from(Editor.levels(editor, {\n          at: path\n        }), function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              n = _ref4[0];\n\n          return n;\n        }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n        // result, in which case we'll want to remove it after merging.\n\n        var emptyAncestor = Editor.above(editor, {\n          at: path,\n          mode: 'highest',\n          match: function match(n) {\n            return levels.includes(n) && hasSingleChildNest(editor, n);\n          }\n        });\n        var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);\n        var properties;\n        var position; // Ensure that the nodes are equivalent, and figure out what the position\n        // and extra properties of the merge will be.\n\n        if (Text.isText(node) && Text.isText(prevNode)) {\n          node.text;\n              var rest = _objectWithoutProperties(node, _excluded);\n\n          position = prevNode.text.length;\n          properties = rest;\n        } else if (Element$1.isElement(node) && Element$1.isElement(prevNode)) {\n          node.children;\n              var _rest = _objectWithoutProperties(node, _excluded2);\n\n          position = prevNode.children.length;\n          properties = _rest;\n        } else {\n          throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(JSON.stringify(node), \" \").concat(JSON.stringify(prevNode)));\n        } // If the node isn't already the next sibling of the previous node, move\n        // it so that it is before merging.\n\n\n        if (!isPreviousSibling) {\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: newPath,\n            voids: voids\n          });\n        } // If there was going to be an empty ancestor of the node that was merged,\n        // we remove it from the tree.\n\n\n        if (emptyRef) {\n          Transforms.removeNodes(editor, {\n            at: emptyRef.current,\n            voids: voids\n          });\n        } // If the target node that we're merging with is empty, remove it instead\n        // of merging the two. This is a common rich text editor behavior to\n        // prevent losing formatting when deleting entire nodes when you have a\n        // hanging selection.\n        // if prevNode is first child in parent,don't remove it.\n\n\n        if (Element$1.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === '' && prevPath[prevPath.length - 1] !== 0) {\n          Transforms.removeNodes(editor, {\n            at: prevPath,\n            voids: voids\n          });\n        } else {\n          editor.apply({\n            type: 'merge_node',\n            path: newPath,\n            position: position,\n            properties: properties\n          });\n        }\n\n        if (emptyRef) {\n          emptyRef.unref();\n        }\n      });\n    },\n\n    /**\r\n     * Move the nodes at a location to a new location.\r\n     */\n    moveNodes: function moveNodes(editor, options) {\n      Editor.withoutNormalizing(editor, function () {\n        var to = options.to,\n            _options$at3 = options.at,\n            at = _options$at3 === void 0 ? editor.selection : _options$at3,\n            _options$mode4 = options.mode,\n            mode = _options$mode4 === void 0 ? 'lowest' : _options$mode4,\n            _options$voids4 = options.voids,\n            voids = _options$voids4 === void 0 ? false : _options$voids4;\n        var match = options.match;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          match = Path.isPath(at) ? matchPath(editor, at) : function (n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        var toRef = Editor.pathRef(editor, to);\n        var targets = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        });\n        var pathRefs = Array.from(targets, function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              p = _ref6[1];\n\n          return Editor.pathRef(editor, p);\n        });\n\n        for (var _i2 = 0, _pathRefs2 = pathRefs; _i2 < _pathRefs2.length; _i2++) {\n          var pathRef = _pathRefs2[_i2];\n          var path = pathRef.unref();\n          var newPath = toRef.current;\n\n          if (path.length !== 0) {\n            editor.apply({\n              type: 'move_node',\n              path: path,\n              newPath: newPath\n            });\n          }\n\n          if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {\n            // When performing a sibling move to a later index, the path at the destination is shifted\n            // to before the insertion point instead of after. To ensure our group of nodes are inserted\n            // in the correct order we increment toRef to account for that\n            toRef.current = Path.next(toRef.current);\n          }\n        }\n\n        toRef.unref();\n      });\n    },\n\n    /**\r\n     * Remove the nodes at a specific location in the document.\r\n     */\n    removeNodes: function removeNodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$hanging3 = options.hanging,\n            hanging = _options$hanging3 === void 0 ? false : _options$hanging3,\n            _options$voids5 = options.voids,\n            voids = _options$voids5 === void 0 ? false : _options$voids5,\n            _options$mode5 = options.mode,\n            mode = _options$mode5 === void 0 ? 'lowest' : _options$mode5;\n        var _options$at4 = options.at,\n            at = _options$at4 === void 0 ? editor.selection : _options$at4,\n            match = options.match;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          match = Path.isPath(at) ? matchPath(editor, at) : function (n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        if (!hanging && Range.isRange(at)) {\n          at = Editor.unhangRange(editor, at);\n        }\n\n        var depths = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        });\n        var pathRefs = Array.from(depths, function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n              p = _ref8[1];\n\n          return Editor.pathRef(editor, p);\n        });\n\n        for (var _i3 = 0, _pathRefs3 = pathRefs; _i3 < _pathRefs3.length; _i3++) {\n          var pathRef = _pathRefs3[_i3];\n          var path = pathRef.unref();\n\n          if (path) {\n            var _Editor$node = Editor.node(editor, path),\n                _Editor$node2 = _slicedToArray(_Editor$node, 1),\n                node = _Editor$node2[0];\n\n            editor.apply({\n              type: 'remove_node',\n              path: path,\n              node: node\n            });\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Set new properties on the nodes at a location.\r\n     */\n    setNodes: function setNodes(editor, props) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var match = options.match,\n            _options$at5 = options.at,\n            at = _options$at5 === void 0 ? editor.selection : _options$at5;\n        var _options$hanging4 = options.hanging,\n            hanging = _options$hanging4 === void 0 ? false : _options$hanging4,\n            _options$mode6 = options.mode,\n            mode = _options$mode6 === void 0 ? 'lowest' : _options$mode6,\n            _options$split = options.split,\n            split = _options$split === void 0 ? false : _options$split,\n            _options$voids6 = options.voids,\n            voids = _options$voids6 === void 0 ? false : _options$voids6;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          match = Path.isPath(at) ? matchPath(editor, at) : function (n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        if (!hanging && Range.isRange(at)) {\n          at = Editor.unhangRange(editor, at);\n        }\n\n        if (split && Range.isRange(at)) {\n          if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {\n            // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n            // set that won't get normalized away\n            return;\n          }\n\n          var rangeRef = Editor.rangeRef(editor, at, {\n            affinity: 'inward'\n          });\n\n          var _Range$edges5 = Range.edges(at),\n              _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n              start = _Range$edges6[0],\n              end = _Range$edges6[1];\n\n          var splitMode = mode === 'lowest' ? 'lowest' : 'highest';\n          var endAtEndOfNode = Editor.isEnd(editor, end, end.path);\n          Transforms.splitNodes(editor, {\n            at: end,\n            match: match,\n            mode: splitMode,\n            voids: voids,\n            always: !endAtEndOfNode\n          });\n          var startAtStartOfNode = Editor.isStart(editor, start, start.path);\n          Transforms.splitNodes(editor, {\n            at: start,\n            match: match,\n            mode: splitMode,\n            voids: voids,\n            always: !startAtStartOfNode\n          });\n          at = rangeRef.unref();\n\n          if (options.at == null) {\n            Transforms.select(editor, at);\n          }\n        }\n\n        var _iterator2 = _createForOfIteratorHelper$1(Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        })),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _step2$value = _slicedToArray(_step2.value, 2),\n                node = _step2$value[0],\n                path = _step2$value[1];\n\n            var properties = {};\n            var newProperties = {}; // You can't set properties on the editor node.\n\n            if (path.length === 0) {\n              continue;\n            }\n\n            var hasChanges = false;\n\n            for (var k in props) {\n              if (k === 'children' || k === 'text') {\n                continue;\n              }\n\n              if (props[k] !== node[k]) {\n                hasChanges = true; // Omit new properties from the old properties list\n\n                if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list\n\n                if (props[k] != null) newProperties[k] = props[k];\n              }\n            }\n\n            if (hasChanges) {\n              editor.apply({\n                type: 'set_node',\n                path: path,\n                properties: properties,\n                newProperties: newProperties\n              });\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      });\n    },\n\n    /**\r\n     * Split the nodes at a specific location.\r\n     */\n    splitNodes: function splitNodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$mode7 = options.mode,\n            mode = _options$mode7 === void 0 ? 'lowest' : _options$mode7,\n            _options$voids7 = options.voids,\n            voids = _options$voids7 === void 0 ? false : _options$voids7;\n        var match = options.match,\n            _options$at6 = options.at,\n            at = _options$at6 === void 0 ? editor.selection : _options$at6,\n            _options$height = options.height,\n            height = _options$height === void 0 ? 0 : _options$height,\n            _options$always = options.always,\n            always = _options$always === void 0 ? false : _options$always;\n\n        if (match == null) {\n          match = function match(n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        if (Range.isRange(at)) {\n          at = deleteRange(editor, at);\n        } // If the target is a path, the default height-skipping and position\n        // counters need to account for us potentially splitting at a non-leaf.\n\n\n        if (Path.isPath(at)) {\n          var path = at;\n          var point = Editor.point(editor, path);\n\n          var _Editor$parent3 = Editor.parent(editor, path),\n              _Editor$parent4 = _slicedToArray(_Editor$parent3, 1),\n              parent = _Editor$parent4[0];\n\n          match = function match(n) {\n            return n === parent;\n          };\n\n          height = point.path.length - path.length + 1;\n          at = point;\n          always = true;\n        }\n\n        if (!at) {\n          return;\n        }\n\n        var beforeRef = Editor.pointRef(editor, at, {\n          affinity: 'backward'\n        });\n\n        var _Editor$nodes5 = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        }),\n            _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),\n            highest = _Editor$nodes6[0];\n\n        if (!highest) {\n          return;\n        }\n\n        var voidMatch = Editor[\"void\"](editor, {\n          at: at,\n          mode: 'highest'\n        });\n        var nudge = 0;\n\n        if (!voids && voidMatch) {\n          var _voidMatch = _slicedToArray(voidMatch, 2),\n              voidNode = _voidMatch[0],\n              voidPath = _voidMatch[1];\n\n          if (Element$1.isElement(voidNode) && editor.isInline(voidNode)) {\n            var after = Editor.after(editor, voidPath);\n\n            if (!after) {\n              var text = {\n                text: ''\n              };\n              var afterPath = Path.next(voidPath);\n              Transforms.insertNodes(editor, text, {\n                at: afterPath,\n                voids: voids\n              });\n              after = Editor.point(editor, afterPath);\n            }\n\n            at = after;\n            always = true;\n          }\n\n          var siblingHeight = at.path.length - voidPath.length;\n          height = siblingHeight + 1;\n          always = true;\n        }\n\n        var afterRef = Editor.pointRef(editor, at);\n        var depth = at.path.length - height;\n\n        var _highest = _slicedToArray(highest, 2),\n            highestPath = _highest[1];\n\n        var lowestPath = at.path.slice(0, depth);\n        var position = height === 0 ? at.offset : at.path[depth] + nudge;\n\n        var _iterator3 = _createForOfIteratorHelper$1(Editor.levels(editor, {\n          at: lowestPath,\n          reverse: true,\n          voids: voids\n        })),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n                node = _step3$value[0],\n                _path2 = _step3$value[1];\n\n            var split = false;\n\n            if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) {\n              break;\n            }\n\n            var _point2 = beforeRef.current;\n            var isEnd = Editor.isEnd(editor, _point2, _path2);\n\n            if (always || !beforeRef || !Editor.isEdge(editor, _point2, _path2)) {\n              split = true;\n              var properties = Node$1.extractProps(node);\n              editor.apply({\n                type: 'split_node',\n                path: _path2,\n                position: position,\n                properties: properties\n              });\n            }\n\n            position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (options.at == null) {\n          var _point = afterRef.current || Editor.end(editor, []);\n\n          Transforms.select(editor, _point);\n        }\n\n        beforeRef.unref();\n        afterRef.unref();\n      });\n    },\n\n    /**\r\n     * Unset properties on the nodes at a location.\r\n     */\n    unsetNodes: function unsetNodes(editor, props) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!Array.isArray(props)) {\n        props = [props];\n      }\n\n      var obj = {};\n\n      var _iterator4 = _createForOfIteratorHelper$1(props),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var key = _step4.value;\n          obj[key] = null;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      Transforms.setNodes(editor, obj, options);\n    },\n\n    /**\r\n     * Unwrap the nodes at a location from a parent node, splitting the parent if\r\n     * necessary to ensure that only the content in the range is unwrapped.\r\n     */\n    unwrapNodes: function unwrapNodes(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$mode8 = options.mode,\n            mode = _options$mode8 === void 0 ? 'lowest' : _options$mode8,\n            _options$split2 = options.split,\n            split = _options$split2 === void 0 ? false : _options$split2,\n            _options$voids8 = options.voids,\n            voids = _options$voids8 === void 0 ? false : _options$voids8;\n        var _options$at7 = options.at,\n            at = _options$at7 === void 0 ? editor.selection : _options$at7,\n            match = options.match;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          match = Path.isPath(at) ? matchPath(editor, at) : function (n) {\n            return Editor.isBlock(editor, n);\n          };\n        }\n\n        if (Path.isPath(at)) {\n          at = Editor.range(editor, at);\n        }\n\n        var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;\n        var matches = Editor.nodes(editor, {\n          at: at,\n          match: match,\n          mode: mode,\n          voids: voids\n        });\n        var pathRefs = Array.from(matches, function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n              p = _ref10[1];\n\n          return Editor.pathRef(editor, p);\n        } // unwrapNode will call liftNode which does not support splitting the node when nested.\n        // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n        // that wrap target node. So we reverse the order.\n        ).reverse();\n\n        var _iterator5 = _createForOfIteratorHelper$1(pathRefs),\n            _step5;\n\n        try {\n          var _loop = function _loop() {\n            var pathRef = _step5.value;\n            var path = pathRef.unref();\n\n            var _Editor$node3 = Editor.node(editor, path),\n                _Editor$node4 = _slicedToArray(_Editor$node3, 1),\n                node = _Editor$node4[0];\n\n            var range = Editor.range(editor, path);\n\n            if (split && rangeRef) {\n              range = Range.intersection(rangeRef.current, range);\n            }\n\n            Transforms.liftNodes(editor, {\n              at: range,\n              match: function match(n) {\n                return Element$1.isAncestor(node) && node.children.includes(n);\n              },\n              voids: voids\n            });\n          };\n\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        if (rangeRef) {\n          rangeRef.unref();\n        }\n      });\n    },\n\n    /**\r\n     * Wrap the nodes at a location in a new container node, splitting the edges\r\n     * of the range first to ensure that only the content in the range is wrapped.\r\n     */\n    wrapNodes: function wrapNodes(editor, element) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$mode9 = options.mode,\n            mode = _options$mode9 === void 0 ? 'lowest' : _options$mode9,\n            _options$split3 = options.split,\n            split = _options$split3 === void 0 ? false : _options$split3,\n            _options$voids9 = options.voids,\n            voids = _options$voids9 === void 0 ? false : _options$voids9;\n        var match = options.match,\n            _options$at8 = options.at,\n            at = _options$at8 === void 0 ? editor.selection : _options$at8;\n\n        if (!at) {\n          return;\n        }\n\n        if (match == null) {\n          if (Path.isPath(at)) {\n            match = matchPath(editor, at);\n          } else if (editor.isInline(element)) {\n            match = function match(n) {\n              return Editor.isInline(editor, n) || Text.isText(n);\n            };\n          } else {\n            match = function match(n) {\n              return Editor.isBlock(editor, n);\n            };\n          }\n        }\n\n        if (split && Range.isRange(at)) {\n          var _Range$edges7 = Range.edges(at),\n              _Range$edges8 = _slicedToArray(_Range$edges7, 2),\n              start = _Range$edges8[0],\n              end = _Range$edges8[1];\n\n          var rangeRef = Editor.rangeRef(editor, at, {\n            affinity: 'inward'\n          });\n          Transforms.splitNodes(editor, {\n            at: end,\n            match: match,\n            voids: voids\n          });\n          Transforms.splitNodes(editor, {\n            at: start,\n            match: match,\n            voids: voids\n          });\n          at = rangeRef.unref();\n\n          if (options.at == null) {\n            Transforms.select(editor, at);\n          }\n        }\n\n        var roots = Array.from(Editor.nodes(editor, {\n          at: at,\n          match: editor.isInline(element) ? function (n) {\n            return Editor.isBlock(editor, n);\n          } : function (n) {\n            return Editor.isEditor(n);\n          },\n          mode: 'lowest',\n          voids: voids\n        }));\n\n        for (var _i4 = 0, _roots = roots; _i4 < _roots.length; _i4++) {\n          var _roots$_i = _slicedToArray(_roots[_i4], 2),\n              rootPath = _roots$_i[1];\n\n          var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;\n\n          if (!a) {\n            continue;\n          }\n\n          var matches = Array.from(Editor.nodes(editor, {\n            at: a,\n            match: match,\n            mode: mode,\n            voids: voids\n          }));\n\n          if (matches.length > 0) {\n            var _ret = function () {\n              var _matches = _slicedToArray(matches, 1),\n                  first = _matches[0];\n\n              var last = matches[matches.length - 1];\n\n              var _first = _slicedToArray(first, 2),\n                  firstPath = _first[1];\n\n              var _last = _slicedToArray(last, 2),\n                  lastPath = _last[1];\n\n              if (firstPath.length === 0 && lastPath.length === 0) {\n                // if there's no matching parent - usually means the node is an editor - don't do anything\n                return \"continue\";\n              }\n\n              var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);\n              var range = Editor.range(editor, firstPath, lastPath);\n              var commonNodeEntry = Editor.node(editor, commonPath);\n\n              var _commonNodeEntry = _slicedToArray(commonNodeEntry, 1),\n                  commonNode = _commonNodeEntry[0];\n\n              var depth = commonPath.length + 1;\n              var wrapperPath = Path.next(lastPath.slice(0, depth));\n\n              var wrapper = _objectSpread$2(_objectSpread$2({}, element), {}, {\n                children: []\n              });\n\n              Transforms.insertNodes(editor, wrapper, {\n                at: wrapperPath,\n                voids: voids\n              });\n              Transforms.moveNodes(editor, {\n                at: range,\n                match: function match(n) {\n                  return Element$1.isAncestor(commonNode) && commonNode.children.includes(n);\n                },\n                to: wrapperPath.concat(0),\n                voids: voids\n              });\n            }();\n\n            if (_ret === \"continue\") continue;\n          }\n        }\n      });\n    }\n  };\n\n  var hasSingleChildNest = function hasSingleChildNest(editor, node) {\n    if (Element$1.isElement(node)) {\n      var element = node;\n\n      if (Editor.isVoid(editor, node)) {\n        return true;\n      } else if (element.children.length === 1) {\n        return hasSingleChildNest(editor, element.children[0]);\n      } else {\n        return false;\n      }\n    } else if (Editor.isEditor(node)) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Convert a range into a point by deleting it's content.\r\n   */\n\n\n  var deleteRange = function deleteRange(editor, range) {\n    if (Range.isCollapsed(range)) {\n      return range.anchor;\n    } else {\n      var _Range$edges9 = Range.edges(range),\n          _Range$edges10 = _slicedToArray(_Range$edges9, 2),\n          end = _Range$edges10[1];\n\n      var pointRef = Editor.pointRef(editor, end);\n      Transforms[\"delete\"](editor, {\n        at: range\n      });\n      return pointRef.unref();\n    }\n  };\n\n  var matchPath = function matchPath(editor, path) {\n    var _Editor$node5 = Editor.node(editor, path),\n        _Editor$node6 = _slicedToArray(_Editor$node5, 1),\n        node = _Editor$node6[0];\n\n    return function (n) {\n      return n === node;\n    };\n  };\n\n  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var SelectionTransforms = {\n    /**\r\n     * Collapse the selection.\r\n     */\n    collapse: function collapse(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$edge = options.edge,\n          edge = _options$edge === void 0 ? 'anchor' : _options$edge;\n      var selection = editor.selection;\n\n      if (!selection) {\n        return;\n      } else if (edge === 'anchor') {\n        Transforms.select(editor, selection.anchor);\n      } else if (edge === 'focus') {\n        Transforms.select(editor, selection.focus);\n      } else if (edge === 'start') {\n        var _Range$edges = Range.edges(selection),\n            _Range$edges2 = _slicedToArray(_Range$edges, 1),\n            start = _Range$edges2[0];\n\n        Transforms.select(editor, start);\n      } else if (edge === 'end') {\n        var _Range$edges3 = Range.edges(selection),\n            _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n            end = _Range$edges4[1];\n\n        Transforms.select(editor, end);\n      }\n    },\n\n    /**\r\n     * Unset the selection.\r\n     */\n    deselect: function deselect(editor) {\n      var selection = editor.selection;\n\n      if (selection) {\n        editor.apply({\n          type: 'set_selection',\n          properties: selection,\n          newProperties: null\n        });\n      }\n    },\n\n    /**\r\n     * Move the selection's point forward or backward.\r\n     */\n    move: function move(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var selection = editor.selection;\n      var _options$distance = options.distance,\n          distance = _options$distance === void 0 ? 1 : _options$distance,\n          _options$unit = options.unit,\n          unit = _options$unit === void 0 ? 'character' : _options$unit,\n          _options$reverse = options.reverse,\n          reverse = _options$reverse === void 0 ? false : _options$reverse;\n      var _options$edge2 = options.edge,\n          edge = _options$edge2 === void 0 ? null : _options$edge2;\n\n      if (!selection) {\n        return;\n      }\n\n      if (edge === 'start') {\n        edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n      }\n\n      if (edge === 'end') {\n        edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n      }\n\n      var anchor = selection.anchor,\n          focus = selection.focus;\n      var opts = {\n        distance: distance,\n        unit: unit\n      };\n      var props = {};\n\n      if (edge == null || edge === 'anchor') {\n        var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);\n\n        if (point) {\n          props.anchor = point;\n        }\n      }\n\n      if (edge == null || edge === 'focus') {\n        var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);\n\n        if (_point) {\n          props.focus = _point;\n        }\n      }\n\n      Transforms.setSelection(editor, props);\n    },\n\n    /**\r\n     * Set the selection to a new value.\r\n     */\n    select: function select(editor, target) {\n      var selection = editor.selection;\n      target = Editor.range(editor, target);\n\n      if (selection) {\n        Transforms.setSelection(editor, target);\n        return;\n      }\n\n      if (!Range.isRange(target)) {\n        throw new Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(JSON.stringify(target)));\n      }\n\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: target\n      });\n    },\n\n    /**\r\n     * Set new properties on one of the selection's points.\r\n     */\n    setPoint: function setPoint(editor, props) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var selection = editor.selection;\n      var _options$edge3 = options.edge,\n          edge = _options$edge3 === void 0 ? 'both' : _options$edge3;\n\n      if (!selection) {\n        return;\n      }\n\n      if (edge === 'start') {\n        edge = Range.isBackward(selection) ? 'focus' : 'anchor';\n      }\n\n      if (edge === 'end') {\n        edge = Range.isBackward(selection) ? 'anchor' : 'focus';\n      }\n\n      var anchor = selection.anchor,\n          focus = selection.focus;\n      var point = edge === 'anchor' ? anchor : focus;\n      Transforms.setSelection(editor, _defineProperty({}, edge === 'anchor' ? 'anchor' : 'focus', _objectSpread$1(_objectSpread$1({}, point), props)));\n    },\n\n    /**\r\n     * Set new properties on the selection.\r\n     */\n    setSelection: function setSelection(editor, props) {\n      var selection = editor.selection;\n      var oldProps = {};\n      var newProps = {};\n\n      if (!selection) {\n        return;\n      }\n\n      for (var k in props) {\n        if (k === 'anchor' && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === 'focus' && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== 'anchor' && k !== 'focus' && props[k] !== selection[k]) {\n          oldProps[k] = selection[k];\n          newProps[k] = props[k];\n        }\n      }\n\n      if (Object.keys(oldProps).length > 0) {\n        editor.apply({\n          type: 'set_selection',\n          properties: oldProps,\n          newProperties: newProps\n        });\n      }\n    }\n  };\n\n  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n  var TextTransforms = {\n    /**\r\n     * Delete content in the editor.\r\n     */\n    \"delete\": function _delete(editor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$reverse = options.reverse,\n            reverse = _options$reverse === void 0 ? false : _options$reverse,\n            _options$unit = options.unit,\n            unit = _options$unit === void 0 ? 'character' : _options$unit,\n            _options$distance = options.distance,\n            distance = _options$distance === void 0 ? 1 : _options$distance,\n            _options$voids = options.voids,\n            voids = _options$voids === void 0 ? false : _options$voids;\n        var _options$at = options.at,\n            at = _options$at === void 0 ? editor.selection : _options$at,\n            _options$hanging = options.hanging,\n            hanging = _options$hanging === void 0 ? false : _options$hanging;\n\n        if (!at) {\n          return;\n        }\n\n        if (Range.isRange(at) && Range.isCollapsed(at)) {\n          at = at.anchor;\n        }\n\n        if (Point.isPoint(at)) {\n          var furthestVoid = Editor[\"void\"](editor, {\n            at: at,\n            mode: 'highest'\n          });\n\n          if (!voids && furthestVoid) {\n            var _furthestVoid = _slicedToArray(furthestVoid, 2),\n                voidPath = _furthestVoid[1];\n\n            at = voidPath;\n          } else {\n            var opts = {\n              unit: unit,\n              distance: distance\n            };\n            var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);\n            at = {\n              anchor: at,\n              focus: target\n            };\n            hanging = true;\n          }\n        }\n\n        if (Path.isPath(at)) {\n          Transforms.removeNodes(editor, {\n            at: at,\n            voids: voids\n          });\n          return;\n        }\n\n        if (Range.isCollapsed(at)) {\n          return;\n        }\n\n        if (!hanging) {\n          var _Range$edges = Range.edges(at),\n              _Range$edges2 = _slicedToArray(_Range$edges, 2),\n              _end = _Range$edges2[1];\n\n          var endOfDoc = Editor.end(editor, []);\n\n          if (!Point.equals(_end, endOfDoc)) {\n            at = Editor.unhangRange(editor, at, {\n              voids: voids\n            });\n          }\n        }\n\n        var _Range$edges3 = Range.edges(at),\n            _Range$edges4 = _slicedToArray(_Range$edges3, 2),\n            start = _Range$edges4[0],\n            end = _Range$edges4[1];\n\n        var startBlock = Editor.above(editor, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          },\n          at: start,\n          voids: voids\n        });\n        var endBlock = Editor.above(editor, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          },\n          at: end,\n          voids: voids\n        });\n        var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);\n        var isSingleText = Path.equals(start.path, end.path);\n        var startVoid = voids ? null : Editor[\"void\"](editor, {\n          at: start,\n          mode: 'highest'\n        });\n        var endVoid = voids ? null : Editor[\"void\"](editor, {\n          at: end,\n          mode: 'highest'\n        }); // If the start or end points are inside an inline void, nudge them out.\n\n        if (startVoid) {\n          var before = Editor.before(editor, start);\n\n          if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n            start = before;\n          }\n        }\n\n        if (endVoid) {\n          var after = Editor.after(editor, end);\n\n          if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n            end = after;\n          }\n        } // Get the highest nodes that are completely inside the range, as well as\n        // the start and end nodes.\n\n\n        var matches = [];\n        var lastPath;\n\n        var _iterator = _createForOfIteratorHelper(Editor.nodes(editor, {\n          at: at,\n          voids: voids\n        })),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var entry = _step.value;\n\n            var _entry = _slicedToArray(entry, 2),\n                _node2 = _entry[0],\n                _path3 = _entry[1];\n\n            if (lastPath && Path.compare(_path3, lastPath) === 0) {\n              continue;\n            }\n\n            if (!voids && Editor.isVoid(editor, _node2) || !Path.isCommon(_path3, start.path) && !Path.isCommon(_path3, end.path)) {\n              matches.push(entry);\n              lastPath = _path3;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var pathRefs = Array.from(matches, function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              p = _ref2[1];\n\n          return Editor.pathRef(editor, p);\n        });\n        var startRef = Editor.pointRef(editor, start);\n        var endRef = Editor.pointRef(editor, end);\n\n        if (!isSingleText && !startVoid) {\n          var _point = startRef.current;\n\n          var _Editor$leaf = Editor.leaf(editor, _point),\n              _Editor$leaf2 = _slicedToArray(_Editor$leaf, 1),\n              node = _Editor$leaf2[0];\n\n          var path = _point.path;\n          var _start = start,\n              offset = _start.offset;\n          var text = node.text.slice(offset);\n          if (text.length > 0) editor.apply({\n            type: 'remove_text',\n            path: path,\n            offset: offset,\n            text: text\n          });\n        }\n\n        for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {\n          var pathRef = _pathRefs[_i];\n\n          var _path = pathRef.unref();\n\n          Transforms.removeNodes(editor, {\n            at: _path,\n            voids: voids\n          });\n        }\n\n        if (!endVoid) {\n          var _point2 = endRef.current;\n\n          var _Editor$leaf3 = Editor.leaf(editor, _point2),\n              _Editor$leaf4 = _slicedToArray(_Editor$leaf3, 1),\n              _node = _Editor$leaf4[0];\n\n          var _path2 = _point2.path;\n\n          var _offset = isSingleText ? start.offset : 0;\n\n          var _text = _node.text.slice(_offset, end.offset);\n\n          if (_text.length > 0) editor.apply({\n            type: 'remove_text',\n            path: _path2,\n            offset: _offset,\n            text: _text\n          });\n        }\n\n        if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n          Transforms.mergeNodes(editor, {\n            at: endRef.current,\n            hanging: true,\n            voids: voids\n          });\n        }\n\n        var point = reverse ? startRef.unref() || endRef.unref() : endRef.unref() || startRef.unref();\n\n        if (options.at == null && point) {\n          Transforms.select(editor, point);\n        }\n      });\n    },\n\n    /**\r\n     * Insert a fragment at a specific location in the editor.\r\n     */\n    insertFragment: function insertFragment(editor, fragment) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$hanging2 = options.hanging,\n            hanging = _options$hanging2 === void 0 ? false : _options$hanging2,\n            _options$voids2 = options.voids,\n            voids = _options$voids2 === void 0 ? false : _options$voids2;\n        var _options$at2 = options.at,\n            at = _options$at2 === void 0 ? editor.selection : _options$at2;\n\n        if (!fragment.length) {\n          return;\n        }\n\n        if (!at) {\n          return;\n        } else if (Range.isRange(at)) {\n          if (!hanging) {\n            at = Editor.unhangRange(editor, at);\n          }\n\n          if (Range.isCollapsed(at)) {\n            at = at.anchor;\n          } else {\n            var _Range$edges5 = Range.edges(at),\n                _Range$edges6 = _slicedToArray(_Range$edges5, 2),\n                end = _Range$edges6[1];\n\n            if (!voids && Editor[\"void\"](editor, {\n              at: end\n            })) {\n              return;\n            }\n\n            var pointRef = Editor.pointRef(editor, end);\n            Transforms[\"delete\"](editor, {\n              at: at\n            });\n            at = pointRef.unref();\n          }\n        } else if (Path.isPath(at)) {\n          at = Editor.start(editor, at);\n        }\n\n        if (!voids && Editor[\"void\"](editor, {\n          at: at\n        })) {\n          return;\n        } // If the insert point is at the edge of an inline node, move it outside\n        // instead since it will need to be split otherwise.\n\n\n        var inlineElementMatch = Editor.above(editor, {\n          at: at,\n          match: function match(n) {\n            return Editor.isInline(editor, n);\n          },\n          mode: 'highest',\n          voids: voids\n        });\n\n        if (inlineElementMatch) {\n          var _inlineElementMatch = _slicedToArray(inlineElementMatch, 2),\n              _inlinePath = _inlineElementMatch[1];\n\n          if (Editor.isEnd(editor, at, _inlinePath)) {\n            var after = Editor.after(editor, _inlinePath);\n            at = after;\n          } else if (Editor.isStart(editor, at, _inlinePath)) {\n            var before = Editor.before(editor, _inlinePath);\n            at = before;\n          }\n        }\n\n        var blockMatch = Editor.above(editor, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          },\n          at: at,\n          voids: voids\n        });\n\n        var _blockMatch = _slicedToArray(blockMatch, 2),\n            blockPath = _blockMatch[1];\n\n        var isBlockStart = Editor.isStart(editor, at, blockPath);\n        var isBlockEnd = Editor.isEnd(editor, at, blockPath);\n        var isBlockEmpty = isBlockStart && isBlockEnd;\n        var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;\n        var mergeEnd = !isBlockEnd;\n\n        var _Node$first = Node$1.first({\n          children: fragment\n        }, []),\n            _Node$first2 = _slicedToArray(_Node$first, 2),\n            firstPath = _Node$first2[1];\n\n        var _Node$last = Node$1.last({\n          children: fragment\n        }, []),\n            _Node$last2 = _slicedToArray(_Node$last, 2),\n            lastPath = _Node$last2[1];\n\n        var matches = [];\n\n        var matcher = function matcher(_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              n = _ref4[0],\n              p = _ref4[1];\n\n          var isRoot = p.length === 0;\n\n          if (isRoot) {\n            return false;\n          }\n\n          if (isBlockEmpty) {\n            return true;\n          }\n\n          if (mergeStart && Path.isAncestor(p, firstPath) && Element$1.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n            return false;\n          }\n\n          if (mergeEnd && Path.isAncestor(p, lastPath) && Element$1.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n            return false;\n          }\n\n          return true;\n        };\n\n        var _iterator2 = _createForOfIteratorHelper(Node$1.nodes({\n          children: fragment\n        }, {\n          pass: matcher\n        })),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var entry = _step2.value;\n\n            if (matcher(entry)) {\n              matches.push(entry);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var starts = [];\n        var middles = [];\n        var ends = [];\n        var starting = true;\n        var hasBlocks = false;\n\n        for (var _i2 = 0, _matches = matches; _i2 < _matches.length; _i2++) {\n          var _matches$_i = _slicedToArray(_matches[_i2], 1),\n              node = _matches$_i[0];\n\n          if (Element$1.isElement(node) && !editor.isInline(node)) {\n            starting = false;\n            hasBlocks = true;\n            middles.push(node);\n          } else if (starting) {\n            starts.push(node);\n          } else {\n            ends.push(node);\n          }\n        }\n\n        var _Editor$nodes = Editor.nodes(editor, {\n          at: at,\n          match: function match(n) {\n            return Text.isText(n) || Editor.isInline(editor, n);\n          },\n          mode: 'highest',\n          voids: voids\n        }),\n            _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n            inlineMatch = _Editor$nodes2[0];\n\n        var _inlineMatch = _slicedToArray(inlineMatch, 2),\n            inlinePath = _inlineMatch[1];\n\n        var isInlineStart = Editor.isStart(editor, at, inlinePath);\n        var isInlineEnd = Editor.isEnd(editor, at, inlinePath);\n        var middleRef = Editor.pathRef(editor, isBlockEnd ? Path.next(blockPath) : blockPath);\n        var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);\n        var blockPathRef = Editor.pathRef(editor, blockPath);\n        Transforms.splitNodes(editor, {\n          at: at,\n          match: function match(n) {\n            return hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n);\n          },\n          mode: hasBlocks ? 'lowest' : 'highest',\n          voids: voids\n        });\n        var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);\n        Transforms.insertNodes(editor, starts, {\n          at: startRef.current,\n          match: function match(n) {\n            return Text.isText(n) || Editor.isInline(editor, n);\n          },\n          mode: 'highest',\n          voids: voids\n        });\n\n        if (isBlockEmpty && middles.length) {\n          Transforms[\"delete\"](editor, {\n            at: blockPathRef.unref(),\n            voids: voids\n          });\n        }\n\n        Transforms.insertNodes(editor, middles, {\n          at: middleRef.current,\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          },\n          mode: 'lowest',\n          voids: voids\n        });\n        Transforms.insertNodes(editor, ends, {\n          at: endRef.current,\n          match: function match(n) {\n            return Text.isText(n) || Editor.isInline(editor, n);\n          },\n          mode: 'highest',\n          voids: voids\n        });\n\n        if (!options.at) {\n          var path;\n\n          if (ends.length > 0) {\n            path = Path.previous(endRef.current);\n          } else if (middles.length > 0) {\n            path = Path.previous(middleRef.current);\n          } else {\n            path = Path.previous(startRef.current);\n          }\n\n          var _end2 = Editor.end(editor, path);\n\n          Transforms.select(editor, _end2);\n        }\n\n        startRef.unref();\n        middleRef.unref();\n        endRef.unref();\n      });\n    },\n\n    /**\r\n     * Insert a string of text in the Editor.\r\n     */\n    insertText: function insertText(editor, text) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Editor.withoutNormalizing(editor, function () {\n        var _options$voids3 = options.voids,\n            voids = _options$voids3 === void 0 ? false : _options$voids3;\n        var _options$at3 = options.at,\n            at = _options$at3 === void 0 ? editor.selection : _options$at3;\n\n        if (!at) {\n          return;\n        }\n\n        if (Path.isPath(at)) {\n          at = Editor.range(editor, at);\n        }\n\n        if (Range.isRange(at)) {\n          if (Range.isCollapsed(at)) {\n            at = at.anchor;\n          } else {\n            var end = Range.end(at);\n\n            if (!voids && Editor[\"void\"](editor, {\n              at: end\n            })) {\n              return;\n            }\n\n            var pointRef = Editor.pointRef(editor, end);\n            Transforms[\"delete\"](editor, {\n              at: at,\n              voids: voids\n            });\n            at = pointRef.unref();\n            Transforms.setSelection(editor, {\n              anchor: at,\n              focus: at\n            });\n          }\n        }\n\n        if (!voids && Editor[\"void\"](editor, {\n          at: at\n        })) {\n          return;\n        }\n\n        var _at = at,\n            path = _at.path,\n            offset = _at.offset;\n        if (text.length > 0) editor.apply({\n          type: 'insert_text',\n          path: path,\n          offset: offset,\n          text: text\n        });\n      });\n    }\n  };\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n  var Transforms = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);\n\n  var Editor_1 = Editor;\n  var Element_1 = Element$1;\n  var Location_1 = Location;\n  var Node_1 = Node$1;\n  var Operation_1 = Operation;\n  var Path_1 = Path;\n  var PathRef_1 = PathRef;\n  var Point_1 = Point;\n  var PointRef_1 = PointRef;\n  var Range_1 = Range;\n  var RangeRef_1 = RangeRef;\n  var Span_1 = Span;\n  var Text_1 = Text;\n  var Transforms_1 = Transforms;\n  var createEditor_1 = createEditor$1;\n\n\n  var dist$7 = /*#__PURE__*/Object.defineProperty({\n  \tEditor: Editor_1,\n  \tElement: Element_1,\n  \tLocation: Location_1,\n  \tNode: Node_1,\n  \tOperation: Operation_1,\n  \tPath: Path_1,\n  \tPathRef: PathRef_1,\n  \tPoint: Point_1,\n  \tPointRef: PointRef_1,\n  \tRange: Range_1,\n  \tRangeRef: RangeRef_1,\n  \tSpan: Span_1,\n  \tText: Text_1,\n  \tTransforms: Transforms_1,\n  \tcreateEditor: createEditor_1\n  }, '__esModule', {value: true});\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n  /** `Object#toString` result references. */\n  var argsTag$1 = '[object Arguments]',\n      funcTag$1 = '[object Function]',\n      genTag$1 = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      weakMapTag = '[object WeakMap]';\n\n  var dataViewTag = '[object DataView]';\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint$1 = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange$1 = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange$1 = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n      rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20f0',\n      rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n  /** Used to compose unicode capture groups. */\n  var rsAstral$1 = '[' + rsAstralRange$1 + ']',\n      rsCombo$1 = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']',\n      rsFitz$1 = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',\n      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',\n      rsRegional$1 = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair$1 = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsZWJ$1 = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var reOptMod$1 = rsModifier$1 + '?',\n      rsOptVar$1 = '[' + rsVarRange$1 + ']?',\n      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',\n      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,\n      rsSymbol$1 = '(?:' + [rsNonAstral$1 + rsCombo$1 + '?', rsCombo$1, rsRegional$1, rsSurrPair$1, rsAstral$1].join('|') + ')';\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode$1 = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol$1 + rsSeq$1, 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode$1 = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboMarksRange$1 + rsComboSymbolsRange$1 + rsVarRange$1 + ']');\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray$1(string) {\n    return string.split('');\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes$1(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode$1(string) {\n    return reHasUnicode$1.test(string);\n  }\n\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n    return result;\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg$1(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray$1(string) {\n    return hasUnicode$1(string)\n      ? unicodeToArray$1(string)\n      : asciiToArray$1(string);\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray$1(string) {\n    return string.match(reUnicode$1) || [];\n  }\n\n  /** Used for built-in method references. */\n  var funcProto = Function.prototype,\n      objectProto$4 = Object.prototype;\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root$3['__core-js_shared__'];\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? ('Symbol(src)_1.' + uid) : '';\n  }());\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$2 = objectProto$4.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$4 = objectProto$4.toString;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /** Built-in value references. */\n  var Symbol$2 = root$3.Symbol,\n      iteratorSymbol = Symbol$2 ? Symbol$2.iterator : undefined,\n      propertyIsEnumerable$1 = objectProto$4.propertyIsEnumerable;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys$1 = overArg$1(Object.keys, Object);\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root$3, 'DataView'),\n      Map$1 = getNative(root$3, 'Map'),\n      Promise$1 = getNative(root$3, 'Promise'),\n      Set$1 = getNative(root$3, 'Set'),\n      WeakMap$1 = getNative(root$3, 'WeakMap');\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map$1),\n      promiseCtorString = toSource(Promise$1),\n      setCtorString = toSource(Set$1),\n      weakMapCtorString = toSource(WeakMap$1);\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys$1(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray$1(value) || isArguments$1(value))\n      ? baseTimes$1(value.length, String)\n      : [];\n\n    var length = result.length,\n        skipIndexes = !!length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$2.call(value, key)) &&\n          !(skipIndexes && (key == 'length' || isIndex$1(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `getTag`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    return objectToString$4.call(value);\n  }\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject$3(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = (isFunction$1(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys$1(object) {\n    if (!isPrototype$1(object)) {\n      return nativeKeys$1(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$2.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function copyArray(source, array) {\n    var index = -1,\n        length = source.length;\n\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag;\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11,\n  // for data views in Edge < 14, and promises in Node.js.\n  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n      (Map$1 && getTag(new Map$1) != mapTag) ||\n      (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||\n      (Set$1 && getTag(new Set$1) != setTag) ||\n      (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag)) {\n    getTag = function(value) {\n      var result = objectToString$4.call(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : undefined;\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString: return dataViewTag;\n          case mapCtorString: return mapTag;\n          case promiseCtorString: return promiseTag;\n          case setCtorString: return setTag;\n          case weakMapCtorString: return weakMapTag;\n        }\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex$1(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint$1.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype$1(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;\n\n    return value === proto;\n  }\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to process.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n      try {\n        return (func + '');\n      } catch (e) {}\n    }\n    return '';\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments$1(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject$1(value) && hasOwnProperty$2.call(value, 'callee') &&\n      (!propertyIsEnumerable$1.call(value, 'callee') || objectToString$4.call(value) == argsTag$1);\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray$1 = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike$1(value) {\n    return value != null && isLength$1(value.length) && !isFunction$1(value);\n  }\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject$1(value) {\n    return isObjectLike$4(value) && isArrayLike$1(value);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction$1(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject$3(value) ? objectToString$4.call(value) : '';\n    return tag == funcTag$1 || tag == genTag$1;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength$1(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$3(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$4(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString(value) {\n    return typeof value == 'string' ||\n      (!isArray$1(value) && isObjectLike$4(value) && objectToString$4.call(value) == stringTag);\n  }\n\n  /**\n   * Converts `value` to an array.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {Array} Returns the converted array.\n   * @example\n   *\n   * _.toArray({ 'a': 1, 'b': 2 });\n   * // => [1, 2]\n   *\n   * _.toArray('abc');\n   * // => ['a', 'b', 'c']\n   *\n   * _.toArray(1);\n   * // => []\n   *\n   * _.toArray(null);\n   * // => []\n   */\n  function toArray(value) {\n    if (!value) {\n      return [];\n    }\n    if (isArrayLike$1(value)) {\n      return isString(value) ? stringToArray$1(value) : copyArray(value);\n    }\n    if (iteratorSymbol && value[iteratorSymbol]) {\n      return iteratorToArray(value[iteratorSymbol]());\n    }\n    var tag = getTag(value),\n        func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n    return func(value);\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys$1(object) {\n    return isArrayLike$1(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);\n  }\n\n  /**\n   * Creates an array of the own enumerable string keyed property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return object ? baseValues(object, keys$1(object)) : [];\n  }\n\n  var lodash_toarray = toArray;\n\n  /**\n   * SSR Window 3.0.0\n   * Better handling for window object in SSR environment\n   * https://github.com/nolimits4web/ssr-window\n   *\n   * Copyright 2020, Vladimir Kharlampidi\n   *\n   * Licensed under MIT\n   *\n   * Released on: November 9, 2020\n   */\n\n  var ssrWindow_umd = createCommonjsModule$1(function (module, exports) {\n  (function (global, factory) {\n      factory(exports) ;\n  }(commonjsGlobal, (function (exports) {\n      /* eslint-disable no-param-reassign */\n      function isObject(obj) {\n          return (obj !== null &&\n              typeof obj === 'object' &&\n              'constructor' in obj &&\n              obj.constructor === Object);\n      }\n      function extend(target, src) {\n          if (target === void 0) { target = {}; }\n          if (src === void 0) { src = {}; }\n          Object.keys(src).forEach(function (key) {\n              if (typeof target[key] === 'undefined')\n                  target[key] = src[key];\n              else if (isObject(src[key]) &&\n                  isObject(target[key]) &&\n                  Object.keys(src[key]).length > 0) {\n                  extend(target[key], src[key]);\n              }\n          });\n      }\n\n      var ssrDocument = {\n          body: {},\n          addEventListener: function () { },\n          removeEventListener: function () { },\n          activeElement: {\n              blur: function () { },\n              nodeName: '',\n          },\n          querySelector: function () {\n              return null;\n          },\n          querySelectorAll: function () {\n              return [];\n          },\n          getElementById: function () {\n              return null;\n          },\n          createEvent: function () {\n              return {\n                  initEvent: function () { },\n              };\n          },\n          createElement: function () {\n              return {\n                  children: [],\n                  childNodes: [],\n                  style: {},\n                  setAttribute: function () { },\n                  getElementsByTagName: function () {\n                      return [];\n                  },\n              };\n          },\n          createElementNS: function () {\n              return {};\n          },\n          importNode: function () {\n              return null;\n          },\n          location: {\n              hash: '',\n              host: '',\n              hostname: '',\n              href: '',\n              origin: '',\n              pathname: '',\n              protocol: '',\n              search: '',\n          },\n      };\n      function getDocument() {\n          var doc = typeof document !== 'undefined' ? document : {};\n          extend(doc, ssrDocument);\n          return doc;\n      }\n\n      var ssrWindow = {\n          document: ssrDocument,\n          navigator: {\n              userAgent: '',\n          },\n          location: {\n              hash: '',\n              host: '',\n              hostname: '',\n              href: '',\n              origin: '',\n              pathname: '',\n              protocol: '',\n              search: '',\n          },\n          history: {\n              replaceState: function () { },\n              pushState: function () { },\n              go: function () { },\n              back: function () { },\n          },\n          CustomEvent: function CustomEvent() {\n              return this;\n          },\n          addEventListener: function () { },\n          removeEventListener: function () { },\n          getComputedStyle: function () {\n              return {\n                  getPropertyValue: function () {\n                      return '';\n                  },\n              };\n          },\n          Image: function () { },\n          Date: function () { },\n          screen: {},\n          setTimeout: function () { },\n          clearTimeout: function () { },\n          matchMedia: function () {\n              return {};\n          },\n          requestAnimationFrame: function (callback) {\n              if (typeof setTimeout === 'undefined') {\n                  callback();\n                  return null;\n              }\n              return setTimeout(callback, 0);\n          },\n          cancelAnimationFrame: function (id) {\n              if (typeof setTimeout === 'undefined') {\n                  return;\n              }\n              clearTimeout(id);\n          },\n      };\n      function getWindow() {\n          var win = typeof window !== 'undefined' ? window : {};\n          extend(win, ssrWindow);\n          return win;\n      }\n\n      exports.extend = extend;\n      exports.getDocument = getDocument;\n      exports.getWindow = getWindow;\n      exports.ssrDocument = ssrDocument;\n      exports.ssrWindow = ssrWindow;\n\n      Object.defineProperty(exports, '__esModule', { value: true });\n\n  })));\n\n  });\n\n  /**\n   * Dom7 3.0.0\n   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n   * https://framework7.io/docs/dom7.html\n   *\n   * Copyright 2020, Vladimir Kharlampidi\n   *\n   * Licensed under MIT\n   *\n   * Released on: November 9, 2020\n   */\n\n\n\n\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  }\n\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !_isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== \"function\") {\n        throw new TypeError(\"Super expression must either be null or a function\");\n      }\n\n      if (typeof _cache !== \"undefined\") {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return _setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /* eslint-disable no-proto */\n  function makeReactive(obj) {\n    var proto = obj.__proto__;\n    Object.defineProperty(obj, '__proto__', {\n      get: function get() {\n        return proto;\n      },\n      set: function set(value) {\n        proto.__proto__ = value;\n      }\n    });\n  }\n\n  var Dom7 = /*#__PURE__*/function (_Array) {\n    _inheritsLoose(Dom7, _Array);\n\n    function Dom7(items) {\n      var _this;\n\n      _this = _Array.call.apply(_Array, [this].concat(items)) || this;\n      makeReactive(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    return Dom7;\n  }( /*#__PURE__*/_wrapNativeSuper(Array));\n\n  function arrayFlat(arr) {\n    if (arr === void 0) {\n      arr = [];\n    }\n\n    var res = [];\n    arr.forEach(function (el) {\n      if (Array.isArray(el)) {\n        res.push.apply(res, arrayFlat(el));\n      } else {\n        res.push(el);\n      }\n    });\n    return res;\n  }\n  function arrayFilter(arr, callback) {\n    return Array.prototype.filter.call(arr, callback);\n  }\n  function arrayUnique(arr) {\n    var uniqueArray = [];\n\n    for (var i = 0; i < arr.length; i += 1) {\n      if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n    }\n\n    return uniqueArray;\n  }\n  function toCamelCase(string) {\n    return string.toLowerCase().replace(/-(.)/g, function (match, group) {\n      return group.toUpperCase();\n    });\n  }\n\n  function qsa(selector, context) {\n    if (typeof selector !== 'string') {\n      return [selector];\n    }\n\n    var a = [];\n    var res = context.querySelectorAll(selector);\n\n    for (var i = 0; i < res.length; i += 1) {\n      a.push(res[i]);\n    }\n\n    return a;\n  }\n\n  function $(selector, context) {\n    var window = ssrWindow_umd.getWindow();\n    var document = ssrWindow_umd.getDocument();\n    var arr = [];\n\n    if (!context && selector instanceof Dom7) {\n      return selector;\n    }\n\n    if (!selector) {\n      return new Dom7(arr);\n    }\n\n    if (typeof selector === 'string') {\n      var html = selector.trim();\n\n      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n        var toCreate = 'div';\n        if (html.indexOf('<li') === 0) toCreate = 'ul';\n        if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n        if (html.indexOf('<tbody') === 0) toCreate = 'table';\n        if (html.indexOf('<option') === 0) toCreate = 'select';\n        var tempParent = document.createElement(toCreate);\n        tempParent.innerHTML = html;\n\n        for (var i = 0; i < tempParent.childNodes.length; i += 1) {\n          arr.push(tempParent.childNodes[i]);\n        }\n      } else {\n        arr = qsa(selector.trim(), context || document);\n      } // arr = qsa(selector, document);\n\n    } else if (selector.nodeType || selector === window || selector === document) {\n      arr.push(selector);\n    } else if (Array.isArray(selector)) {\n      if (selector instanceof Dom7) return selector;\n      arr = selector;\n    }\n\n    return new Dom7(arrayUnique(arr));\n  }\n\n  $.fn = Dom7.prototype;\n\n  function addClass() {\n    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n      classes[_key] = arguments[_key];\n    }\n\n    var classNames = arrayFlat(classes.map(function (c) {\n      return c.split(' ');\n    }));\n    this.forEach(function (el) {\n      var _el$classList;\n\n      (_el$classList = el.classList).add.apply(_el$classList, classNames);\n    });\n    return this;\n  }\n\n  function removeClass() {\n    for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      classes[_key2] = arguments[_key2];\n    }\n\n    var classNames = arrayFlat(classes.map(function (c) {\n      return c.split(' ');\n    }));\n    this.forEach(function (el) {\n      var _el$classList2;\n\n      (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);\n    });\n    return this;\n  }\n\n  function toggleClass() {\n    for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      classes[_key3] = arguments[_key3];\n    }\n\n    var classNames = arrayFlat(classes.map(function (c) {\n      return c.split(' ');\n    }));\n    this.forEach(function (el) {\n      classNames.forEach(function (className) {\n        el.classList.toggle(className);\n      });\n    });\n  }\n\n  function hasClass() {\n    for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      classes[_key4] = arguments[_key4];\n    }\n\n    var classNames = arrayFlat(classes.map(function (c) {\n      return c.split(' ');\n    }));\n    return arrayFilter(this, function (el) {\n      return classNames.filter(function (className) {\n        return el.classList.contains(className);\n      }).length > 0;\n    }).length > 0;\n  }\n\n  function attr(attrs, value) {\n    if (arguments.length === 1 && typeof attrs === 'string') {\n      // Get attr\n      if (this[0]) return this[0].getAttribute(attrs);\n      return undefined;\n    } // Set attrs\n\n\n    for (var i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i].setAttribute(attrs, value);\n      } else {\n        // Object\n        for (var attrName in attrs) {\n          this[i][attrName] = attrs[attrName];\n          this[i].setAttribute(attrName, attrs[attrName]);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function removeAttr(attr) {\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].removeAttribute(attr);\n    }\n\n    return this;\n  }\n\n  function prop(props, value) {\n    if (arguments.length === 1 && typeof props === 'string') {\n      // Get prop\n      if (this[0]) return this[0][props];\n    } else {\n      // Set props\n      for (var i = 0; i < this.length; i += 1) {\n        if (arguments.length === 2) {\n          // String\n          this[i][props] = value;\n        } else {\n          // Object\n          for (var propName in props) {\n            this[i][propName] = props[propName];\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return this;\n  }\n\n  function data(key, value) {\n    var el;\n\n    if (typeof value === 'undefined') {\n      el = this[0];\n      if (!el) return undefined; // Get value\n\n      if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n        return el.dom7ElementDataStorage[key];\n      }\n\n      var dataKey = el.getAttribute(\"data-\" + key);\n\n      if (dataKey) {\n        return dataKey;\n      }\n\n      return undefined;\n    } // Set value\n\n\n    for (var i = 0; i < this.length; i += 1) {\n      el = this[i];\n      if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n      el.dom7ElementDataStorage[key] = value;\n    }\n\n    return this;\n  }\n\n  function removeData(key) {\n    for (var i = 0; i < this.length; i += 1) {\n      var el = this[i];\n\n      if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n        el.dom7ElementDataStorage[key] = null;\n        delete el.dom7ElementDataStorage[key];\n      }\n    }\n  }\n\n  function dataset() {\n    var el = this[0];\n    if (!el) return undefined;\n    var dataset = {}; // eslint-disable-line\n\n    if (el.dataset) {\n      for (var dataKey in el.dataset) {\n        dataset[dataKey] = el.dataset[dataKey];\n      }\n    } else {\n      for (var i = 0; i < el.attributes.length; i += 1) {\n        var _attr = el.attributes[i];\n\n        if (_attr.name.indexOf('data-') >= 0) {\n          dataset[toCamelCase(_attr.name.split('data-')[1])] = _attr.value;\n        }\n      }\n    }\n\n    for (var key in dataset) {\n      if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n    }\n\n    return dataset;\n  }\n\n  function val(value) {\n    if (typeof value === 'undefined') {\n      // get value\n      var el = this[0];\n      if (!el) return undefined;\n\n      if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n        var values = [];\n\n        for (var i = 0; i < el.selectedOptions.length; i += 1) {\n          values.push(el.selectedOptions[i].value);\n        }\n\n        return values;\n      }\n\n      return el.value;\n    } // set value\n\n\n    for (var _i = 0; _i < this.length; _i += 1) {\n      var _el = this[_i];\n\n      if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === 'select') {\n        for (var j = 0; j < _el.options.length; j += 1) {\n          _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;\n        }\n      } else {\n        _el.value = value;\n      }\n    }\n\n    return this;\n  }\n\n  function value(value) {\n    return this.val(value);\n  }\n\n  function transform(transform) {\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].style.transform = transform;\n    }\n\n    return this;\n  }\n\n  function transition(duration) {\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].style.transitionDuration = typeof duration !== 'string' ? duration + \"ms\" : duration;\n    }\n\n    return this;\n  }\n\n  function on() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    var eventType = args[0],\n        targetSelector = args[1],\n        listener = args[2],\n        capture = args[3];\n\n    if (typeof args[1] === 'function') {\n      eventType = args[0];\n      listener = args[1];\n      capture = args[2];\n      targetSelector = undefined;\n    }\n\n    if (!capture) capture = false;\n\n    function handleLiveEvent(e) {\n      var target = e.target;\n      if (!target) return;\n      var eventData = e.target.dom7EventData || [];\n\n      if (eventData.indexOf(e) < 0) {\n        eventData.unshift(e);\n      }\n\n      if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n        var _parents = $(target).parents(); // eslint-disable-line\n\n\n        for (var k = 0; k < _parents.length; k += 1) {\n          if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);\n        }\n      }\n    }\n\n    function handleEvent(e) {\n      var eventData = e && e.target ? e.target.dom7EventData || [] : [];\n\n      if (eventData.indexOf(e) < 0) {\n        eventData.unshift(e);\n      }\n\n      listener.apply(this, eventData);\n    }\n\n    var events = eventType.split(' ');\n    var j;\n\n    for (var i = 0; i < this.length; i += 1) {\n      var el = this[i];\n\n      if (!targetSelector) {\n        for (j = 0; j < events.length; j += 1) {\n          var event = events[j];\n          if (!el.dom7Listeners) el.dom7Listeners = {};\n          if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n          el.dom7Listeners[event].push({\n            listener: listener,\n            proxyListener: handleEvent\n          });\n          el.addEventListener(event, handleEvent, capture);\n        }\n      } else {\n        // Live events\n        for (j = 0; j < events.length; j += 1) {\n          var _event = events[j];\n          if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n          if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];\n\n          el.dom7LiveListeners[_event].push({\n            listener: listener,\n            proxyListener: handleLiveEvent\n          });\n\n          el.addEventListener(_event, handleLiveEvent, capture);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function off() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var eventType = args[0],\n        targetSelector = args[1],\n        listener = args[2],\n        capture = args[3];\n\n    if (typeof args[1] === 'function') {\n      eventType = args[0];\n      listener = args[1];\n      capture = args[2];\n      targetSelector = undefined;\n    }\n\n    if (!capture) capture = false;\n    var events = eventType.split(' ');\n\n    for (var i = 0; i < events.length; i += 1) {\n      var event = events[i];\n\n      for (var j = 0; j < this.length; j += 1) {\n        var el = this[j];\n        var handlers = void 0;\n\n        if (!targetSelector && el.dom7Listeners) {\n          handlers = el.dom7Listeners[event];\n        } else if (targetSelector && el.dom7LiveListeners) {\n          handlers = el.dom7LiveListeners[event];\n        }\n\n        if (handlers && handlers.length) {\n          for (var k = handlers.length - 1; k >= 0; k -= 1) {\n            var handler = handlers[k];\n\n            if (listener && handler.listener === listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            } else if (!listener) {\n              el.removeEventListener(event, handler.proxyListener, capture);\n              handlers.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function once() {\n    var dom = this;\n\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    var eventName = args[0],\n        targetSelector = args[1],\n        listener = args[2],\n        capture = args[3];\n\n    if (typeof args[1] === 'function') {\n      eventName = args[0];\n      listener = args[1];\n      capture = args[2];\n      targetSelector = undefined;\n    }\n\n    function onceHandler() {\n      for (var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        eventArgs[_key8] = arguments[_key8];\n      }\n\n      listener.apply(this, eventArgs);\n      dom.off(eventName, targetSelector, onceHandler, capture);\n\n      if (onceHandler.dom7proxy) {\n        delete onceHandler.dom7proxy;\n      }\n    }\n\n    onceHandler.dom7proxy = listener;\n    return dom.on(eventName, targetSelector, onceHandler, capture);\n  }\n\n  function trigger() {\n    var window = ssrWindow_umd.getWindow();\n\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    var events = args[0].split(' ');\n    var eventData = args[1];\n\n    for (var i = 0; i < events.length; i += 1) {\n      var event = events[i];\n\n      for (var j = 0; j < this.length; j += 1) {\n        var el = this[j];\n\n        if (window.CustomEvent) {\n          var evt = new window.CustomEvent(event, {\n            detail: eventData,\n            bubbles: true,\n            cancelable: true\n          });\n          el.dom7EventData = args.filter(function (data, dataIndex) {\n            return dataIndex > 0;\n          });\n          el.dispatchEvent(evt);\n          el.dom7EventData = [];\n          delete el.dom7EventData;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function transitionEnd(callback) {\n    var dom = this;\n\n    function fireCallBack(e) {\n      if (e.target !== this) return;\n      callback.call(this, e);\n      dom.off('transitionend', fireCallBack);\n    }\n\n    if (callback) {\n      dom.on('transitionend', fireCallBack);\n    }\n\n    return this;\n  }\n\n  function animationEnd(callback) {\n    var dom = this;\n\n    function fireCallBack(e) {\n      if (e.target !== this) return;\n      callback.call(this, e);\n      dom.off('animationend', fireCallBack);\n    }\n\n    if (callback) {\n      dom.on('animationend', fireCallBack);\n    }\n\n    return this;\n  }\n\n  function width() {\n    var window = ssrWindow_umd.getWindow();\n\n    if (this[0] === window) {\n      return window.innerWidth;\n    }\n\n    if (this.length > 0) {\n      return parseFloat(this.css('width'));\n    }\n\n    return null;\n  }\n\n  function outerWidth(includeMargins) {\n    if (this.length > 0) {\n      if (includeMargins) {\n        var _styles = this.styles();\n\n        return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));\n      }\n\n      return this[0].offsetWidth;\n    }\n\n    return null;\n  }\n\n  function height() {\n    var window = ssrWindow_umd.getWindow();\n\n    if (this[0] === window) {\n      return window.innerHeight;\n    }\n\n    if (this.length > 0) {\n      return parseFloat(this.css('height'));\n    }\n\n    return null;\n  }\n\n  function outerHeight(includeMargins) {\n    if (this.length > 0) {\n      if (includeMargins) {\n        var _styles2 = this.styles();\n\n        return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));\n      }\n\n      return this[0].offsetHeight;\n    }\n\n    return null;\n  }\n\n  function offset() {\n    if (this.length > 0) {\n      var window = ssrWindow_umd.getWindow();\n      var document = ssrWindow_umd.getDocument();\n      var el = this[0];\n      var box = el.getBoundingClientRect();\n      var body = document.body;\n      var clientTop = el.clientTop || body.clientTop || 0;\n      var clientLeft = el.clientLeft || body.clientLeft || 0;\n      var scrollTop = el === window ? window.scrollY : el.scrollTop;\n      var scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n      return {\n        top: box.top + scrollTop - clientTop,\n        left: box.left + scrollLeft - clientLeft\n      };\n    }\n\n    return null;\n  }\n\n  function hide() {\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].style.display = 'none';\n    }\n\n    return this;\n  }\n\n  function show() {\n    var window = ssrWindow_umd.getWindow();\n\n    for (var i = 0; i < this.length; i += 1) {\n      var el = this[i];\n\n      if (el.style.display === 'none') {\n        el.style.display = '';\n      }\n\n      if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n        // Still not visible\n        el.style.display = 'block';\n      }\n    }\n\n    return this;\n  }\n\n  function styles() {\n    var window = ssrWindow_umd.getWindow();\n    if (this[0]) return window.getComputedStyle(this[0], null);\n    return {};\n  }\n\n  function css(props, value) {\n    var window = ssrWindow_umd.getWindow();\n    var i;\n\n    if (arguments.length === 1) {\n      if (typeof props === 'string') {\n        // .css('width')\n        if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n      } else {\n        // .css({ width: '100px' })\n        for (i = 0; i < this.length; i += 1) {\n          for (var _prop in props) {\n            this[i].style[_prop] = props[_prop];\n          }\n        }\n\n        return this;\n      }\n    }\n\n    if (arguments.length === 2 && typeof props === 'string') {\n      // .css('width', '100px')\n      for (i = 0; i < this.length; i += 1) {\n        this[i].style[props] = value;\n      }\n\n      return this;\n    }\n\n    return this;\n  }\n\n  function each(callback) {\n    if (!callback) return this;\n    this.forEach(function (el, index) {\n      callback.apply(el, [el, index]);\n    });\n    return this;\n  }\n\n  function filter(callback) {\n    var result = arrayFilter(this, callback);\n    return $(result);\n  }\n\n  function html(html) {\n    if (typeof html === 'undefined') {\n      return this[0] ? this[0].innerHTML : null;\n    }\n\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].innerHTML = html;\n    }\n\n    return this;\n  }\n\n  function text(text) {\n    if (typeof text === 'undefined') {\n      return this[0] ? this[0].textContent.trim() : null;\n    }\n\n    for (var i = 0; i < this.length; i += 1) {\n      this[i].textContent = text;\n    }\n\n    return this;\n  }\n\n  function is(selector) {\n    var window = ssrWindow_umd.getWindow();\n    var document = ssrWindow_umd.getDocument();\n    var el = this[0];\n    var compareWith;\n    var i;\n    if (!el || typeof selector === 'undefined') return false;\n\n    if (typeof selector === 'string') {\n      if (el.matches) return el.matches(selector);\n      if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n      if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n      compareWith = $(selector);\n\n      for (i = 0; i < compareWith.length; i += 1) {\n        if (compareWith[i] === el) return true;\n      }\n\n      return false;\n    }\n\n    if (selector === document) {\n      return el === document;\n    }\n\n    if (selector === window) {\n      return el === window;\n    }\n\n    if (selector.nodeType || selector instanceof Dom7) {\n      compareWith = selector.nodeType ? [selector] : selector;\n\n      for (i = 0; i < compareWith.length; i += 1) {\n        if (compareWith[i] === el) return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  function index$1() {\n    var child = this[0];\n    var i;\n\n    if (child) {\n      i = 0; // eslint-disable-next-line\n\n      while ((child = child.previousSibling) !== null) {\n        if (child.nodeType === 1) i += 1;\n      }\n\n      return i;\n    }\n\n    return undefined;\n  }\n\n  function eq(index) {\n    if (typeof index === 'undefined') return this;\n    var length = this.length;\n\n    if (index > length - 1) {\n      return $([]);\n    }\n\n    if (index < 0) {\n      var returnIndex = length + index;\n      if (returnIndex < 0) return $([]);\n      return $([this[returnIndex]]);\n    }\n\n    return $([this[index]]);\n  }\n\n  function append() {\n    var newChild;\n    var document = ssrWindow_umd.getDocument();\n\n    for (var k = 0; k < arguments.length; k += 1) {\n      newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];\n\n      for (var i = 0; i < this.length; i += 1) {\n        if (typeof newChild === 'string') {\n          var tempDiv = document.createElement('div');\n          tempDiv.innerHTML = newChild;\n\n          while (tempDiv.firstChild) {\n            this[i].appendChild(tempDiv.firstChild);\n          }\n        } else if (newChild instanceof Dom7) {\n          for (var j = 0; j < newChild.length; j += 1) {\n            this[i].appendChild(newChild[j]);\n          }\n        } else {\n          this[i].appendChild(newChild);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function appendTo(parent) {\n    $(parent).append(this);\n    return this;\n  }\n\n  function prepend(newChild) {\n    var document = ssrWindow_umd.getDocument();\n    var i;\n    var j;\n\n    for (i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        var tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n\n        for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (j = 0; j < newChild.length; j += 1) {\n          this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n        }\n      } else {\n        this[i].insertBefore(newChild, this[i].childNodes[0]);\n      }\n    }\n\n    return this;\n  }\n\n  function prependTo(parent) {\n    $(parent).prepend(this);\n    return this;\n  }\n\n  function insertBefore(selector) {\n    var before = $(selector);\n\n    for (var i = 0; i < this.length; i += 1) {\n      if (before.length === 1) {\n        before[0].parentNode.insertBefore(this[i], before[0]);\n      } else if (before.length > 1) {\n        for (var j = 0; j < before.length; j += 1) {\n          before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n        }\n      }\n    }\n  }\n\n  function insertAfter(selector) {\n    var after = $(selector);\n\n    for (var i = 0; i < this.length; i += 1) {\n      if (after.length === 1) {\n        after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n      } else if (after.length > 1) {\n        for (var j = 0; j < after.length; j += 1) {\n          after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n        }\n      }\n    }\n  }\n\n  function next(selector) {\n    if (this.length > 0) {\n      if (selector) {\n        if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n          return $([this[0].nextElementSibling]);\n        }\n\n        return $([]);\n      }\n\n      if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n      return $([]);\n    }\n\n    return $([]);\n  }\n\n  function nextAll(selector) {\n    var nextEls = [];\n    var el = this[0];\n    if (!el) return $([]);\n\n    while (el.nextElementSibling) {\n      var _next = el.nextElementSibling; // eslint-disable-line\n\n      if (selector) {\n        if ($(_next).is(selector)) nextEls.push(_next);\n      } else nextEls.push(_next);\n\n      el = _next;\n    }\n\n    return $(nextEls);\n  }\n\n  function prev(selector) {\n    if (this.length > 0) {\n      var el = this[0];\n\n      if (selector) {\n        if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n          return $([el.previousElementSibling]);\n        }\n\n        return $([]);\n      }\n\n      if (el.previousElementSibling) return $([el.previousElementSibling]);\n      return $([]);\n    }\n\n    return $([]);\n  }\n\n  function prevAll(selector) {\n    var prevEls = [];\n    var el = this[0];\n    if (!el) return $([]);\n\n    while (el.previousElementSibling) {\n      var _prev = el.previousElementSibling; // eslint-disable-line\n\n      if (selector) {\n        if ($(_prev).is(selector)) prevEls.push(_prev);\n      } else prevEls.push(_prev);\n\n      el = _prev;\n    }\n\n    return $(prevEls);\n  }\n\n  function siblings(selector) {\n    return this.nextAll(selector).add(this.prevAll(selector));\n  }\n\n  function parent(selector) {\n    var parents = []; // eslint-disable-line\n\n    for (var i = 0; i < this.length; i += 1) {\n      if (this[i].parentNode !== null) {\n        if (selector) {\n          if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n        } else {\n          parents.push(this[i].parentNode);\n        }\n      }\n    }\n\n    return $(parents);\n  }\n\n  function parents(selector) {\n    var parents = []; // eslint-disable-line\n\n    for (var i = 0; i < this.length; i += 1) {\n      var _parent = this[i].parentNode; // eslint-disable-line\n\n      while (_parent) {\n        if (selector) {\n          if ($(_parent).is(selector)) parents.push(_parent);\n        } else {\n          parents.push(_parent);\n        }\n\n        _parent = _parent.parentNode;\n      }\n    }\n\n    return $(parents);\n  }\n\n  function closest(selector) {\n    var closest = this; // eslint-disable-line\n\n    if (typeof selector === 'undefined') {\n      return $([]);\n    }\n\n    if (!closest.is(selector)) {\n      closest = closest.parents(selector).eq(0);\n    }\n\n    return closest;\n  }\n\n  function find(selector) {\n    var foundElements = [];\n\n    for (var i = 0; i < this.length; i += 1) {\n      var found = this[i].querySelectorAll(selector);\n\n      for (var j = 0; j < found.length; j += 1) {\n        foundElements.push(found[j]);\n      }\n    }\n\n    return $(foundElements);\n  }\n\n  function children(selector) {\n    var children = []; // eslint-disable-line\n\n    for (var i = 0; i < this.length; i += 1) {\n      var childNodes = this[i].children;\n\n      for (var j = 0; j < childNodes.length; j += 1) {\n        if (!selector || $(childNodes[j]).is(selector)) {\n          children.push(childNodes[j]);\n        }\n      }\n    }\n\n    return $(children);\n  }\n\n  function remove() {\n    for (var i = 0; i < this.length; i += 1) {\n      if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n    }\n\n    return this;\n  }\n\n  function detach() {\n    return this.remove();\n  }\n\n  function add() {\n    var dom = this;\n    var i;\n    var j;\n\n    for (var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      els[_key10] = arguments[_key10];\n    }\n\n    for (i = 0; i < els.length; i += 1) {\n      var toAdd = $(els[i]);\n\n      for (j = 0; j < toAdd.length; j += 1) {\n        dom.push(toAdd[j]);\n      }\n    }\n\n    return dom;\n  }\n\n  function empty() {\n    for (var i = 0; i < this.length; i += 1) {\n      var el = this[i];\n\n      if (el.nodeType === 1) {\n        for (var j = 0; j < el.childNodes.length; j += 1) {\n          if (el.childNodes[j].parentNode) {\n            el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n          }\n        }\n\n        el.textContent = '';\n      }\n    }\n\n    return this;\n  }\n\n  function scrollTo() {\n    var window = ssrWindow_umd.getWindow();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var left = args[0],\n        top = args[1],\n        duration = args[2],\n        easing = args[3],\n        callback = args[4];\n\n    if (args.length === 4 && typeof easing === 'function') {\n      callback = easing;\n      left = args[0];\n      top = args[1];\n      duration = args[2];\n      callback = args[3];\n      easing = args[4];\n    }\n\n    if (typeof easing === 'undefined') easing = 'swing';\n    return this.each(function animate() {\n      var el = this;\n      var currentTop;\n      var currentLeft;\n      var maxTop;\n      var maxLeft;\n      var newTop;\n      var newLeft;\n      var scrollTop; // eslint-disable-line\n\n      var scrollLeft; // eslint-disable-line\n\n      var animateTop = top > 0 || top === 0;\n      var animateLeft = left > 0 || left === 0;\n\n      if (typeof easing === 'undefined') {\n        easing = 'swing';\n      }\n\n      if (animateTop) {\n        currentTop = el.scrollTop;\n\n        if (!duration) {\n          el.scrollTop = top;\n        }\n      }\n\n      if (animateLeft) {\n        currentLeft = el.scrollLeft;\n\n        if (!duration) {\n          el.scrollLeft = left;\n        }\n      }\n\n      if (!duration) return;\n\n      if (animateTop) {\n        maxTop = el.scrollHeight - el.offsetHeight;\n        newTop = Math.max(Math.min(top, maxTop), 0);\n      }\n\n      if (animateLeft) {\n        maxLeft = el.scrollWidth - el.offsetWidth;\n        newLeft = Math.max(Math.min(left, maxLeft), 0);\n      }\n\n      var startTime = null;\n      if (animateTop && newTop === currentTop) animateTop = false;\n      if (animateLeft && newLeft === currentLeft) animateLeft = false;\n\n      function render(time) {\n        if (time === void 0) {\n          time = new Date().getTime();\n        }\n\n        if (startTime === null) {\n          startTime = time;\n        }\n\n        var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n        var easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n        var done;\n        if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n        if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n\n        if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n          el.scrollTop = newTop;\n          done = true;\n        }\n\n        if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n          el.scrollTop = newTop;\n          done = true;\n        }\n\n        if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n          el.scrollLeft = newLeft;\n          done = true;\n        }\n\n        if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n          el.scrollLeft = newLeft;\n          done = true;\n        }\n\n        if (done) {\n          if (callback) callback();\n          return;\n        }\n\n        if (animateTop) el.scrollTop = scrollTop;\n        if (animateLeft) el.scrollLeft = scrollLeft;\n        window.requestAnimationFrame(render);\n      }\n\n      window.requestAnimationFrame(render);\n    });\n  } // scrollTop(top, duration, easing, callback) {\n\n\n  function scrollTop() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var top = args[0],\n        duration = args[1],\n        easing = args[2],\n        callback = args[3];\n\n    if (args.length === 3 && typeof easing === 'function') {\n      top = args[0];\n      duration = args[1];\n      callback = args[2];\n      easing = args[3];\n    }\n\n    var dom = this;\n\n    if (typeof top === 'undefined') {\n      if (dom.length > 0) return dom[0].scrollTop;\n      return null;\n    }\n\n    return dom.scrollTo(undefined, top, duration, easing, callback);\n  }\n\n  function scrollLeft() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    var left = args[0],\n        duration = args[1],\n        easing = args[2],\n        callback = args[3];\n\n    if (args.length === 3 && typeof easing === 'function') {\n      left = args[0];\n      duration = args[1];\n      callback = args[2];\n      easing = args[3];\n    }\n\n    var dom = this;\n\n    if (typeof left === 'undefined') {\n      if (dom.length > 0) return dom[0].scrollLeft;\n      return null;\n    }\n\n    return dom.scrollTo(left, undefined, duration, easing, callback);\n  }\n\n  function animate(initialProps, initialParams) {\n    var window = ssrWindow_umd.getWindow();\n    var els = this;\n    var a = {\n      props: Object.assign({}, initialProps),\n      params: Object.assign({\n        duration: 300,\n        easing: 'swing' // or 'linear'\n\n        /* Callbacks\n        begin(elements)\n        complete(elements)\n        progress(elements, complete, remaining, start, tweenValue)\n        */\n\n      }, initialParams),\n      elements: els,\n      animating: false,\n      que: [],\n      easingProgress: function easingProgress(easing, progress) {\n        if (easing === 'swing') {\n          return 0.5 - Math.cos(progress * Math.PI) / 2;\n        }\n\n        if (typeof easing === 'function') {\n          return easing(progress);\n        }\n\n        return progress;\n      },\n      stop: function stop() {\n        if (a.frameId) {\n          window.cancelAnimationFrame(a.frameId);\n        }\n\n        a.animating = false;\n        a.elements.each(function (el) {\n          var element = el;\n          delete element.dom7AnimateInstance;\n        });\n        a.que = [];\n      },\n      done: function done(complete) {\n        a.animating = false;\n        a.elements.each(function (el) {\n          var element = el;\n          delete element.dom7AnimateInstance;\n        });\n        if (complete) complete(els);\n\n        if (a.que.length > 0) {\n          var que = a.que.shift();\n          a.animate(que[0], que[1]);\n        }\n      },\n      animate: function animate(props, params) {\n        if (a.animating) {\n          a.que.push([props, params]);\n          return a;\n        }\n\n        var elements = []; // Define & Cache Initials & Units\n\n        a.elements.each(function (el, index) {\n          var initialFullValue;\n          var initialValue;\n          var unit;\n          var finalValue;\n          var finalFullValue;\n          if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n          elements[index] = {\n            container: el\n          };\n          Object.keys(props).forEach(function (prop) {\n            initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n            initialValue = parseFloat(initialFullValue);\n            unit = initialFullValue.replace(initialValue, '');\n            finalValue = parseFloat(props[prop]);\n            finalFullValue = props[prop] + unit;\n            elements[index][prop] = {\n              initialFullValue: initialFullValue,\n              initialValue: initialValue,\n              unit: unit,\n              finalValue: finalValue,\n              finalFullValue: finalFullValue,\n              currentValue: initialValue\n            };\n          });\n        });\n        var startTime = null;\n        var time;\n        var elementsDone = 0;\n        var propsDone = 0;\n        var done;\n        var began = false;\n        a.animating = true;\n\n        function render() {\n          time = new Date().getTime();\n          var progress;\n          var easeProgress; // let el;\n\n          if (!began) {\n            began = true;\n            if (params.begin) params.begin(els);\n          }\n\n          if (startTime === null) {\n            startTime = time;\n          }\n\n          if (params.progress) {\n            // eslint-disable-next-line\n            params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n          }\n\n          elements.forEach(function (element) {\n            var el = element;\n            if (done || el.done) return;\n            Object.keys(props).forEach(function (prop) {\n              if (done || el.done) return;\n              progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n              easeProgress = a.easingProgress(params.easing, progress);\n              var _el$prop = el[prop],\n                  initialValue = _el$prop.initialValue,\n                  finalValue = _el$prop.finalValue,\n                  unit = _el$prop.unit;\n              el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n              var currentValue = el[prop].currentValue;\n\n              if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n                el.container.style[prop] = finalValue + unit;\n                propsDone += 1;\n\n                if (propsDone === Object.keys(props).length) {\n                  el.done = true;\n                  elementsDone += 1;\n                }\n\n                if (elementsDone === elements.length) {\n                  done = true;\n                }\n              }\n\n              if (done) {\n                a.done(params.complete);\n                return;\n              }\n\n              el.container.style[prop] = currentValue + unit;\n            });\n          });\n          if (done) return; // Then call\n\n          a.frameId = window.requestAnimationFrame(render);\n        }\n\n        a.frameId = window.requestAnimationFrame(render);\n        return a;\n      }\n    };\n\n    if (a.elements.length === 0) {\n      return els;\n    }\n\n    var animateInstance;\n\n    for (var i = 0; i < a.elements.length; i += 1) {\n      if (a.elements[i].dom7AnimateInstance) {\n        animateInstance = a.elements[i].dom7AnimateInstance;\n      } else a.elements[i].dom7AnimateInstance = a;\n    }\n\n    if (!animateInstance) {\n      animateInstance = a;\n    }\n\n    if (initialProps === 'stop') {\n      animateInstance.stop();\n    } else {\n      animateInstance.animate(a.props, a.params);\n    }\n\n    return els;\n  }\n\n  function stop() {\n    var els = this;\n\n    for (var i = 0; i < els.length; i += 1) {\n      if (els[i].dom7AnimateInstance) {\n        els[i].dom7AnimateInstance.stop();\n      }\n    }\n  }\n\n  var noTrigger = 'resize scroll'.split(' ');\n\n  function shortcut(name) {\n    function eventHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (typeof args[0] === 'undefined') {\n        for (var i = 0; i < this.length; i += 1) {\n          if (noTrigger.indexOf(name) < 0) {\n            if (name in this[i]) this[i][name]();else {\n              $(this[i]).trigger(name);\n            }\n          }\n        }\n\n        return this;\n      }\n\n      return this.on.apply(this, [name].concat(args));\n    }\n\n    return eventHandler;\n  }\n\n  var click = shortcut('click');\n  var blur = shortcut('blur');\n  var focus = shortcut('focus');\n  var focusin = shortcut('focusin');\n  var focusout = shortcut('focusout');\n  var keyup = shortcut('keyup');\n  var keydown = shortcut('keydown');\n  var keypress = shortcut('keypress');\n  var submit = shortcut('submit');\n  var change = shortcut('change');\n  var mousedown = shortcut('mousedown');\n  var mousemove = shortcut('mousemove');\n  var mouseup = shortcut('mouseup');\n  var mouseenter = shortcut('mouseenter');\n  var mouseleave = shortcut('mouseleave');\n  var mouseout = shortcut('mouseout');\n  var mouseover = shortcut('mouseover');\n  var touchstart = shortcut('touchstart');\n  var touchend = shortcut('touchend');\n  var touchmove = shortcut('touchmove');\n  var resize = shortcut('resize');\n  var scroll = shortcut('scroll');\n\n  var $_1 = $;\n  var add_1 = add;\n  var addClass_1 = addClass;\n  var animate_1 = animate;\n  var animationEnd_1 = animationEnd;\n  var append_1 = append;\n  var appendTo_1 = appendTo;\n  var attr_1 = attr;\n  var blur_1 = blur;\n  var change_1 = change;\n  var children_1 = children;\n  var click_1 = click;\n  var closest_1 = closest;\n  var css_1 = css;\n  var data_1 = data;\n  var dataset_1 = dataset;\n  var _default$1 = $;\n  var detach_1 = detach;\n  var each_1 = each;\n  var empty_1 = empty;\n  var eq_1 = eq;\n  var filter_1 = filter;\n  var find_1 = find;\n  var focus_1 = focus;\n  var focusin_1 = focusin;\n  var focusout_1 = focusout;\n  var hasClass_1 = hasClass;\n  var height_1 = height;\n  var hide_1 = hide;\n  var html_1 = html;\n  var index_1 = index$1;\n  var insertAfter_1 = insertAfter;\n  var insertBefore_1 = insertBefore;\n  var is_1 = is;\n  var keydown_1 = keydown;\n  var keypress_1 = keypress;\n  var keyup_1 = keyup;\n  var mousedown_1 = mousedown;\n  var mouseenter_1 = mouseenter;\n  var mouseleave_1 = mouseleave;\n  var mousemove_1 = mousemove;\n  var mouseout_1 = mouseout;\n  var mouseover_1 = mouseover;\n  var mouseup_1 = mouseup;\n  var next_1 = next;\n  var nextAll_1 = nextAll;\n  var off_1 = off;\n  var offset_1 = offset;\n  var on_1 = on;\n  var once_1 = once;\n  var outerHeight_1 = outerHeight;\n  var outerWidth_1 = outerWidth;\n  var parent_1 = parent;\n  var parents_1 = parents;\n  var prepend_1 = prepend;\n  var prependTo_1 = prependTo;\n  var prev_1 = prev;\n  var prevAll_1 = prevAll;\n  var prop_1 = prop;\n  var remove_1 = remove;\n  var removeAttr_1 = removeAttr;\n  var removeClass_1 = removeClass;\n  var removeData_1 = removeData;\n  var resize_1 = resize;\n  var scroll_1 = scroll;\n  var scrollLeft_1 = scrollLeft;\n  var scrollTo_1 = scrollTo;\n  var scrollTop_1 = scrollTop;\n  var show_1 = show;\n  var siblings_1 = siblings;\n  var stop_1 = stop;\n  var styles_1 = styles;\n  var submit_1 = submit;\n  var text_1 = text;\n  var toggleClass_1 = toggleClass;\n  var touchend_1 = touchend;\n  var touchmove_1 = touchmove;\n  var touchstart_1 = touchstart;\n  var transform_1 = transform;\n  var transition_1 = transition;\n  var transitionEnd_1 = transitionEnd;\n  var trigger_1 = trigger;\n  var val_1 = val;\n  var value_1 = value;\n  var width_1 = width;\n\n  var dom7_cjs = /*#__PURE__*/Object.defineProperty({\n  \t$: $_1,\n  \tadd: add_1,\n  \taddClass: addClass_1,\n  \tanimate: animate_1,\n  \tanimationEnd: animationEnd_1,\n  \tappend: append_1,\n  \tappendTo: appendTo_1,\n  \tattr: attr_1,\n  \tblur: blur_1,\n  \tchange: change_1,\n  \tchildren: children_1,\n  \tclick: click_1,\n  \tclosest: closest_1,\n  \tcss: css_1,\n  \tdata: data_1,\n  \tdataset: dataset_1,\n  \tdefault: _default$1,\n  \tdetach: detach_1,\n  \teach: each_1,\n  \tempty: empty_1,\n  \teq: eq_1,\n  \tfilter: filter_1,\n  \tfind: find_1,\n  \tfocus: focus_1,\n  \tfocusin: focusin_1,\n  \tfocusout: focusout_1,\n  \thasClass: hasClass_1,\n  \theight: height_1,\n  \thide: hide_1,\n  \thtml: html_1,\n  \tindex: index_1,\n  \tinsertAfter: insertAfter_1,\n  \tinsertBefore: insertBefore_1,\n  \tis: is_1,\n  \tkeydown: keydown_1,\n  \tkeypress: keypress_1,\n  \tkeyup: keyup_1,\n  \tmousedown: mousedown_1,\n  \tmouseenter: mouseenter_1,\n  \tmouseleave: mouseleave_1,\n  \tmousemove: mousemove_1,\n  \tmouseout: mouseout_1,\n  \tmouseover: mouseover_1,\n  \tmouseup: mouseup_1,\n  \tnext: next_1,\n  \tnextAll: nextAll_1,\n  \toff: off_1,\n  \toffset: offset_1,\n  \ton: on_1,\n  \tonce: once_1,\n  \touterHeight: outerHeight_1,\n  \touterWidth: outerWidth_1,\n  \tparent: parent_1,\n  \tparents: parents_1,\n  \tprepend: prepend_1,\n  \tprependTo: prependTo_1,\n  \tprev: prev_1,\n  \tprevAll: prevAll_1,\n  \tprop: prop_1,\n  \tremove: remove_1,\n  \tremoveAttr: removeAttr_1,\n  \tremoveClass: removeClass_1,\n  \tremoveData: removeData_1,\n  \tresize: resize_1,\n  \tscroll: scroll_1,\n  \tscrollLeft: scrollLeft_1,\n  \tscrollTo: scrollTo_1,\n  \tscrollTop: scrollTop_1,\n  \tshow: show_1,\n  \tsiblings: siblings_1,\n  \tstop: stop_1,\n  \tstyles: styles_1,\n  \tsubmit: submit_1,\n  \ttext: text_1,\n  \ttoggleClass: toggleClass_1,\n  \ttouchend: touchend_1,\n  \ttouchmove: touchmove_1,\n  \ttouchstart: touchstart_1,\n  \ttransform: transform_1,\n  \ttransition: transition_1,\n  \ttransitionEnd: transitionEnd_1,\n  \ttrigger: trigger_1,\n  \tval: val_1,\n  \tvalue: value_1,\n  \twidth: width_1\n  }, '__esModule', {value: true});\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]';\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$3.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$3 = objectProto$3.toString;\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = overArg(Object.keys, Object);\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray(value) || isArguments(value))\n      ? baseTimes(value.length, String)\n      : [];\n\n    var length = result.length,\n        skipIndexes = !!length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$1.call(value, key)) &&\n          !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n  var baseEach = createBaseEach(baseForOwn);\n\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n  var baseFor = createBaseFor();\n\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$1.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseEach(eachFunc, fromRight) {\n    return function(collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n      var length = collection.length,\n          index = fromRight ? length : -1,\n          iterable = Object(collection);\n\n      while ((fromRight ? index-- : ++index < length)) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n      return collection;\n    };\n  }\n\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseFor(fromRight) {\n    return function(object, iteratee, keysFunc) {\n      var index = -1,\n          iterable = Object(object),\n          props = keysFunc(object),\n          length = props.length;\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n      return object;\n    };\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$3;\n\n    return value === proto;\n  }\n\n  /**\n   * Iterates over elements of `collection` and invokes `iteratee` for each element.\n   * The iteratee is invoked with three arguments: (value, index|key, collection).\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n   * property are iterated like arrays. To avoid this behavior use `_.forIn`\n   * or `_.forOwn` for object iteration.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias each\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   * @see _.forEachRight\n   * @example\n   *\n   * _([1, 2]).forEach(function(value) {\n   *   console.log(value);\n   * });\n   * // => Logs `1` then `2`.\n   *\n   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n   *   console.log(key);\n   * });\n   * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n   */\n  function forEach(collection, iteratee) {\n    var func = isArray(collection) ? arrayEach : baseEach;\n    return func(collection, typeof iteratee == 'function' ? iteratee : identity);\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&\n      (!propertyIsEnumerable.call(value, 'callee') || objectToString$3.call(value) == argsTag);\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike$3(value) && isArrayLike(value);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject$2(value) ? objectToString$3.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$2(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$3(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  var lodash_foreach = forEach;\n\n  let urlAlphabet$1 =\n    'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n  var urlAlphabet_1 = { urlAlphabet: urlAlphabet$1 };\n\n  let { urlAlphabet } = urlAlphabet_1;\n  {\n    if (\n      typeof navigator !== 'undefined' &&\n      navigator.product === 'ReactNative' &&\n      typeof crypto === 'undefined'\n    ) {\n      throw new Error(\n        'React Native does not have a built-in secure random generator. ' +\n          'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n          'For secure IDs, import `react-native-get-random-values` ' +\n          'before Nano ID.'\n      )\n    }\n    if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n      throw new Error(\n        'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n          ' before importing Nano ID to fix IE 11 support'\n      )\n    }\n    if (typeof crypto === 'undefined') {\n      throw new Error(\n        'Your browser does not have secure random generator. ' +\n          'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n      )\n    }\n  }\n  let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\n  let customRandom = (alphabet, size, getRandom) => {\n    let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1;\n    let step = -~((1.6 * mask * size) / alphabet.length);\n    return () => {\n      let id = '';\n      while (true) {\n        let bytes = getRandom(step);\n        let j = step;\n        while (j--) {\n          id += alphabet[bytes[j] & mask] || '';\n          if (id.length === size) return id\n        }\n      }\n    }\n  };\n  let customAlphabet = (alphabet, size) => customRandom(alphabet, size, random);\n  let nanoid$2 = (size = 21) => {\n    let id = '';\n    let bytes = crypto.getRandomValues(new Uint8Array(size));\n    while (size--) {\n      let byte = bytes[size] & 63;\n      if (byte < 36) {\n        id += byte.toString(36);\n      } else if (byte < 62) {\n        id += (byte - 26).toString(36).toUpperCase();\n      } else if (byte < 63) {\n        id += '_';\n      } else {\n        id += '-';\n      }\n    }\n    return id\n  };\n  var index_browser = { nanoid: nanoid$2, customAlphabet, customRandom, urlAlphabet, random };\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n  /** Used as references for various `Number` constants. */\n  var NAN$1 = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag$2 = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim$1 = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary$1 = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal$1 = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt$1 = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();\n\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$2 = objectProto$2.toString;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$1 = Math.max,\n      nativeMin$1 = Math.min;\n\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n  var now$1 = function() {\n    return root$2.Date.now();\n  };\n\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n  function debounce$2(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    wait = toNumber$1(wait) || 0;\n    if (isObject$1(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time;\n      // Start the timer for the trailing edge.\n      timerId = setTimeout(timerExpired, wait);\n      // Invoke the leading edge.\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          result = wait - timeSinceLastCall;\n\n      return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n    }\n\n    function timerExpired() {\n      var time = now$1();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // Restart the timer.\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now$1());\n    }\n\n    function debounced() {\n      var time = now$1(),\n          isInvoking = shouldInvoke(time);\n\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n      return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n\n  /**\n   * Creates a throttled function that only invokes `func` at most once per\n   * every `wait` milliseconds. The throttled function comes with a `cancel`\n   * method to cancel delayed `func` invocations and a `flush` method to\n   * immediately invoke them. Provide `options` to indicate whether `func`\n   * should be invoked on the leading and/or trailing edge of the `wait`\n   * timeout. The `func` is invoked with the last arguments provided to the\n   * throttled function. Subsequent calls to the throttled function return the\n   * result of the last `func` invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the throttled function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.throttle` and `_.debounce`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to throttle.\n   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=true]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * // Avoid excessively updating the position while scrolling.\n   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n   *\n   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n   * jQuery(element).on('click', throttled);\n   *\n   * // Cancel the trailing throttled invocation.\n   * jQuery(window).on('popstate', throttled.cancel);\n   */\n  function throttle(func, wait, options) {\n    var leading = true,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    if (isObject$1(options)) {\n      leading = 'leading' in options ? !!options.leading : leading;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n    return debounce$2(func, wait, {\n      'leading': leading,\n      'maxWait': wait,\n      'trailing': trailing\n    });\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$1(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$2(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$2(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber$1(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol$2(value)) {\n      return NAN$1;\n    }\n    if (isObject$1(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$1(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim$1, '');\n    var isBinary = reIsBinary$1.test(value);\n    return (isBinary || reIsOctal$1.test(value))\n      ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex$1.test(value) ? NAN$1 : +value);\n  }\n\n  var lodash_throttle = throttle;\n\n  var snabbdom_cjs = createCommonjsModule$1(function (module, exports) {\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  function createElement(tagName, options) {\n      return document.createElement(tagName, options);\n  }\n  function createElementNS(namespaceURI, qualifiedName, options) {\n      return document.createElementNS(namespaceURI, qualifiedName, options);\n  }\n  function createTextNode(text) {\n      return document.createTextNode(text);\n  }\n  function createComment(text) {\n      return document.createComment(text);\n  }\n  function insertBefore(parentNode, newNode, referenceNode) {\n      parentNode.insertBefore(newNode, referenceNode);\n  }\n  function removeChild(node, child) {\n      node.removeChild(child);\n  }\n  function appendChild(node, child) {\n      node.appendChild(child);\n  }\n  function parentNode(node) {\n      return node.parentNode;\n  }\n  function nextSibling(node) {\n      return node.nextSibling;\n  }\n  function tagName(elm) {\n      return elm.tagName;\n  }\n  function setTextContent(node, text) {\n      node.textContent = text;\n  }\n  function getTextContent(node) {\n      return node.textContent;\n  }\n  function isElement(node) {\n      return node.nodeType === 1;\n  }\n  function isText(node) {\n      return node.nodeType === 3;\n  }\n  function isComment(node) {\n      return node.nodeType === 8;\n  }\n  const htmlDomApi = {\n      createElement,\n      createElementNS,\n      createTextNode,\n      createComment,\n      insertBefore,\n      removeChild,\n      appendChild,\n      parentNode,\n      nextSibling,\n      tagName,\n      setTextContent,\n      getTextContent,\n      isElement,\n      isText,\n      isComment,\n  };\n\n  function vnode(sel, data, children, text, elm) {\n      const key = data === undefined ? undefined : data.key;\n      return { sel, data, children, text, elm, key };\n  }\n\n  const array = Array.isArray;\n  function primitive(s) {\n      return typeof s === \"string\" ||\n          typeof s === \"number\" ||\n          s instanceof String ||\n          s instanceof Number;\n  }\n\n  function isUndef(s) {\n      return s === undefined;\n  }\n  function isDef(s) {\n      return s !== undefined;\n  }\n  const emptyNode = vnode(\"\", {}, [], undefined, undefined);\n  function sameVnode(vnode1, vnode2) {\n      var _a, _b;\n      const isSameKey = vnode1.key === vnode2.key;\n      const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);\n      const isSameSel = vnode1.sel === vnode2.sel;\n      return isSameSel && isSameKey && isSameIs;\n  }\n  function isVnode(vnode) {\n      return vnode.sel !== undefined;\n  }\n  function createKeyToOldIdx(children, beginIdx, endIdx) {\n      var _a;\n      const map = {};\n      for (let i = beginIdx; i <= endIdx; ++i) {\n          const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;\n          if (key !== undefined) {\n              map[key] = i;\n          }\n      }\n      return map;\n  }\n  const hooks = [\n      \"create\",\n      \"update\",\n      \"remove\",\n      \"destroy\",\n      \"pre\",\n      \"post\",\n  ];\n  function init$1(modules, domApi) {\n      const cbs = {\n          create: [],\n          update: [],\n          remove: [],\n          destroy: [],\n          pre: [],\n          post: [],\n      };\n      const api = domApi !== undefined ? domApi : htmlDomApi;\n      for (const hook of hooks) {\n          for (const module of modules) {\n              const currentHook = module[hook];\n              if (currentHook !== undefined) {\n                  cbs[hook].push(currentHook);\n              }\n          }\n      }\n      function emptyNodeAt(elm) {\n          const id = elm.id ? \"#\" + elm.id : \"\";\n          // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.\n          // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring\n          const classes = elm.getAttribute(\"class\");\n          const c = classes ? \".\" + classes.split(\" \").join(\".\") : \"\";\n          return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n      }\n      function createRmCb(childElm, listeners) {\n          return function rmCb() {\n              if (--listeners === 0) {\n                  const parent = api.parentNode(childElm);\n                  api.removeChild(parent, childElm);\n              }\n          };\n      }\n      function createElm(vnode, insertedVnodeQueue) {\n          var _a, _b;\n          let i;\n          let data = vnode.data;\n          if (data !== undefined) {\n              const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;\n              if (isDef(init)) {\n                  init(vnode);\n                  data = vnode.data;\n              }\n          }\n          const children = vnode.children;\n          const sel = vnode.sel;\n          if (sel === \"!\") {\n              if (isUndef(vnode.text)) {\n                  vnode.text = \"\";\n              }\n              vnode.elm = api.createComment(vnode.text);\n          }\n          else if (sel !== undefined) {\n              // Parse selector\n              const hashIdx = sel.indexOf(\"#\");\n              const dotIdx = sel.indexOf(\".\", hashIdx);\n              const hash = hashIdx > 0 ? hashIdx : sel.length;\n              const dot = dotIdx > 0 ? dotIdx : sel.length;\n              const tag = hashIdx !== -1 || dotIdx !== -1\n                  ? sel.slice(0, Math.min(hash, dot))\n                  : sel;\n              const elm = (vnode.elm =\n                  isDef(data) && isDef((i = data.ns))\n                      ? api.createElementNS(i, tag, data)\n                      : api.createElement(tag, data));\n              if (hash < dot)\n                  elm.setAttribute(\"id\", sel.slice(hash + 1, dot));\n              if (dotIdx > 0)\n                  elm.setAttribute(\"class\", sel.slice(dot + 1).replace(/\\./g, \" \"));\n              for (i = 0; i < cbs.create.length; ++i)\n                  cbs.create[i](emptyNode, vnode);\n              if (array(children)) {\n                  for (i = 0; i < children.length; ++i) {\n                      const ch = children[i];\n                      if (ch != null) {\n                          api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                      }\n                  }\n              }\n              else if (primitive(vnode.text)) {\n                  api.appendChild(elm, api.createTextNode(vnode.text));\n              }\n              const hook = vnode.data.hook;\n              if (isDef(hook)) {\n                  (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);\n                  if (hook.insert) {\n                      insertedVnodeQueue.push(vnode);\n                  }\n              }\n          }\n          else {\n              vnode.elm = api.createTextNode(vnode.text);\n          }\n          return vnode.elm;\n      }\n      function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n          for (; startIdx <= endIdx; ++startIdx) {\n              const ch = vnodes[startIdx];\n              if (ch != null) {\n                  api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n              }\n          }\n      }\n      function invokeDestroyHook(vnode) {\n          var _a, _b;\n          const data = vnode.data;\n          if (data !== undefined) {\n              (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);\n              for (let i = 0; i < cbs.destroy.length; ++i)\n                  cbs.destroy[i](vnode);\n              if (vnode.children !== undefined) {\n                  for (let j = 0; j < vnode.children.length; ++j) {\n                      const child = vnode.children[j];\n                      if (child != null && typeof child !== \"string\") {\n                          invokeDestroyHook(child);\n                      }\n                  }\n              }\n          }\n      }\n      function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n          var _a, _b;\n          for (; startIdx <= endIdx; ++startIdx) {\n              let listeners;\n              let rm;\n              const ch = vnodes[startIdx];\n              if (ch != null) {\n                  if (isDef(ch.sel)) {\n                      invokeDestroyHook(ch);\n                      listeners = cbs.remove.length + 1;\n                      rm = createRmCb(ch.elm, listeners);\n                      for (let i = 0; i < cbs.remove.length; ++i)\n                          cbs.remove[i](ch, rm);\n                      const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;\n                      if (isDef(removeHook)) {\n                          removeHook(ch, rm);\n                      }\n                      else {\n                          rm();\n                      }\n                  }\n                  else {\n                      // Text node\n                      api.removeChild(parentElm, ch.elm);\n                  }\n              }\n          }\n      }\n      function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n          let oldStartIdx = 0;\n          let newStartIdx = 0;\n          let oldEndIdx = oldCh.length - 1;\n          let oldStartVnode = oldCh[0];\n          let oldEndVnode = oldCh[oldEndIdx];\n          let newEndIdx = newCh.length - 1;\n          let newStartVnode = newCh[0];\n          let newEndVnode = newCh[newEndIdx];\n          let oldKeyToIdx;\n          let idxInOld;\n          let elmToMove;\n          let before;\n          while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n              if (oldStartVnode == null) {\n                  oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n              }\n              else if (oldEndVnode == null) {\n                  oldEndVnode = oldCh[--oldEndIdx];\n              }\n              else if (newStartVnode == null) {\n                  newStartVnode = newCh[++newStartIdx];\n              }\n              else if (newEndVnode == null) {\n                  newEndVnode = newCh[--newEndIdx];\n              }\n              else if (sameVnode(oldStartVnode, newStartVnode)) {\n                  patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                  oldStartVnode = oldCh[++oldStartIdx];\n                  newStartVnode = newCh[++newStartIdx];\n              }\n              else if (sameVnode(oldEndVnode, newEndVnode)) {\n                  patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                  oldEndVnode = oldCh[--oldEndIdx];\n                  newEndVnode = newCh[--newEndIdx];\n              }\n              else if (sameVnode(oldStartVnode, newEndVnode)) {\n                  // Vnode moved right\n                  patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                  api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                  oldStartVnode = oldCh[++oldStartIdx];\n                  newEndVnode = newCh[--newEndIdx];\n              }\n              else if (sameVnode(oldEndVnode, newStartVnode)) {\n                  // Vnode moved left\n                  patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                  api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                  oldEndVnode = oldCh[--oldEndIdx];\n                  newStartVnode = newCh[++newStartIdx];\n              }\n              else {\n                  if (oldKeyToIdx === undefined) {\n                      oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                  }\n                  idxInOld = oldKeyToIdx[newStartVnode.key];\n                  if (isUndef(idxInOld)) {\n                      // New element\n                      api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                  }\n                  else {\n                      elmToMove = oldCh[idxInOld];\n                      if (elmToMove.sel !== newStartVnode.sel) {\n                          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                      }\n                      else {\n                          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                          oldCh[idxInOld] = undefined;\n                          api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                      }\n                  }\n                  newStartVnode = newCh[++newStartIdx];\n              }\n          }\n          if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n              if (oldStartIdx > oldEndIdx) {\n                  before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n                  addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n              }\n              else {\n                  removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n              }\n          }\n      }\n      function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n          var _a, _b, _c, _d, _e;\n          const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;\n          (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);\n          const elm = (vnode.elm = oldVnode.elm);\n          const oldCh = oldVnode.children;\n          const ch = vnode.children;\n          if (oldVnode === vnode)\n              return;\n          if (vnode.data !== undefined) {\n              for (let i = 0; i < cbs.update.length; ++i)\n                  cbs.update[i](oldVnode, vnode);\n              (_d = (_c = vnode.data.hook) === null || _c === void 0 ? void 0 : _c.update) === null || _d === void 0 ? void 0 : _d.call(_c, oldVnode, vnode);\n          }\n          if (isUndef(vnode.text)) {\n              if (isDef(oldCh) && isDef(ch)) {\n                  if (oldCh !== ch)\n                      updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n              }\n              else if (isDef(ch)) {\n                  if (isDef(oldVnode.text))\n                      api.setTextContent(elm, \"\");\n                  addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n              }\n              else if (isDef(oldCh)) {\n                  removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n              }\n              else if (isDef(oldVnode.text)) {\n                  api.setTextContent(elm, \"\");\n              }\n          }\n          else if (oldVnode.text !== vnode.text) {\n              if (isDef(oldCh)) {\n                  removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n              }\n              api.setTextContent(elm, vnode.text);\n          }\n          (_e = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _e === void 0 ? void 0 : _e.call(hook, oldVnode, vnode);\n      }\n      return function patch(oldVnode, vnode) {\n          let i, elm, parent;\n          const insertedVnodeQueue = [];\n          for (i = 0; i < cbs.pre.length; ++i)\n              cbs.pre[i]();\n          if (!isVnode(oldVnode)) {\n              oldVnode = emptyNodeAt(oldVnode);\n          }\n          if (sameVnode(oldVnode, vnode)) {\n              patchVnode(oldVnode, vnode, insertedVnodeQueue);\n          }\n          else {\n              elm = oldVnode.elm;\n              parent = api.parentNode(elm);\n              createElm(vnode, insertedVnodeQueue);\n              if (parent !== null) {\n                  api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                  removeVnodes(parent, [oldVnode], 0, 0);\n              }\n          }\n          for (i = 0; i < insertedVnodeQueue.length; ++i) {\n              insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n          }\n          for (i = 0; i < cbs.post.length; ++i)\n              cbs.post[i]();\n          return vnode;\n      };\n  }\n\n  function addNS(data, children, sel) {\n      data.ns = \"http://www.w3.org/2000/svg\";\n      if (sel !== \"foreignObject\" && children !== undefined) {\n          for (let i = 0; i < children.length; ++i) {\n              const childData = children[i].data;\n              if (childData !== undefined) {\n                  addNS(childData, children[i].children, children[i].sel);\n              }\n          }\n      }\n  }\n  function h(sel, b, c) {\n      let data = {};\n      let children;\n      let text;\n      let i;\n      if (c !== undefined) {\n          if (b !== null) {\n              data = b;\n          }\n          if (array(c)) {\n              children = c;\n          }\n          else if (primitive(c)) {\n              text = c.toString();\n          }\n          else if (c && c.sel) {\n              children = [c];\n          }\n      }\n      else if (b !== undefined && b !== null) {\n          if (array(b)) {\n              children = b;\n          }\n          else if (primitive(b)) {\n              text = b.toString();\n          }\n          else if (b && b.sel) {\n              children = [b];\n          }\n          else {\n              data = b;\n          }\n      }\n      if (children !== undefined) {\n          for (i = 0; i < children.length; ++i) {\n              if (primitive(children[i]))\n                  children[i] = vnode(undefined, undefined, undefined, children[i], undefined);\n          }\n      }\n      if (sel[0] === \"s\" &&\n          sel[1] === \"v\" &&\n          sel[2] === \"g\" &&\n          (sel.length === 3 || sel[3] === \".\" || sel[3] === \"#\")) {\n          addNS(data, children, sel);\n      }\n      return vnode(sel, data, children, text, undefined);\n  }\n\n  function copyToThunk(vnode, thunk) {\n      vnode.data.fn = thunk.data.fn;\n      vnode.data.args = thunk.data.args;\n      thunk.data = vnode.data;\n      thunk.children = vnode.children;\n      thunk.text = vnode.text;\n      thunk.elm = vnode.elm;\n  }\n  function init(thunk) {\n      const cur = thunk.data;\n      const vnode = cur.fn(...cur.args);\n      copyToThunk(vnode, thunk);\n  }\n  function prepatch(oldVnode, thunk) {\n      let i;\n      const old = oldVnode.data;\n      const cur = thunk.data;\n      const oldArgs = old.args;\n      const args = cur.args;\n      if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n          copyToThunk(cur.fn(...args), thunk);\n          return;\n      }\n      for (i = 0; i < args.length; ++i) {\n          if (oldArgs[i] !== args[i]) {\n              copyToThunk(cur.fn(...args), thunk);\n              return;\n          }\n      }\n      copyToThunk(oldVnode, thunk);\n  }\n  const thunk = function thunk(sel, key, fn, args) {\n      if (args === undefined) {\n          args = fn;\n          fn = key;\n          key = undefined;\n      }\n      return h(sel, {\n          key: key,\n          hook: { init, prepatch },\n          fn: fn,\n          args: args,\n      });\n  };\n\n  function pre(vnode, newVnode) {\n      const attachData = vnode.data.attachData;\n      // Copy created placeholder and real element from old vnode\n      newVnode.data.attachData.placeholder = attachData.placeholder;\n      newVnode.data.attachData.real = attachData.real;\n      // Mount real element in vnode so the patch process operates on it\n      vnode.elm = vnode.data.attachData.real;\n  }\n  function post(_, vnode) {\n      // Mount dummy placeholder in vnode so potential reorders use it\n      vnode.elm = vnode.data.attachData.placeholder;\n  }\n  function destroy(vnode) {\n      // Remove placeholder\n      if (vnode.elm !== undefined) {\n          vnode.elm.parentNode.removeChild(vnode.elm);\n      }\n      // Remove real element from where it was inserted\n      vnode.elm = vnode.data.attachData.real;\n  }\n  function create(_, vnode) {\n      const real = vnode.elm;\n      const attachData = vnode.data.attachData;\n      const placeholder = document.createElement(\"span\");\n      // Replace actual element with dummy placeholder\n      // Snabbdom will then insert placeholder instead\n      vnode.elm = placeholder;\n      attachData.target.appendChild(real);\n      attachData.real = real;\n      attachData.placeholder = placeholder;\n  }\n  function attachTo(target, vnode) {\n      if (vnode.data === undefined)\n          vnode.data = {};\n      if (vnode.data.hook === undefined)\n          vnode.data.hook = {};\n      const data = vnode.data;\n      const hook = vnode.data.hook;\n      data.attachData = { target: target, placeholder: undefined, real: undefined };\n      hook.create = create;\n      hook.prepatch = pre;\n      hook.postpatch = post;\n      hook.destroy = destroy;\n      return vnode;\n  }\n\n  function toVNode(node, domApi) {\n      const api = domApi !== undefined ? domApi : htmlDomApi;\n      let text;\n      if (api.isElement(node)) {\n          const id = node.id ? \"#\" + node.id : \"\";\n          const cn = node.getAttribute(\"class\");\n          const c = cn ? \".\" + cn.split(\" \").join(\".\") : \"\";\n          const sel = api.tagName(node).toLowerCase() + id + c;\n          const attrs = {};\n          const children = [];\n          let name;\n          let i, n;\n          const elmAttrs = node.attributes;\n          const elmChildren = node.childNodes;\n          for (i = 0, n = elmAttrs.length; i < n; i++) {\n              name = elmAttrs[i].nodeName;\n              if (name !== \"id\" && name !== \"class\") {\n                  attrs[name] = elmAttrs[i].nodeValue;\n              }\n          }\n          for (i = 0, n = elmChildren.length; i < n; i++) {\n              children.push(toVNode(elmChildren[i], domApi));\n          }\n          return vnode(sel, { attrs }, children, undefined, node);\n      }\n      else if (api.isText(node)) {\n          text = api.getTextContent(node);\n          return vnode(undefined, undefined, undefined, text, node);\n      }\n      else if (api.isComment(node)) {\n          text = api.getTextContent(node);\n          return vnode(\"!\", {}, [], text, node);\n      }\n      else {\n          return vnode(\"\", {}, [], undefined, node);\n      }\n  }\n\n  const xlinkNS = \"http://www.w3.org/1999/xlink\";\n  const xmlNS = \"http://www.w3.org/XML/1998/namespace\";\n  const colonChar = 58;\n  const xChar = 120;\n  function updateAttrs(oldVnode, vnode) {\n      let key;\n      const elm = vnode.elm;\n      let oldAttrs = oldVnode.data.attrs;\n      let attrs = vnode.data.attrs;\n      if (!oldAttrs && !attrs)\n          return;\n      if (oldAttrs === attrs)\n          return;\n      oldAttrs = oldAttrs || {};\n      attrs = attrs || {};\n      // update modified attributes, add new attributes\n      for (key in attrs) {\n          const cur = attrs[key];\n          const old = oldAttrs[key];\n          if (old !== cur) {\n              if (cur === true) {\n                  elm.setAttribute(key, \"\");\n              }\n              else if (cur === false) {\n                  elm.removeAttribute(key);\n              }\n              else {\n                  if (key.charCodeAt(0) !== xChar) {\n                      elm.setAttribute(key, cur);\n                  }\n                  else if (key.charCodeAt(3) === colonChar) {\n                      // Assume xml namespace\n                      elm.setAttributeNS(xmlNS, key, cur);\n                  }\n                  else if (key.charCodeAt(5) === colonChar) {\n                      // Assume xlink namespace\n                      elm.setAttributeNS(xlinkNS, key, cur);\n                  }\n                  else {\n                      elm.setAttribute(key, cur);\n                  }\n              }\n          }\n      }\n      // remove removed attributes\n      // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n      // the other option is to remove all attributes with value == undefined\n      for (key in oldAttrs) {\n          if (!(key in attrs)) {\n              elm.removeAttribute(key);\n          }\n      }\n  }\n  const attributesModule = {\n      create: updateAttrs,\n      update: updateAttrs,\n  };\n\n  function updateClass(oldVnode, vnode) {\n      let cur;\n      let name;\n      const elm = vnode.elm;\n      let oldClass = oldVnode.data.class;\n      let klass = vnode.data.class;\n      if (!oldClass && !klass)\n          return;\n      if (oldClass === klass)\n          return;\n      oldClass = oldClass || {};\n      klass = klass || {};\n      for (name in oldClass) {\n          if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {\n              // was `true` and now not provided\n              elm.classList.remove(name);\n          }\n      }\n      for (name in klass) {\n          cur = klass[name];\n          if (cur !== oldClass[name]) {\n              elm.classList[cur ? \"add\" : \"remove\"](name);\n          }\n      }\n  }\n  const classModule = { create: updateClass, update: updateClass };\n\n  const CAPS_REGEX = /[A-Z]/g;\n  function updateDataset(oldVnode, vnode) {\n      const elm = vnode.elm;\n      let oldDataset = oldVnode.data.dataset;\n      let dataset = vnode.data.dataset;\n      let key;\n      if (!oldDataset && !dataset)\n          return;\n      if (oldDataset === dataset)\n          return;\n      oldDataset = oldDataset || {};\n      dataset = dataset || {};\n      const d = elm.dataset;\n      for (key in oldDataset) {\n          if (!dataset[key]) {\n              if (d) {\n                  if (key in d) {\n                      delete d[key];\n                  }\n              }\n              else {\n                  elm.removeAttribute(\"data-\" + key.replace(CAPS_REGEX, \"-$&\").toLowerCase());\n              }\n          }\n      }\n      for (key in dataset) {\n          if (oldDataset[key] !== dataset[key]) {\n              if (d) {\n                  d[key] = dataset[key];\n              }\n              else {\n                  elm.setAttribute(\"data-\" + key.replace(CAPS_REGEX, \"-$&\").toLowerCase(), dataset[key]);\n              }\n          }\n      }\n  }\n  const datasetModule = {\n      create: updateDataset,\n      update: updateDataset,\n  };\n\n  function invokeHandler(handler, vnode, event) {\n      if (typeof handler === \"function\") {\n          // call function handler\n          handler.call(vnode, event, vnode);\n      }\n      else if (typeof handler === \"object\") {\n          // call multiple handlers\n          for (let i = 0; i < handler.length; i++) {\n              invokeHandler(handler[i], vnode, event);\n          }\n      }\n  }\n  function handleEvent(event, vnode) {\n      const name = event.type;\n      const on = vnode.data.on;\n      // call event handler(s) if exists\n      if (on && on[name]) {\n          invokeHandler(on[name], vnode, event);\n      }\n  }\n  function createListener() {\n      return function handler(event) {\n          handleEvent(event, handler.vnode);\n      };\n  }\n  function updateEventListeners(oldVnode, vnode) {\n      const oldOn = oldVnode.data.on;\n      const oldListener = oldVnode.listener;\n      const oldElm = oldVnode.elm;\n      const on = vnode && vnode.data.on;\n      const elm = (vnode && vnode.elm);\n      let name;\n      // optimization for reused immutable handlers\n      if (oldOn === on) {\n          return;\n      }\n      // remove existing listeners which no longer used\n      if (oldOn && oldListener) {\n          // if element changed or deleted we remove all existing listeners unconditionally\n          if (!on) {\n              for (name in oldOn) {\n                  // remove listener if element was changed or existing listeners removed\n                  oldElm.removeEventListener(name, oldListener, false);\n              }\n          }\n          else {\n              for (name in oldOn) {\n                  // remove listener if existing listener removed\n                  if (!on[name]) {\n                      oldElm.removeEventListener(name, oldListener, false);\n                  }\n              }\n          }\n      }\n      // add new listeners which has not already attached\n      if (on) {\n          // reuse existing listener or create new\n          const listener = (vnode.listener =\n              oldVnode.listener || createListener());\n          // update vnode for listener\n          listener.vnode = vnode;\n          // if element changed or added we add all needed listeners unconditionally\n          if (!oldOn) {\n              for (name in on) {\n                  // add listener if element was changed or new listeners added\n                  elm.addEventListener(name, listener, false);\n              }\n          }\n          else {\n              for (name in on) {\n                  // add listener if new listener added\n                  if (!oldOn[name]) {\n                      elm.addEventListener(name, listener, false);\n                  }\n              }\n          }\n      }\n  }\n  const eventListenersModule = {\n      create: updateEventListeners,\n      update: updateEventListeners,\n      destroy: updateEventListeners,\n  };\n\n  function updateProps(oldVnode, vnode) {\n      let key;\n      let cur;\n      let old;\n      const elm = vnode.elm;\n      let oldProps = oldVnode.data.props;\n      let props = vnode.data.props;\n      if (!oldProps && !props)\n          return;\n      if (oldProps === props)\n          return;\n      oldProps = oldProps || {};\n      props = props || {};\n      for (key in props) {\n          cur = props[key];\n          old = oldProps[key];\n          if (old !== cur && (key !== \"value\" || elm[key] !== cur)) {\n              elm[key] = cur;\n          }\n      }\n  }\n  const propsModule = { create: updateProps, update: updateProps };\n\n  // Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.\n  const raf = (typeof window !== \"undefined\" &&\n      window.requestAnimationFrame.bind(window)) ||\n      setTimeout;\n  const nextFrame = function (fn) {\n      raf(function () {\n          raf(fn);\n      });\n  };\n  let reflowForced = false;\n  function setNextFrame(obj, prop, val) {\n      nextFrame(function () {\n          obj[prop] = val;\n      });\n  }\n  function updateStyle(oldVnode, vnode) {\n      let cur;\n      let name;\n      const elm = vnode.elm;\n      let oldStyle = oldVnode.data.style;\n      let style = vnode.data.style;\n      if (!oldStyle && !style)\n          return;\n      if (oldStyle === style)\n          return;\n      oldStyle = oldStyle || {};\n      style = style || {};\n      const oldHasDel = \"delayed\" in oldStyle;\n      for (name in oldStyle) {\n          if (!style[name]) {\n              if (name[0] === \"-\" && name[1] === \"-\") {\n                  elm.style.removeProperty(name);\n              }\n              else {\n                  elm.style[name] = \"\";\n              }\n          }\n      }\n      for (name in style) {\n          cur = style[name];\n          if (name === \"delayed\" && style.delayed) {\n              for (const name2 in style.delayed) {\n                  cur = style.delayed[name2];\n                  if (!oldHasDel || cur !== oldStyle.delayed[name2]) {\n                      setNextFrame(elm.style, name2, cur);\n                  }\n              }\n          }\n          else if (name !== \"remove\" && cur !== oldStyle[name]) {\n              if (name[0] === \"-\" && name[1] === \"-\") {\n                  elm.style.setProperty(name, cur);\n              }\n              else {\n                  elm.style[name] = cur;\n              }\n          }\n      }\n  }\n  function applyDestroyStyle(vnode) {\n      let style;\n      let name;\n      const elm = vnode.elm;\n      const s = vnode.data.style;\n      if (!s || !(style = s.destroy))\n          return;\n      for (name in style) {\n          elm.style[name] = style[name];\n      }\n  }\n  function applyRemoveStyle(vnode, rm) {\n      const s = vnode.data.style;\n      if (!s || !s.remove) {\n          rm();\n          return;\n      }\n      if (!reflowForced) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n          vnode.elm.offsetLeft;\n          reflowForced = true;\n      }\n      let name;\n      const elm = vnode.elm;\n      let i = 0;\n      const style = s.remove;\n      let amount = 0;\n      const applied = [];\n      for (name in style) {\n          applied.push(name);\n          elm.style[name] = style[name];\n      }\n      const compStyle = getComputedStyle(elm);\n      const props = compStyle[\"transition-property\"].split(\", \");\n      for (; i < props.length; ++i) {\n          if (applied.indexOf(props[i]) !== -1)\n              amount++;\n      }\n      elm.addEventListener(\"transitionend\", function (ev) {\n          if (ev.target === elm)\n              --amount;\n          if (amount === 0)\n              rm();\n      });\n  }\n  function forceReflow() {\n      reflowForced = false;\n  }\n  const styleModule = {\n      pre: forceReflow,\n      create: updateStyle,\n      update: updateStyle,\n      destroy: applyDestroyStyle,\n      remove: applyRemoveStyle,\n  };\n\n  /* eslint-disable @typescript-eslint/no-namespace, import/export */\n  function flattenAndFilter(children, flattened) {\n      for (const child of children) {\n          // filter out falsey children, except 0 since zero can be a valid value e.g inside a chart\n          if (child !== undefined &&\n              child !== null &&\n              child !== false &&\n              child !== \"\") {\n              if (Array.isArray(child)) {\n                  flattenAndFilter(child, flattened);\n              }\n              else if (typeof child === \"string\" ||\n                  typeof child === \"number\" ||\n                  typeof child === \"boolean\") {\n                  flattened.push(vnode(undefined, undefined, undefined, String(child), undefined));\n              }\n              else {\n                  flattened.push(child);\n              }\n          }\n      }\n      return flattened;\n  }\n  /**\n   * jsx/tsx compatible factory function\n   * see: https://www.typescriptlang.org/docs/handbook/jsx.html#factory-functions\n   */\n  function jsx(tag, data, ...children) {\n      const flatChildren = flattenAndFilter(children, []);\n      if (typeof tag === \"function\") {\n          // tag is a function component\n          return tag(data, flatChildren);\n      }\n      else {\n          if (flatChildren.length === 1 &&\n              !flatChildren[0].sel &&\n              flatChildren[0].text) {\n              // only child is a simple text node, pass as text for a simpler vtree\n              return h(tag, data, flatChildren[0].text);\n          }\n          else {\n              return h(tag, data, flatChildren);\n          }\n      }\n  }\n  (function (jsx) {\n  })(jsx || (jsx = {}));\n\n  exports.array = array;\n  exports.attachTo = attachTo;\n  exports.attributesModule = attributesModule;\n  exports.classModule = classModule;\n  exports.datasetModule = datasetModule;\n  exports.eventListenersModule = eventListenersModule;\n  exports.h = h;\n  exports.htmlDomApi = htmlDomApi;\n  exports.init = init$1;\n  exports.jsx = jsx;\n  exports.primitive = primitive;\n  exports.propsModule = propsModule;\n  exports.styleModule = styleModule;\n  exports.thunk = thunk;\n  exports.toVNode = toVNode;\n  exports.vnode = vnode;\n  });\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag$1 = '[object Symbol]';\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n    rsUpper + '+' + rsOptUpperContr,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 'ss'\n  };\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$1 = objectProto$1.toString;\n\n  /** Built-in value references. */\n  var Symbol$1 = root$1.Symbol;\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n  /**\n   * The base implementation of `_.slice` without an iteratee call guard.\n   *\n   * @private\n   * @param {Array} array The array to slice.\n   * @param {number} [start=0] The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the slice of `array`.\n   */\n  function baseSlice(array, start, end) {\n    var index = -1,\n        length = array.length;\n\n    if (start < 0) {\n      start = -start > length ? 0 : (length + start);\n    }\n    end = end > length ? length : end;\n    if (end < 0) {\n      end += length;\n    }\n    length = start > end ? 0 : ((end - start) >>> 0);\n    start >>>= 0;\n\n    var result = Array(length);\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isSymbol$1(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = (value + '');\n    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n  }\n\n  /**\n   * Casts `array` to a slice if it's needed.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {number} start The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the cast slice.\n   */\n  function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return (!start && end >= length) ? array : baseSlice(array, start, end);\n  }\n\n  /**\n   * Creates a function like `_.lowerFirst`.\n   *\n   * @private\n   * @param {string} methodName The name of the `String` case method to use.\n   * @returns {Function} Returns the new case function.\n   */\n  function createCaseFirst(methodName) {\n    return function(string) {\n      string = toString(string);\n\n      var strSymbols = hasUnicode(string)\n        ? stringToArray(string)\n        : undefined;\n\n      var chr = strSymbols\n        ? strSymbols[0]\n        : string.charAt(0);\n\n      var trailing = strSymbols\n        ? castSlice(strSymbols, 1).join('')\n        : string.slice(1);\n\n      return chr[methodName]() + trailing;\n    };\n  }\n\n  /**\n   * Creates a function like `_.camelCase`.\n   *\n   * @private\n   * @param {Function} callback The function to combine each word.\n   * @returns {Function} Returns the new compounder function.\n   */\n  function createCompounder(callback) {\n    return function(string) {\n      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n    };\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$1(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$1(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n  }\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n\n  /**\n   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to convert.\n   * @returns {string} Returns the camel cased string.\n   * @example\n   *\n   * _.camelCase('Foo Bar');\n   * // => 'fooBar'\n   *\n   * _.camelCase('--foo-bar--');\n   * // => 'fooBar'\n   *\n   * _.camelCase('__FOO_BAR__');\n   * // => 'fooBar'\n   */\n  var camelCase = createCompounder(function(result, word, index) {\n    word = word.toLowerCase();\n    return result + (index ? capitalize(word) : word);\n  });\n\n  /**\n   * Converts the first character of `string` to upper case and the remaining\n   * to lower case.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to capitalize.\n   * @returns {string} Returns the capitalized string.\n   * @example\n   *\n   * _.capitalize('FRED');\n   * // => 'Fred'\n   */\n  function capitalize(string) {\n    return upperFirst(toString(string).toLowerCase());\n  }\n\n  /**\n   * Deburrs `string` by converting\n   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n   * letters to basic Latin letters and removing\n   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to deburr.\n   * @returns {string} Returns the deburred string.\n   * @example\n   *\n   * _.deburr('déjà vu');\n   * // => 'deja vu'\n   */\n  function deburr(string) {\n    string = toString(string);\n    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n  }\n\n  /**\n   * Converts the first character of `string` to upper case.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category String\n   * @param {string} [string=''] The string to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.upperFirst('fred');\n   * // => 'Fred'\n   *\n   * _.upperFirst('FRED');\n   * // => 'FRED'\n   */\n  var upperFirst = createCaseFirst('toUpperCase');\n\n  /**\n   * Splits `string` into an array of its words.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category String\n   * @param {string} [string=''] The string to inspect.\n   * @param {RegExp|string} [pattern] The pattern to match words.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {Array} Returns the words of `string`.\n   * @example\n   *\n   * _.words('fred, barney, & pebbles');\n   * // => ['fred', 'barney', 'pebbles']\n   *\n   * _.words('fred, barney, & pebbles', /[^, ]+/g);\n   * // => ['fred', 'barney', '&', 'pebbles']\n   */\n  function words(string, pattern, guard) {\n    string = toString(string);\n    pattern = guard ? undefined : pattern;\n\n    if (pattern === undefined) {\n      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n    }\n    return string.match(pattern) || [];\n  }\n\n  var lodash_camelcase = camelCase;\n\n  /**\n   * Constants.\n   */\n\n  var IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\n  var MODIFIERS = {\n    alt: 'altKey',\n    control: 'ctrlKey',\n    meta: 'metaKey',\n    shift: 'shiftKey'\n  };\n\n  var ALIASES = {\n    add: '+',\n    break: 'pause',\n    cmd: 'meta',\n    command: 'meta',\n    ctl: 'control',\n    ctrl: 'control',\n    del: 'delete',\n    down: 'arrowdown',\n    esc: 'escape',\n    ins: 'insert',\n    left: 'arrowleft',\n    mod: IS_MAC ? 'meta' : 'control',\n    opt: 'alt',\n    option: 'alt',\n    return: 'enter',\n    right: 'arrowright',\n    space: ' ',\n    spacebar: ' ',\n    up: 'arrowup',\n    win: 'meta',\n    windows: 'meta'\n  };\n\n  var CODES = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    ' ': 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    ';': 186,\n    '=': 187,\n    ',': 188,\n    '-': 189,\n    '.': 190,\n    '/': 191,\n    '`': 192,\n    '[': 219,\n    '\\\\': 220,\n    ']': 221,\n    '\\'': 222\n  };\n\n  for (var f = 1; f < 20; f++) {\n    CODES['f' + f] = 111 + f;\n  }\n\n  /**\n   * Is hotkey?\n   */\n\n  function isHotkey(hotkey, options, event) {\n    if (options && !('byKey' in options)) {\n      event = options;\n      options = null;\n    }\n\n    if (!Array.isArray(hotkey)) {\n      hotkey = [hotkey];\n    }\n\n    var array = hotkey.map(function (string) {\n      return parseHotkey(string, options);\n    });\n    var check = function check(e) {\n      return array.some(function (object) {\n        return compareHotkey(object, e);\n      });\n    };\n    var ret = event == null ? check : check(event);\n    return ret;\n  }\n\n  function isCodeHotkey(hotkey, event) {\n    return isHotkey(hotkey, event);\n  }\n\n  function isKeyHotkey(hotkey, event) {\n    return isHotkey(hotkey, { byKey: true }, event);\n  }\n\n  /**\n   * Parse.\n   */\n\n  function parseHotkey(hotkey, options) {\n    var byKey = options && options.byKey;\n    var ret = {};\n\n    // Special case to handle the `+` key since we use it as a separator.\n    hotkey = hotkey.replace('++', '+add');\n    var values = hotkey.split('+');\n    var length = values.length;\n\n    // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n    for (var k in MODIFIERS) {\n      ret[MODIFIERS[k]] = false;\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n\n        var optional = value.endsWith('?') && value.length > 1;\n\n        if (optional) {\n          value = value.slice(0, -1);\n        }\n\n        var name = toKeyName(value);\n        var modifier = MODIFIERS[name];\n\n        if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) {\n          throw new TypeError('Unknown modifier: \"' + value + '\"');\n        }\n\n        if (length === 1 || !modifier) {\n          if (byKey) {\n            ret.key = name;\n          } else {\n            ret.which = toKeyCode(value);\n          }\n        }\n\n        if (modifier) {\n          ret[modifier] = optional ? null : true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  /**\n   * Compare.\n   */\n\n  function compareHotkey(object, event) {\n    for (var key in object) {\n      var expected = object[key];\n      var actual = void 0;\n\n      if (expected == null) {\n        continue;\n      }\n\n      if (key === 'key' && event.key != null) {\n        actual = event.key.toLowerCase();\n      } else if (key === 'which') {\n        actual = expected === 91 && event.which === 93 ? 91 : event.which;\n      } else {\n        actual = event[key];\n      }\n\n      if (actual == null && expected === false) {\n        continue;\n      }\n\n      if (actual !== expected) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Utils.\n   */\n\n  function toKeyCode(name) {\n    name = toKeyName(name);\n    var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n    return code;\n  }\n\n  function toKeyName(name) {\n    name = name.toLowerCase();\n    name = ALIASES[name] || name;\n    return name;\n  }\n\n  /**\n   * Export.\n   */\n\n  var _default = isHotkey;\n  var isHotkey_1 = isHotkey;\n  var isCodeHotkey_1 = isCodeHotkey;\n  var isKeyHotkey_1 = isKeyHotkey;\n  var parseHotkey_1 = parseHotkey;\n  var compareHotkey_1 = compareHotkey;\n  var toKeyCode_1 = toKeyCode;\n  var toKeyName_1 = toKeyName;\n\n  var lib$4 = /*#__PURE__*/Object.defineProperty({\n  \tdefault: _default,\n  \tisHotkey: isHotkey_1,\n  \tisCodeHotkey: isCodeHotkey_1,\n  \tisKeyHotkey: isKeyHotkey_1,\n  \tparseHotkey: parseHotkey_1,\n  \tcompareHotkey: compareHotkey_1,\n  \ttoKeyCode: toKeyCode_1,\n  \ttoKeyName: toKeyName_1\n  }, '__esModule', {value: true});\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString = objectProto.toString;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax = Math.max,\n      nativeMin = Math.min;\n\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n  var now = function() {\n    return root.Date.now();\n  };\n\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n  function debounce$1(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    wait = toNumber(wait) || 0;\n    if (isObject(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time;\n      // Start the timer for the trailing edge.\n      timerId = setTimeout(timerExpired, wait);\n      // Invoke the leading edge.\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          result = wait - timeSinceLastCall;\n\n      return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n    }\n\n    function timerExpired() {\n      var time = now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // Restart the timer.\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now());\n    }\n\n    function debounced() {\n      var time = now(),\n          isInvoking = shouldInvoke(time);\n\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n      return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike(value) && objectToString.call(value) == symbolTag);\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return (isBinary || reIsOctal.test(value))\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex.test(value) ? NAN : +value);\n  }\n\n  var lodash_debounce = debounce$1;\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  var lodash_clonedeep = createCommonjsModule$1(function (module, exports) {\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /**\n   * Adds the key-value `pair` to `map`.\n   *\n   * @private\n   * @param {Object} map The map to modify.\n   * @param {Array} pair The key-value pair to add.\n   * @returns {Object} Returns `map`.\n   */\n  function addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n  }\n\n  /**\n   * Adds `value` to `set`.\n   *\n   * @private\n   * @param {Object} set The set to modify.\n   * @param {*} value The value to add.\n   * @returns {Object} Returns `set`.\n   */\n  function addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /** Used for built-in method references. */\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root['__core-js_shared__'];\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? ('Symbol(src)_1.' + uid) : '';\n  }());\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString = objectProto.toString;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      getPrototype = overArg(Object.getPrototypeOf, Object),\n      objectCreate = Object.create,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object);\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Hash(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  }\n\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function hashDelete(key) {\n    return this.has(key) && delete this.__data__[key];\n  }\n\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n  }\n\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n  function hashSet(key, value) {\n    var data = this.__data__;\n    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n    return this;\n  }\n\n  // Add methods to `Hash`.\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function ListCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n  function listCacheClear() {\n    this.__data__ = [];\n  }\n\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n    return true;\n  }\n\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    return index < 0 ? undefined : data[index][1];\n  }\n\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n    return this;\n  }\n\n  // Add methods to `ListCache`.\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function MapCache(entries) {\n    var index = -1,\n        length = entries ? entries.length : 0;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n  function mapCacheClear() {\n    this.__data__ = {\n      'hash': new Hash,\n      'map': new (Map || ListCache),\n      'string': new Hash\n    };\n  }\n\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function mapCacheDelete(key) {\n    return getMapData(this, key)['delete'](key);\n  }\n\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n  function mapCacheSet(key, value) {\n    getMapData(this, key).set(key, value);\n    return this;\n  }\n\n  // Add methods to `MapCache`.\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Stack(entries) {\n    this.__data__ = new ListCache(entries);\n  }\n\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n  function stackClear() {\n    this.__data__ = new ListCache;\n  }\n\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function stackDelete(key) {\n    return this.__data__['delete'](key);\n  }\n\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n  function stackSet(key, value) {\n    var cache = this.__data__;\n    if (cache instanceof ListCache) {\n      var pairs = cache.__data__;\n      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n        pairs.push([key, value]);\n        return this;\n      }\n      cache = this.__data__ = new MapCache(pairs);\n    }\n    cache.set(key, value);\n    return this;\n  }\n\n  // Add methods to `Stack`.\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray(value) || isArguments(value))\n      ? baseTimes(value.length, String)\n      : [];\n\n    var length = result.length,\n        skipIndexes = !!length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) &&\n          !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n        (value === undefined && !(key in object))) {\n      object[key] = value;\n    }\n  }\n\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.assign` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n  }\n\n  /**\n   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n   * traversed objects.\n   *\n   * @private\n   * @param {*} value The value to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @param {boolean} [isFull] Specify a clone including symbols.\n   * @param {Function} [customizer] The function to customize cloning.\n   * @param {string} [key] The key of `value`.\n   * @param {Object} [object] The parent object of `value`.\n   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n   * @returns {*} Returns the cloned value.\n   */\n  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n    var result;\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n      return result;\n    }\n    if (!isObject(value)) {\n      return value;\n    }\n    var isArr = isArray(value);\n    if (isArr) {\n      result = initCloneArray(value);\n      if (!isDeep) {\n        return copyArray(value, result);\n      }\n    } else {\n      var tag = getTag(value),\n          isFunc = tag == funcTag || tag == genTag;\n\n      if (isBuffer(value)) {\n        return cloneBuffer(value, isDeep);\n      }\n      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n        if (isHostObject(value)) {\n          return object ? value : {};\n        }\n        result = initCloneObject(isFunc ? {} : value);\n        if (!isDeep) {\n          return copySymbols(value, baseAssign(result, value));\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {};\n        }\n        result = initCloneByTag(value, tag, baseClone, isDeep);\n      }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack);\n    var stacked = stack.get(value);\n    if (stacked) {\n      return stacked;\n    }\n    stack.set(value, result);\n\n    if (!isArr) {\n      var props = isFull ? getAllKeys(value) : keys(value);\n    }\n    arrayEach(props || value, function(subValue, key) {\n      if (props) {\n        key = subValue;\n        subValue = value[key];\n      }\n      // Recursively populate clone (susceptible to call stack limits).\n      assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} prototype The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n  function baseCreate(proto) {\n    return isObject(proto) ? objectCreate(proto) : {};\n  }\n\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n\n  /**\n   * The base implementation of `getTag`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    return objectToString.call(value);\n  }\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n    var result = new buffer.constructor(buffer.length);\n    buffer.copy(result);\n    return result;\n  }\n\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n  }\n\n  /**\n   * Creates a clone of `dataView`.\n   *\n   * @private\n   * @param {Object} dataView The data view to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned data view.\n   */\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n  }\n\n  /**\n   * Creates a clone of `map`.\n   *\n   * @private\n   * @param {Object} map The map to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned map.\n   */\n  function cloneMap(map, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n    return arrayReduce(array, addMapEntry, new map.constructor);\n  }\n\n  /**\n   * Creates a clone of `regexp`.\n   *\n   * @private\n   * @param {Object} regexp The regexp to clone.\n   * @returns {Object} Returns the cloned regexp.\n   */\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n  }\n\n  /**\n   * Creates a clone of `set`.\n   *\n   * @private\n   * @param {Object} set The set to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned set.\n   */\n  function cloneSet(set, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n    return arrayReduce(array, addSetEntry, new set.constructor);\n  }\n\n  /**\n   * Creates a clone of the `symbol` object.\n   *\n   * @private\n   * @param {Object} symbol The symbol object to clone.\n   * @returns {Object} Returns the cloned symbol object.\n   */\n  function cloneSymbol(symbol) {\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n  }\n\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function copyArray(source, array) {\n    var index = -1,\n        length = source.length;\n\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n  function copyObject(source, props, object, customizer) {\n    object || (object = {});\n\n    var index = -1,\n        length = props.length;\n\n    while (++index < length) {\n      var key = props[index];\n\n      var newValue = customizer\n        ? customizer(object[key], source[key], key, object, source)\n        : undefined;\n\n      assignValue(object, key, newValue === undefined ? source[key] : newValue);\n    }\n    return object;\n  }\n\n  /**\n   * Copies own symbol properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols(source), object);\n  }\n\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key)\n      ? data[typeof key == 'string' ? 'string' : 'hash']\n      : data.map;\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n\n  /**\n   * Creates an array of the own enumerable symbol properties of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag;\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11,\n  // for data views in Edge < 14, and promises in Node.js.\n  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n      (Map && getTag(new Map) != mapTag) ||\n      (Promise && getTag(Promise.resolve()) != promiseTag) ||\n      (Set && getTag(new Set) != setTag) ||\n      (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n    getTag = function(value) {\n      var result = objectToString.call(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : undefined;\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString: return dataViewTag;\n          case mapCtorString: return mapTag;\n          case promiseCtorString: return promiseTag;\n          case setCtorString: return setTag;\n          case weakMapCtorString: return weakMapTag;\n        }\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Initializes an array clone.\n   *\n   * @private\n   * @param {Array} array The array to clone.\n   * @returns {Array} Returns the initialized clone.\n   */\n  function initCloneArray(array) {\n    var length = array.length,\n        result = array.constructor(length);\n\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n      result.index = array.index;\n      result.input = array.input;\n    }\n    return result;\n  }\n\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneObject(object) {\n    return (typeof object.constructor == 'function' && !isPrototype(object))\n      ? baseCreate(getPrototype(object))\n      : {};\n  }\n\n  /**\n   * Initializes an object clone based on its `toStringTag`.\n   *\n   * **Note:** This function only supports cloning values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {string} tag The `toStringTag` of the object to clone.\n   * @param {Function} cloneFunc The function to clone values.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneByTag(object, tag, cloneFunc, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n      case arrayBufferTag:\n        return cloneArrayBuffer(object);\n\n      case boolTag:\n      case dateTag:\n        return new Ctor(+object);\n\n      case dataViewTag:\n        return cloneDataView(object, isDeep);\n\n      case float32Tag: case float64Tag:\n      case int8Tag: case int16Tag: case int32Tag:\n      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n        return cloneTypedArray(object, isDeep);\n\n      case mapTag:\n        return cloneMap(object, isDeep, cloneFunc);\n\n      case numberTag:\n      case stringTag:\n        return new Ctor(object);\n\n      case regexpTag:\n        return cloneRegExp(object);\n\n      case setTag:\n        return cloneSet(object, isDeep, cloneFunc);\n\n      case symbolTag:\n        return cloneSymbol(object);\n    }\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n  function isKeyable(value) {\n    var type = typeof value;\n    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n      ? (value !== '__proto__')\n      : (value === null);\n  }\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n    return value === proto;\n  }\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to process.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n      try {\n        return (func + '');\n      } catch (e) {}\n    }\n    return '';\n  }\n\n  /**\n   * This method is like `_.clone` except that it recursively clones `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.0.0\n   * @category Lang\n   * @param {*} value The value to recursively clone.\n   * @returns {*} Returns the deep cloned value.\n   * @see _.clone\n   * @example\n   *\n   * var objects = [{ 'a': 1 }, { 'b': 2 }];\n   *\n   * var deep = _.cloneDeep(objects);\n   * console.log(deep[0] === objects[0]);\n   * // => false\n   */\n  function cloneDeep(value) {\n    return baseClone(value, true, true);\n  }\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other);\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n      (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n  var isBuffer = nativeIsBuffer || stubFalse;\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject(value) ? objectToString.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n  function stubArray() {\n    return [];\n  }\n\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = cloneDeep;\n  });\n\n  var hasProperty = function has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n  };\n\n  var _apply;\n\n  function _classPrivateFieldLooseBase$8(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$8 = 0;\n\n  function _classPrivateFieldLooseKey$8(name) { return \"__private_\" + id$8++ + \"_\" + name; }\n\n\n\n  function insertReplacement(source, rx, replacement) {\n    const newParts = [];\n    source.forEach(chunk => {\n      // When the source contains multiple placeholders for interpolation,\n      // we should ignore chunks that are not strings, because those\n      // can be JSX objects and will be otherwise incorrectly turned into strings.\n      // Without this condition we’d get this: [object Object] hello [object Object] my <button>\n      if (typeof chunk !== 'string') {\n        return newParts.push(chunk);\n      }\n\n      return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n        if (raw !== '') {\n          newParts.push(raw);\n        } // Interlace with the `replacement` value\n\n\n        if (i < list.length - 1) {\n          newParts.push(replacement);\n        }\n      });\n    });\n    return newParts;\n  }\n  /**\n   * Takes a string with placeholder variables like `%{smart_count} file selected`\n   * and replaces it with values from options `{smart_count: 5}`\n   *\n   * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n   * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n   *\n   * @param {string} phrase that needs interpolation, with placeholders\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {any[]} interpolated\n   */\n\n\n  function interpolate(phrase, options) {\n    const dollarRegex = /\\$/g;\n    const dollarBillsYall = '$$$$';\n    let interpolated = [phrase];\n    if (options == null) return interpolated;\n\n    for (const arg of Object.keys(options)) {\n      if (arg !== '_') {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        let replacement = options[arg];\n\n        if (typeof replacement === 'string') {\n          replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n        } // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n\n\n        interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement);\n      }\n    }\n\n    return interpolated;\n  }\n  /**\n   * Translates strings with interpolation & pluralization support.\n   * Extensible with custom dictionaries and pluralization functions.\n   *\n   * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n   * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n   * and can be easily added among with dictionaries, nested objects are used for pluralization\n   * as opposed to `||||` delimeter\n   *\n   * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n   */\n\n\n  var Translator_1 = (_apply = /*#__PURE__*/_classPrivateFieldLooseKey$8(\"apply\"), class Translator {\n    /**\n     * @param {object|Array<object>} locales - locale or list of locales.\n     */\n    constructor(locales) {\n      Object.defineProperty(this, _apply, {\n        value: _apply2\n      });\n      this.locale = {\n        strings: {},\n\n        pluralize(n) {\n          if (n === 1) {\n            return 0;\n          }\n\n          return 1;\n        }\n\n      };\n\n      if (Array.isArray(locales)) {\n        locales.forEach(_classPrivateFieldLooseBase$8(this, _apply)[_apply], this);\n      } else {\n        _classPrivateFieldLooseBase$8(this, _apply)[_apply](locales);\n      }\n    }\n\n    /**\n     * Public translate method\n     *\n     * @param {string} key\n     * @param {object} options with values that will be used later to replace placeholders in string\n     * @returns {string} translated (and interpolated)\n     */\n    translate(key, options) {\n      return this.translateArray(key, options).join('');\n    }\n    /**\n     * Get a translation and return the translated and interpolated parts as an array.\n     *\n     * @param {string} key\n     * @param {object} options with values that will be used to replace placeholders\n     * @returns {Array} The translated and interpolated parts, in order.\n     */\n\n\n    translateArray(key, options) {\n      if (!hasProperty(this.locale.strings, key)) {\n        throw new Error(`missing string: ${key}`);\n      }\n\n      const string = this.locale.strings[key];\n      const hasPluralForms = typeof string === 'object';\n\n      if (hasPluralForms) {\n        if (options && typeof options.smart_count !== 'undefined') {\n          const plural = this.locale.pluralize(options.smart_count);\n          return interpolate(string[plural], options);\n        }\n\n        throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n      }\n\n      return interpolate(string, options);\n    }\n\n  });\n\n  function _apply2(locale) {\n    if (!(locale != null && locale.strings)) {\n      return;\n    }\n\n    const prevLocale = this.locale;\n    this.locale = { ...prevLocale,\n      strings: { ...prevLocale.strings,\n        ...locale.strings\n      }\n    };\n    this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n  }\n\n  /**\n  * Create an event emitter with namespaces\n  * @name createNamespaceEmitter\n  * @example\n  * var emitter = require('./index')()\n  *\n  * emitter.on('*', function () {\n  *   console.log('all events emitted', this.event)\n  * })\n  *\n  * emitter.on('example', function () {\n  *   console.log('example event emitted')\n  * })\n  */\n  var namespaceEmitter = function createNamespaceEmitter () {\n    var emitter = {};\n    var _fns = emitter._fns = {};\n\n    /**\n    * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`\n    * @name emit\n    * @param {String} event – the name of the event, with optional namespace\n    * @param {...*} data – up to 6 arguments that are passed to the event listener\n    * @example\n    * emitter.emit('example')\n    * emitter.emit('demo:test')\n    * emitter.emit('data', { example: true}, 'a string', 1)\n    */\n    emitter.emit = function emit (event, arg1, arg2, arg3, arg4, arg5, arg6) {\n      var toEmit = getListeners(event);\n\n      if (toEmit.length) {\n        emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6]);\n      }\n    };\n\n    /**\n    * Create en event listener.\n    * @name on\n    * @param {String} event\n    * @param {Function} fn\n    * @example\n    * emitter.on('example', function () {})\n    * emitter.on('demo', function () {})\n    */\n    emitter.on = function on (event, fn) {\n      if (!_fns[event]) {\n        _fns[event] = [];\n      }\n\n      _fns[event].push(fn);\n    };\n\n    /**\n    * Create en event listener that fires once.\n    * @name once\n    * @param {String} event\n    * @param {Function} fn\n    * @example\n    * emitter.once('example', function () {})\n    * emitter.once('demo', function () {})\n    */\n    emitter.once = function once (event, fn) {\n      function one () {\n        fn.apply(this, arguments);\n        emitter.off(event, one);\n      }\n      this.on(event, one);\n    };\n\n    /**\n    * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.\n    * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,\n    * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener\n    * @name off\n    * @param {String} event\n    * @param {Function} [fn] – the specific handler\n    * @example\n    * emitter.off('example')\n    * emitter.off('demo', function () {})\n    */\n    emitter.off = function off (event, fn) {\n      var keep = [];\n\n      if (event && fn) {\n        var fns = this._fns[event];\n        var i = 0;\n        var l = fns ? fns.length : 0;\n\n        for (i; i < l; i++) {\n          if (fns[i] !== fn) {\n            keep.push(fns[i]);\n          }\n        }\n      }\n\n      keep.length ? this._fns[event] = keep : delete this._fns[event];\n    };\n\n    function getListeners (e) {\n      var out = _fns[e] ? _fns[e] : [];\n      var idx = e.indexOf(':');\n      var args = (idx === -1) ? [e] : [e.substring(0, idx), e.substring(idx + 1)];\n\n      var keys = Object.keys(_fns);\n      var i = 0;\n      var l = keys.length;\n\n      for (i; i < l; i++) {\n        var key = keys[i];\n        if (key === '*') {\n          out = out.concat(_fns[key]);\n        }\n\n        if (args.length === 2 && args[0] === key) {\n          out = out.concat(_fns[key]);\n          break\n        }\n      }\n\n      return out\n    }\n\n    function emitAll (e, fns, args) {\n      var i = 0;\n      var l = fns.length;\n\n      for (i; i < l; i++) {\n        if (!fns[i]) break\n        fns[i].event = e;\n        fns[i].apply(fns[i], args);\n      }\n    }\n\n    return emitter\n  };\n\n  // Adapted from https://github.com/Flet/prettier-bytes/\n  // Changing 1000 bytes to 1024, so we can keep uppercase KB vs kB\n  // ISC License (c) Dan Flettre https://github.com/Flet/prettier-bytes/blob/master/LICENSE\n  var prettierBytes = function prettierBytes (num) {\n    if (typeof num !== 'number' || isNaN(num)) {\n      throw new TypeError('Expected a number, got ' + typeof num)\n    }\n\n    var neg = num < 0;\n    var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    if (neg) {\n      num = -num;\n    }\n\n    if (num < 1) {\n      return (neg ? '-' : '') + num + ' B'\n    }\n\n    var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1);\n    num = Number(num / Math.pow(1024, exponent));\n    var unit = units[exponent];\n\n    if (num >= 10 || num % 1 === 0) {\n      // Do not show decimals when the number is two-digit, or if the number has no\n      // decimal component.\n      return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit\n    } else {\n      return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit\n    }\n  };\n\n  /* jshint node: true */\n\n  /**\n    # wildcard\n\n    Very simple wildcard matching, which is designed to provide the same\n    functionality that is found in the\n    [eve](https://github.com/adobe-webplatform/eve) eventing library.\n\n    ## Usage\n\n    It works with strings:\n\n    <<< examples/strings.js\n\n    Arrays:\n\n    <<< examples/arrays.js\n\n    Objects (matching against keys):\n\n    <<< examples/objects.js\n\n    While the library works in Node, if you are are looking for file-based\n    wildcard matching then you should have a look at:\n\n    <https://github.com/isaacs/node-glob>\n  **/\n\n  function WildcardMatcher(text, separator) {\n    this.text = text = text || '';\n    this.hasWild = ~text.indexOf('*');\n    this.separator = separator;\n    this.parts = text.split(separator);\n  }\n\n  WildcardMatcher.prototype.match = function(input) {\n    var matches = true;\n    var parts = this.parts;\n    var ii;\n    var partsCount = parts.length;\n    var testParts;\n\n    if (typeof input == 'string' || input instanceof String) {\n      if (!this.hasWild && this.text != input) {\n        matches = false;\n      } else {\n        testParts = (input || '').split(this.separator);\n        for (ii = 0; matches && ii < partsCount; ii++) {\n          if (parts[ii] === '*')  {\n            continue;\n          } else if (ii < testParts.length) {\n            matches = parts[ii] === testParts[ii];\n          } else {\n            matches = false;\n          }\n        }\n\n        // If matches, then return the component parts\n        matches = matches && testParts;\n      }\n    }\n    else if (typeof input.splice == 'function') {\n      matches = [];\n\n      for (ii = input.length; ii--; ) {\n        if (this.match(input[ii])) {\n          matches[matches.length] = input[ii];\n        }\n      }\n    }\n    else if (typeof input == 'object') {\n      matches = {};\n\n      for (var key in input) {\n        if (this.match(key)) {\n          matches[key] = input[key];\n        }\n      }\n    }\n\n    return matches;\n  };\n\n  var wildcard = function(text, test, separator) {\n    var matcher = new WildcardMatcher(text, separator || /[\\/\\.]/);\n    if (typeof test != 'undefined') {\n      return matcher.match(test);\n    }\n\n    return matcher;\n  };\n\n  var reMimePartSplit = /[\\/\\+\\.]/;\n\n  /**\n    # mime-match\n\n    A simple function to checker whether a target mime type matches a mime-type\n    pattern (e.g. image/jpeg matches image/jpeg OR image/*).\n\n    ## Example Usage\n\n    <<< example.js\n\n  **/\n  var mimeMatch = function(target, pattern) {\n    function test(pattern) {\n      var result = wildcard(pattern, target, reMimePartSplit);\n\n      // ensure that we have a valid mime type (should have two parts)\n      return result && result.length >= 2;\n    }\n\n    return pattern ? test(pattern.split(';')[0]) : test;\n  };\n\n  function _classPrivateFieldLooseBase$7(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$7 = 0;\n\n  function _classPrivateFieldLooseKey$7(name) { return \"__private_\" + id$7++ + \"_\" + name; }\n\n  var _publish = /*#__PURE__*/_classPrivateFieldLooseKey$7(\"publish\");\n\n  /**\n   * Default store that keeps state in a simple object.\n   */\n  class DefaultStore {\n    constructor() {\n      Object.defineProperty(this, _publish, {\n        value: _publish2\n      });\n      this.state = {};\n      this.callbacks = [];\n    }\n\n    getState() {\n      return this.state;\n    }\n\n    setState(patch) {\n      const prevState = { ...this.state\n      };\n      const nextState = { ...this.state,\n        ...patch\n      };\n      this.state = nextState;\n\n      _classPrivateFieldLooseBase$7(this, _publish)[_publish](prevState, nextState, patch);\n    }\n\n    subscribe(listener) {\n      this.callbacks.push(listener);\n      return () => {\n        // Remove the listener.\n        this.callbacks.splice(this.callbacks.indexOf(listener), 1);\n      };\n    }\n\n  }\n\n  function _publish2() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this.callbacks.forEach(listener => {\n      listener(...args);\n    });\n  }\n\n  DefaultStore.VERSION = \"2.0.3\";\n\n  var lib$3 = function defaultStore() {\n    return new DefaultStore();\n  };\n\n  /**\n   * Takes a full filename string and returns an object {name, extension}\n   *\n   * @param {string} fullFileName\n   * @returns {object} {name, extension}\n   */\n  var getFileNameAndExtension = function getFileNameAndExtension(fullFileName) {\n    const lastDot = fullFileName.lastIndexOf('.'); // these count as no extension: \"no-dot\", \"trailing-dot.\"\n\n    if (lastDot === -1 || lastDot === fullFileName.length - 1) {\n      return {\n        name: fullFileName,\n        extension: undefined\n      };\n    }\n\n    return {\n      name: fullFileName.slice(0, lastDot),\n      extension: fullFileName.slice(lastDot + 1)\n    };\n  };\n\n  // ___Why not add the mime-types package?\n  //    It's 19.7kB gzipped, and we only need mime types for well-known extensions (for file previews).\n  // ___Where to take new extensions from?\n  //    https://github.com/jshttp/mime-db/blob/master/db.json\n  var mimeTypes = {\n    md: 'text/markdown',\n    markdown: 'text/markdown',\n    mp4: 'video/mp4',\n    mp3: 'audio/mp3',\n    svg: 'image/svg+xml',\n    jpg: 'image/jpeg',\n    png: 'image/png',\n    gif: 'image/gif',\n    heic: 'image/heic',\n    heif: 'image/heif',\n    yaml: 'text/yaml',\n    yml: 'text/yaml',\n    csv: 'text/csv',\n    tsv: 'text/tab-separated-values',\n    tab: 'text/tab-separated-values',\n    avi: 'video/x-msvideo',\n    mks: 'video/x-matroska',\n    mkv: 'video/x-matroska',\n    mov: 'video/quicktime',\n    doc: 'application/msword',\n    docm: 'application/vnd.ms-word.document.macroenabled.12',\n    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    dot: 'application/msword',\n    dotm: 'application/vnd.ms-word.template.macroenabled.12',\n    dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n    xla: 'application/vnd.ms-excel',\n    xlam: 'application/vnd.ms-excel.addin.macroenabled.12',\n    xlc: 'application/vnd.ms-excel',\n    xlf: 'application/x-xliff+xml',\n    xlm: 'application/vnd.ms-excel',\n    xls: 'application/vnd.ms-excel',\n    xlsb: 'application/vnd.ms-excel.sheet.binary.macroenabled.12',\n    xlsm: 'application/vnd.ms-excel.sheet.macroenabled.12',\n    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    xlt: 'application/vnd.ms-excel',\n    xltm: 'application/vnd.ms-excel.template.macroenabled.12',\n    xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n    xlw: 'application/vnd.ms-excel',\n    txt: 'text/plain',\n    text: 'text/plain',\n    conf: 'text/plain',\n    log: 'text/plain',\n    pdf: 'application/pdf',\n    zip: 'application/zip',\n    '7z': 'application/x-7z-compressed',\n    rar: 'application/x-rar-compressed',\n    tar: 'application/x-tar',\n    gz: 'application/gzip',\n    dmg: 'application/x-apple-diskimage'\n  };\n\n  var getFileType = function getFileType(file) {\n    var _getFileNameAndExtens;\n\n    if (file.type) return file.type;\n    const fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;\n\n    if (fileExtension && fileExtension in mimeTypes) {\n      // else, see if we can map extension to a mime type\n      return mimeTypes[fileExtension];\n    } // if all fails, fall back to a generic byte stream type\n\n\n    return 'application/octet-stream';\n  };\n\n  function encodeCharacter(character) {\n    return character.charCodeAt(0).toString(32);\n  }\n\n  function encodeFilename(name) {\n    let suffix = '';\n    return name.replace(/[^A-Z0-9]/ig, character => {\n      suffix += `-${encodeCharacter(character)}`;\n      return '/';\n    }) + suffix;\n  }\n  /**\n   * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n   * removing extra characters and adding type, size and lastModified\n   *\n   * @param {object} file\n   * @returns {string} the fileID\n   */\n\n\n  var generateFileID = function generateFileID(file) {\n    // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n    // is slower! simple string concatenation is fast\n    let id = 'uppy';\n\n    if (typeof file.name === 'string') {\n      id += `-${encodeFilename(file.name.toLowerCase())}`;\n    }\n\n    if (file.type !== undefined) {\n      id += `-${file.type}`;\n    }\n\n    if (file.meta && typeof file.meta.relativePath === 'string') {\n      id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;\n    }\n\n    if (file.data.size !== undefined) {\n      id += `-${file.data.size}`;\n    }\n\n    if (file.data.lastModified !== undefined) {\n      id += `-${file.data.lastModified}`;\n    }\n\n    return id;\n  };\n\n  // Edge 15.x does not fire 'progress' events on uploads.\n  // See https://github.com/transloadit/uppy/issues/945\n  // And https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12224510/\n  var supportsUploadProgress = function supportsUploadProgress(userAgent) {\n    // Allow passing in userAgent for tests\n    if (userAgent == null) {\n      userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : null;\n    } // Assume it works because basically everything supports progress events.\n\n\n    if (!userAgent) return true;\n    const m = /Edge\\/(\\d+\\.\\d+)/.exec(userAgent);\n    if (!m) return true;\n    const edgeVersion = m[1];\n    let [major, minor] = edgeVersion.split('.');\n    major = parseInt(major, 10);\n    minor = parseInt(minor, 10); // Worked before:\n    // Edge 40.15063.0.0\n    // Microsoft EdgeHTML 15.15063\n\n    if (major < 15 || major === 15 && minor < 15063) {\n      return true;\n    } // Fixed in:\n    // Microsoft EdgeHTML 18.18218\n\n\n    if (major > 18 || major === 18 && minor >= 18218) {\n      return true;\n    } // other versions don't work.\n\n\n    return false;\n  };\n\n  var getFileName = function getFileName(fileType, fileDescriptor) {\n    if (fileDescriptor.name) {\n      return fileDescriptor.name;\n    }\n\n    if (fileType.split('/')[0] === 'image') {\n      return `${fileType.split('/')[0]}.${fileType.split('/')[1]}`;\n    }\n\n    return 'noname';\n  };\n\n  /**\n   * Adds zero to strings shorter than two characters.\n   *\n   * @param {number} number\n   * @returns {string}\n   */\n  function pad(number) {\n    return number < 10 ? `0${number}` : number.toString();\n  }\n  /**\n   * Returns a timestamp in the format of `hours:minutes:seconds`\n   */\n\n\n  var getTimeStamp = function getTimeStamp() {\n    const date = new Date();\n    const hours = pad(date.getHours());\n    const minutes = pad(date.getMinutes());\n    const seconds = pad(date.getSeconds());\n    return `${hours}:${minutes}:${seconds}`;\n  };\n\n  /* eslint-disable no-console */\n   // Swallow all logs, except errors.\n  // default if logger is not set or debug: false\n\n\n  const justErrorsLogger$1 = {\n    debug: () => {},\n    warn: () => {},\n    error: function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);\n    }\n  }; // Print logs to console with namespace + timestamp,\n  // set by logger: Uppy.debugLogger or debug: true\n\n  const debugLogger$2 = {\n    debug: function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return console.debug(`[Uppy] [${getTimeStamp()}]`, ...args);\n    },\n    warn: function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return console.warn(`[Uppy] [${getTimeStamp()}]`, ...args);\n    },\n    error: function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);\n    }\n  };\n  var loggers = {\n    justErrorsLogger: justErrorsLogger$1,\n    debugLogger: debugLogger$2\n  };\n\n  var locale$1 = {\n    strings: {\n      addBulkFilesFailed: {\n        0: 'Failed to add %{smart_count} file due to an internal error',\n        1: 'Failed to add %{smart_count} files due to internal errors'\n      },\n      youCanOnlyUploadX: {\n        0: 'You can only upload %{smart_count} file',\n        1: 'You can only upload %{smart_count} files'\n      },\n      youHaveToAtLeastSelectX: {\n        0: 'You have to select at least %{smart_count} file',\n        1: 'You have to select at least %{smart_count} files'\n      },\n      exceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n      missingRequiredMetaField: 'Missing required meta fields',\n      missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',\n      inferiorSize: 'This file is smaller than the allowed size of %{size}',\n      youCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n      noMoreFilesAllowed: 'Cannot add more files',\n      noDuplicates: \"Cannot add the duplicate file '%{fileName}', it already exists\",\n      companionError: 'Connection with Companion failed',\n      authAborted: 'Authentication aborted',\n      companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',\n      failedToUpload: 'Failed to upload %{file}',\n      noInternetConnection: 'No Internet connection',\n      connectedToInternet: 'Connected to the Internet',\n      // Strings for remote providers\n      noFilesFound: 'You have no files or folders here',\n      selectX: {\n        0: 'Select %{smart_count}',\n        1: 'Select %{smart_count}'\n      },\n      allFilesFromFolderNamed: 'All files from folder %{name}',\n      openFolderNamed: 'Open folder %{name}',\n      cancel: 'Cancel',\n      logOut: 'Log out',\n      filter: 'Filter',\n      resetFilter: 'Reset filter',\n      loading: 'Loading...',\n      authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',\n      authenticateWith: 'Connect to %{pluginName}',\n      signInWithGoogle: 'Sign in with Google',\n      searchImages: 'Search for images',\n      enterTextToSearch: 'Enter text to search for images',\n      backToSearch: 'Back to Search',\n      emptyFolderAdded: 'No files were added from empty folder',\n      folderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n      folderAdded: {\n        0: 'Added %{smart_count} file from %{folder}',\n        1: 'Added %{smart_count} files from %{folder}'\n      }\n    }\n  };\n\n  var require$$4 = index_browser;\n\n  /* global AggregateError */\n\n  let _Symbol$for$1, _Symbol$for2$1;\n\n  function _classPrivateFieldLooseBase$6(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$6 = 0;\n\n  function _classPrivateFieldLooseKey$6(name) { return \"__private_\" + id$6++ + \"_\" + name; }\n\n\n\n\n\n  const {\n    nanoid: nanoid$1\n  } = require$$4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const {\n    justErrorsLogger,\n    debugLogger: debugLogger$1\n  } = loggers;\n\n   // Exported from here.\n\n\n  class RestrictionError extends Error {\n    constructor() {\n      super(...arguments);\n      this.isRestriction = true;\n    }\n\n  }\n\n  if (typeof AggregateError === 'undefined') {\n    // eslint-disable-next-line no-global-assign\n    globalThis.AggregateError = class AggregateError extends Error {\n      constructor(errors, message) {\n        super(message);\n        this.errors = errors;\n      }\n\n    };\n  }\n\n  class AggregateRestrictionError extends AggregateError {\n    constructor() {\n      super(...arguments);\n      this.isRestriction = true;\n    }\n\n  }\n  /**\n   * Uppy Core module.\n   * Manages plugins, state updates, acts as an event bus,\n   * adds/removes files and metadata.\n   */\n\n\n  var _plugins = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"plugins\");\n\n  var _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"storeUnsubscribe\");\n\n  var _emitter$2 = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"emitter\");\n\n  var _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"preProcessors\");\n\n  var _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"uploaders\");\n\n  var _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"postProcessors\");\n\n  var _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"checkRestrictions\");\n\n  var _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"checkMinNumberOfFiles\");\n\n  var _checkRequiredMetaFieldsOnFile = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"checkRequiredMetaFieldsOnFile\");\n\n  var _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"checkRequiredMetaFields\");\n\n  var _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"showOrLogErrorAndThrow\");\n\n  var _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"assertNewUploadAllowed\");\n\n  var _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"checkAndCreateFileStateObject\");\n\n  var _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"startIfAutoProceed\");\n\n  var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"addListeners\");\n\n  var _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"updateOnlineStatus\");\n\n  var _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"createUpload\");\n\n  var _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"getUpload\");\n\n  var _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"removeUpload\");\n\n  var _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey$6(\"runUpload\");\n\n  _Symbol$for$1 = Symbol.for('uppy test: getPlugins');\n  _Symbol$for2$1 = Symbol.for('uppy test: createUpload');\n\n  class Uppy {\n    // eslint-disable-next-line global-require\n\n    /** @type {Record<string, BasePlugin[]>} */\n\n    /**\n     * Instantiate Uppy\n     *\n     * @param {object} opts — Uppy options\n     */\n    constructor(_opts) {\n      Object.defineProperty(this, _runUpload, {\n        value: _runUpload2\n      });\n      Object.defineProperty(this, _removeUpload, {\n        value: _removeUpload2\n      });\n      Object.defineProperty(this, _getUpload, {\n        value: _getUpload2\n      });\n      Object.defineProperty(this, _createUpload, {\n        value: _createUpload2\n      });\n      Object.defineProperty(this, _addListeners, {\n        value: _addListeners2\n      });\n      Object.defineProperty(this, _startIfAutoProceed, {\n        value: _startIfAutoProceed2\n      });\n      Object.defineProperty(this, _checkAndCreateFileStateObject, {\n        value: _checkAndCreateFileStateObject2\n      });\n      Object.defineProperty(this, _assertNewUploadAllowed, {\n        value: _assertNewUploadAllowed2\n      });\n      Object.defineProperty(this, _showOrLogErrorAndThrow, {\n        value: _showOrLogErrorAndThrow2\n      });\n      Object.defineProperty(this, _checkRequiredMetaFields, {\n        value: _checkRequiredMetaFields2\n      });\n      Object.defineProperty(this, _checkRequiredMetaFieldsOnFile, {\n        value: _checkRequiredMetaFieldsOnFile2\n      });\n      Object.defineProperty(this, _checkMinNumberOfFiles, {\n        value: _checkMinNumberOfFiles2\n      });\n      Object.defineProperty(this, _checkRestrictions, {\n        value: _checkRestrictions2\n      });\n      Object.defineProperty(this, _plugins, {\n        writable: true,\n        value: Object.create(null)\n      });\n      Object.defineProperty(this, _storeUnsubscribe, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _emitter$2, {\n        writable: true,\n        value: namespaceEmitter()\n      });\n      Object.defineProperty(this, _preProcessors, {\n        writable: true,\n        value: new Set()\n      });\n      Object.defineProperty(this, _uploaders, {\n        writable: true,\n        value: new Set()\n      });\n      Object.defineProperty(this, _postProcessors, {\n        writable: true,\n        value: new Set()\n      });\n      Object.defineProperty(this, _updateOnlineStatus, {\n        writable: true,\n        value: this.updateOnlineStatus.bind(this)\n      });\n      this.defaultLocale = locale$1;\n      const defaultOptions = {\n        id: 'uppy',\n        autoProceed: false,\n\n        /**\n         * @deprecated The method should not be used\n         */\n        allowMultipleUploads: true,\n        allowMultipleUploadBatches: true,\n        debug: false,\n        restrictions: {\n          maxFileSize: null,\n          minFileSize: null,\n          maxTotalFileSize: null,\n          maxNumberOfFiles: null,\n          minNumberOfFiles: null,\n          allowedFileTypes: null,\n          requiredMetaFields: []\n        },\n        meta: {},\n        onBeforeFileAdded: currentFile => currentFile,\n        onBeforeUpload: files => files,\n        store: lib$3(),\n        logger: justErrorsLogger,\n        infoTimeout: 5000\n      }; // Merge default options with the ones set by user,\n      // making sure to merge restrictions too\n\n      this.opts = { ...defaultOptions,\n        ..._opts,\n        restrictions: { ...defaultOptions.restrictions,\n          ...(_opts && _opts.restrictions)\n        }\n      }; // Support debug: true for backwards-compatability, unless logger is set in opts\n      // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n\n      if (_opts && _opts.logger && _opts.debug) {\n        this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n      } else if (_opts && _opts.debug) {\n        this.opts.logger = debugLogger$1;\n      }\n\n      this.log(`Using Core v${this.constructor.VERSION}`);\n\n      if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n      }\n\n      this.i18nInit(); // ___Why throttle at 500ms?\n      //    - We must throttle at >250ms for superfocus in Dashboard to work well\n      //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n      //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n      //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n      //    - We must throttle at around >500ms to avoid performance lags.\n      //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n      this.calculateProgress = lodash_throttle(this.calculateProgress.bind(this), 500, {\n        leading: true,\n        trailing: true\n      });\n      this.store = this.opts.store;\n      this.setState({\n        plugins: {},\n        files: {},\n        currentUploads: {},\n        allowNewUpload: true,\n        capabilities: {\n          uploadProgress: supportsUploadProgress(),\n          individualCancellation: true,\n          resumableUploads: false\n        },\n        totalProgress: 0,\n        meta: { ...this.opts.meta\n        },\n        info: [],\n        recoveredState: null\n      });\n      _classPrivateFieldLooseBase$6(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n        this.emit('state-update', prevState, nextState, patch);\n        this.updateAll(nextState);\n      }); // Exposing uppy object on window for debugging and testing\n\n      if (this.opts.debug && typeof window !== 'undefined') {\n        window[this.opts.id] = this;\n      }\n\n      _classPrivateFieldLooseBase$6(this, _addListeners)[_addListeners]();\n    }\n\n    emit(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _classPrivateFieldLooseBase$6(this, _emitter$2)[_emitter$2].emit(event, ...args);\n    }\n\n    on(event, callback) {\n      _classPrivateFieldLooseBase$6(this, _emitter$2)[_emitter$2].on(event, callback);\n\n      return this;\n    }\n\n    once(event, callback) {\n      _classPrivateFieldLooseBase$6(this, _emitter$2)[_emitter$2].once(event, callback);\n\n      return this;\n    }\n\n    off(event, callback) {\n      _classPrivateFieldLooseBase$6(this, _emitter$2)[_emitter$2].off(event, callback);\n\n      return this;\n    }\n    /**\n     * Iterate on all plugins and run `update` on them.\n     * Called each time state changes.\n     *\n     */\n\n\n    updateAll(state) {\n      this.iteratePlugins(plugin => {\n        plugin.update(state);\n      });\n    }\n    /**\n     * Updates state with a patch\n     *\n     * @param {object} patch {foo: 'bar'}\n     */\n\n\n    setState(patch) {\n      this.store.setState(patch);\n    }\n    /**\n     * Returns current state.\n     *\n     * @returns {object}\n     */\n\n\n    getState() {\n      return this.store.getState();\n    }\n    /**\n     * Back compat for when uppy.state is used instead of uppy.getState().\n     *\n     * @deprecated\n     */\n\n\n    get state() {\n      // Here, state is a non-enumerable property.\n      return this.getState();\n    }\n    /**\n     * Shorthand to set state for a specific file.\n     */\n\n\n    setFileState(fileID, state) {\n      if (!this.getState().files[fileID]) {\n        throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);\n      }\n\n      this.setState({\n        files: { ...this.getState().files,\n          [fileID]: { ...this.getState().files[fileID],\n            ...state\n          }\n        }\n      });\n    }\n\n    i18nInit() {\n      const translator = new Translator_1([this.defaultLocale, this.opts.locale]);\n      this.i18n = translator.translate.bind(translator);\n      this.i18nArray = translator.translateArray.bind(translator);\n      this.locale = translator.locale;\n    }\n\n    setOptions(newOpts) {\n      this.opts = { ...this.opts,\n        ...newOpts,\n        restrictions: { ...this.opts.restrictions,\n          ...(newOpts && newOpts.restrictions)\n        }\n      };\n\n      if (newOpts.meta) {\n        this.setMeta(newOpts.meta);\n      }\n\n      this.i18nInit();\n\n      if (newOpts.locale) {\n        this.iteratePlugins(plugin => {\n          plugin.setOptions();\n        });\n      } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n      this.setState(); // so that UI re-renders with new options\n    }\n\n    resetProgress() {\n      const defaultProgress = {\n        percentage: 0,\n        bytesUploaded: 0,\n        uploadComplete: false,\n        uploadStarted: null\n      };\n      const files = { ...this.getState().files\n      };\n      const updatedFiles = {};\n      Object.keys(files).forEach(fileID => {\n        const updatedFile = { ...files[fileID]\n        };\n        updatedFile.progress = { ...updatedFile.progress,\n          ...defaultProgress\n        };\n        updatedFiles[fileID] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles,\n        totalProgress: 0\n      });\n      this.emit('reset-progress');\n    }\n\n    addPreProcessor(fn) {\n      _classPrivateFieldLooseBase$6(this, _preProcessors)[_preProcessors].add(fn);\n    }\n\n    removePreProcessor(fn) {\n      return _classPrivateFieldLooseBase$6(this, _preProcessors)[_preProcessors].delete(fn);\n    }\n\n    addPostProcessor(fn) {\n      _classPrivateFieldLooseBase$6(this, _postProcessors)[_postProcessors].add(fn);\n    }\n\n    removePostProcessor(fn) {\n      return _classPrivateFieldLooseBase$6(this, _postProcessors)[_postProcessors].delete(fn);\n    }\n\n    addUploader(fn) {\n      _classPrivateFieldLooseBase$6(this, _uploaders)[_uploaders].add(fn);\n    }\n\n    removeUploader(fn) {\n      return _classPrivateFieldLooseBase$6(this, _uploaders)[_uploaders].delete(fn);\n    }\n\n    setMeta(data) {\n      const updatedMeta = { ...this.getState().meta,\n        ...data\n      };\n      const updatedFiles = { ...this.getState().files\n      };\n      Object.keys(updatedFiles).forEach(fileID => {\n        updatedFiles[fileID] = { ...updatedFiles[fileID],\n          meta: { ...updatedFiles[fileID].meta,\n            ...data\n          }\n        };\n      });\n      this.log('Adding metadata:');\n      this.log(data);\n      this.setState({\n        meta: updatedMeta,\n        files: updatedFiles\n      });\n    }\n\n    setFileMeta(fileID, data) {\n      const updatedFiles = { ...this.getState().files\n      };\n\n      if (!updatedFiles[fileID]) {\n        this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n        return;\n      }\n\n      const newMeta = { ...updatedFiles[fileID].meta,\n        ...data\n      };\n      updatedFiles[fileID] = { ...updatedFiles[fileID],\n        meta: newMeta\n      };\n      this.setState({\n        files: updatedFiles\n      });\n    }\n    /**\n     * Get a file object.\n     *\n     * @param {string} fileID The ID of the file object to return.\n     */\n\n\n    getFile(fileID) {\n      return this.getState().files[fileID];\n    }\n    /**\n     * Get all files in an array.\n     */\n\n\n    getFiles() {\n      const {\n        files\n      } = this.getState();\n      return Object.values(files);\n    }\n\n    getObjectOfFilesPerState() {\n      const {\n        files: filesObject,\n        totalProgress,\n        error\n      } = this.getState();\n      const files = Object.values(filesObject);\n      const inProgressFiles = files.filter(_ref => {\n        let {\n          progress\n        } = _ref;\n        return !progress.uploadComplete && progress.uploadStarted;\n      });\n      const newFiles = files.filter(file => !file.progress.uploadStarted);\n      const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n      const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n      const pausedFiles = files.filter(file => file.isPaused);\n      const completeFiles = files.filter(file => file.progress.uploadComplete);\n      const erroredFiles = files.filter(file => file.error);\n      const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n      const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n      return {\n        newFiles,\n        startedFiles,\n        uploadStartedFiles,\n        pausedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted: uploadStartedFiles.length > 0,\n        isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n        isAllErrored: !!error && erroredFiles.length === files.length,\n        isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n        isUploadInProgress: inProgressFiles.length > 0,\n        isSomeGhost: files.some(file => file.isGhost)\n      };\n    }\n    /**\n     * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.\n     * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.\n     *\n     * @param {object} file object to check\n     * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n     * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }\n     */\n\n\n    validateRestrictions(file, files) {\n      try {\n        _classPrivateFieldLooseBase$6(this, _checkRestrictions)[_checkRestrictions](file, files);\n\n        return {\n          result: true\n        };\n      } catch (err) {\n        return {\n          result: false,\n          reason: err.message\n        };\n      }\n    }\n    /**\n     * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,\n     * maxNumberOfFiles and allowedFileTypes.\n     *\n     * @param {object} file object to check\n     * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize\n     * @private\n     */\n\n\n    checkIfFileAlreadyExists(fileID) {\n      const {\n        files\n      } = this.getState();\n\n      if (files[fileID] && !files[fileID].isGhost) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Create a file state object based on user-provided `addFile()` options.\n     *\n     * Note this is extremely side-effectful and should only be done when a file state object\n     * will be added to state immediately afterward!\n     *\n     * The `files` value is passed in because it may be updated by the caller without updating the store.\n     */\n\n\n    /**\n     * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n     * try to guess file type in a clever way, check file against restrictions,\n     * and start an upload if `autoProceed === true`.\n     *\n     * @param {object} file object to add\n     * @returns {string} id for the added file\n     */\n    addFile(file) {\n      _classPrivateFieldLooseBase$6(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n      const {\n        files\n      } = this.getState();\n\n      let newFile = _classPrivateFieldLooseBase$6(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n      // and to keep the progress, meta and everthing else, we only replace said data\n\n\n      if (files[newFile.id] && files[newFile.id].isGhost) {\n        newFile = { ...files[newFile.id],\n          data: file.data,\n          isGhost: false\n        };\n        this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n      }\n\n      this.setState({\n        files: { ...files,\n          [newFile.id]: newFile\n        }\n      });\n      this.emit('file-added', newFile);\n      this.emit('files-added', [newFile]);\n      this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n\n      _classPrivateFieldLooseBase$6(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n      return newFile.id;\n    }\n    /**\n     * Add multiple files to `state.files`. See the `addFile()` documentation.\n     *\n     * If an error occurs while adding a file, it is logged and the user is notified.\n     * This is good for UI plugins, but not for programmatic use.\n     * Programmatic users should usually still use `addFile()` on individual files.\n     */\n\n\n    addFiles(fileDescriptors) {\n      _classPrivateFieldLooseBase$6(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n      const files = { ...this.getState().files\n      };\n      const newFiles = [];\n      const errors = [];\n\n      for (let i = 0; i < fileDescriptors.length; i++) {\n        try {\n          let newFile = _classPrivateFieldLooseBase$6(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n          // and to keep the progress, meta and everthing else, we only replace said data\n\n\n          if (files[newFile.id] && files[newFile.id].isGhost) {\n            newFile = { ...files[newFile.id],\n              data: fileDescriptors[i].data,\n              isGhost: false\n            };\n            this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n          }\n\n          files[newFile.id] = newFile;\n          newFiles.push(newFile);\n        } catch (err) {\n          if (!err.isRestriction) {\n            errors.push(err);\n          }\n        }\n      }\n\n      this.setState({\n        files\n      });\n      newFiles.forEach(newFile => {\n        this.emit('file-added', newFile);\n      });\n      this.emit('files-added', newFiles);\n\n      if (newFiles.length > 5) {\n        this.log(`Added batch of ${newFiles.length} files`);\n      } else {\n        Object.keys(newFiles).forEach(fileID => {\n          this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n        });\n      }\n\n      if (newFiles.length > 0) {\n        _classPrivateFieldLooseBase$6(this, _startIfAutoProceed)[_startIfAutoProceed]();\n      }\n\n      if (errors.length > 0) {\n        let message = 'Multiple errors occurred while adding files:\\n';\n        errors.forEach(subError => {\n          message += `\\n * ${subError.message}`;\n        });\n        this.info({\n          message: this.i18n('addBulkFilesFailed', {\n            smart_count: errors.length\n          }),\n          details: message\n        }, 'error', this.opts.infoTimeout);\n\n        if (typeof AggregateError === 'function') {\n          throw new AggregateError(errors, message);\n        } else {\n          const err = new Error(message);\n          err.errors = errors;\n          throw err;\n        }\n      }\n    }\n\n    removeFiles(fileIDs, reason) {\n      const {\n        files,\n        currentUploads\n      } = this.getState();\n      const updatedFiles = { ...files\n      };\n      const updatedUploads = { ...currentUploads\n      };\n      const removedFiles = Object.create(null);\n      fileIDs.forEach(fileID => {\n        if (files[fileID]) {\n          removedFiles[fileID] = files[fileID];\n          delete updatedFiles[fileID];\n        }\n      }); // Remove files from the `fileIDs` list in each upload.\n\n      function fileIsNotRemoved(uploadFileID) {\n        return removedFiles[uploadFileID] === undefined;\n      }\n\n      Object.keys(updatedUploads).forEach(uploadID => {\n        const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n        if (newFileIDs.length === 0) {\n          delete updatedUploads[uploadID];\n          return;\n        }\n\n        updatedUploads[uploadID] = { ...currentUploads[uploadID],\n          fileIDs: newFileIDs\n        };\n      });\n      const stateUpdate = {\n        currentUploads: updatedUploads,\n        files: updatedFiles\n      }; // If all files were removed - allow new uploads,\n      // and clear recoveredState\n\n      if (Object.keys(updatedFiles).length === 0) {\n        stateUpdate.allowNewUpload = true;\n        stateUpdate.error = null;\n        stateUpdate.recoveredState = null;\n      }\n\n      this.setState(stateUpdate);\n      this.calculateTotalProgress();\n      const removedFileIDs = Object.keys(removedFiles);\n      removedFileIDs.forEach(fileID => {\n        this.emit('file-removed', removedFiles[fileID], reason);\n      });\n\n      if (removedFileIDs.length > 5) {\n        this.log(`Removed ${removedFileIDs.length} files`);\n      } else {\n        this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n      }\n    }\n\n    removeFile(fileID, reason) {\n      if (reason === void 0) {\n        reason = null;\n      }\n\n      this.removeFiles([fileID], reason);\n    }\n\n    pauseResume(fileID) {\n      if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n        return undefined;\n      }\n\n      const wasPaused = this.getFile(fileID).isPaused || false;\n      const isPaused = !wasPaused;\n      this.setFileState(fileID, {\n        isPaused\n      });\n      this.emit('upload-pause', fileID, isPaused);\n      return isPaused;\n    }\n\n    pauseAll() {\n      const updatedFiles = { ...this.getState().files\n      };\n      const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n        return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n      });\n      inProgressUpdatedFiles.forEach(file => {\n        const updatedFile = { ...updatedFiles[file],\n          isPaused: true\n        };\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles\n      });\n      this.emit('pause-all');\n    }\n\n    resumeAll() {\n      const updatedFiles = { ...this.getState().files\n      };\n      const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n        return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n      });\n      inProgressUpdatedFiles.forEach(file => {\n        const updatedFile = { ...updatedFiles[file],\n          isPaused: false,\n          error: null\n        };\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles\n      });\n      this.emit('resume-all');\n    }\n\n    retryAll() {\n      const updatedFiles = { ...this.getState().files\n      };\n      const filesToRetry = Object.keys(updatedFiles).filter(file => {\n        return updatedFiles[file].error;\n      });\n      filesToRetry.forEach(file => {\n        const updatedFile = { ...updatedFiles[file],\n          isPaused: false,\n          error: null\n        };\n        updatedFiles[file] = updatedFile;\n      });\n      this.setState({\n        files: updatedFiles,\n        error: null\n      });\n      this.emit('retry-all', filesToRetry);\n\n      if (filesToRetry.length === 0) {\n        return Promise.resolve({\n          successful: [],\n          failed: []\n        });\n      }\n\n      const uploadID = _classPrivateFieldLooseBase$6(this, _createUpload)[_createUpload](filesToRetry, {\n        forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n      });\n\n      return _classPrivateFieldLooseBase$6(this, _runUpload)[_runUpload](uploadID);\n    }\n\n    cancelAll() {\n      this.emit('cancel-all');\n      const {\n        files\n      } = this.getState();\n      const fileIDs = Object.keys(files);\n\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all');\n      }\n\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null\n      });\n    }\n\n    retryUpload(fileID) {\n      this.setFileState(fileID, {\n        error: null,\n        isPaused: false\n      });\n      this.emit('upload-retry', fileID);\n\n      const uploadID = _classPrivateFieldLooseBase$6(this, _createUpload)[_createUpload]([fileID], {\n        forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n      });\n\n      return _classPrivateFieldLooseBase$6(this, _runUpload)[_runUpload](uploadID);\n    }\n\n    reset() {\n      this.cancelAll();\n    }\n\n    logout() {\n      this.iteratePlugins(plugin => {\n        if (plugin.provider && plugin.provider.logout) {\n          plugin.provider.logout();\n        }\n      });\n    }\n\n    calculateProgress(file, data) {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n      const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress,\n          bytesUploaded: data.bytesUploaded,\n          bytesTotal: data.bytesTotal,\n          percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n        }\n      });\n      this.calculateTotalProgress();\n    }\n\n    calculateTotalProgress() {\n      // calculate total progress, using the number of files currently uploading,\n      // multiplied by 100 and the summ of individual progress of each file\n      const files = this.getFiles();\n      const inProgress = files.filter(file => {\n        return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n      });\n\n      if (inProgress.length === 0) {\n        this.emit('progress', 0);\n        this.setState({\n          totalProgress: 0\n        });\n        return;\n      }\n\n      const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n      const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n\n      if (sizedFiles.length === 0) {\n        const progressMax = inProgress.length * 100;\n        const currentProgress = unsizedFiles.reduce((acc, file) => {\n          return acc + file.progress.percentage;\n        }, 0);\n        const totalProgress = Math.round(currentProgress / progressMax * 100);\n        this.setState({\n          totalProgress\n        });\n        return;\n      }\n\n      let totalSize = sizedFiles.reduce((acc, file) => {\n        return acc + file.progress.bytesTotal;\n      }, 0);\n      const averageSize = totalSize / sizedFiles.length;\n      totalSize += averageSize * unsizedFiles.length;\n      let uploadedSize = 0;\n      sizedFiles.forEach(file => {\n        uploadedSize += file.progress.bytesUploaded;\n      });\n      unsizedFiles.forEach(file => {\n        uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n      });\n      let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n      // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n      if (totalProgress > 100) {\n        totalProgress = 100;\n      }\n\n      this.setState({\n        totalProgress\n      });\n      this.emit('progress', totalProgress);\n    }\n    /**\n     * Registers listeners for all global actions, like:\n     * `error`, `file-removed`, `upload-progress`\n     */\n\n\n    updateOnlineStatus() {\n      const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n      if (!online) {\n        this.emit('is-offline');\n        this.info(this.i18n('noInternetConnection'), 'error', 0);\n        this.wasOffline = true;\n      } else {\n        this.emit('is-online');\n\n        if (this.wasOffline) {\n          this.emit('back-online');\n          this.info(this.i18n('connectedToInternet'), 'success', 3000);\n          this.wasOffline = false;\n        }\n      }\n    }\n\n    getID() {\n      return this.opts.id;\n    }\n    /**\n     * Registers a plugin with Core.\n     *\n     * @param {object} Plugin object\n     * @param {object} [opts] object with options to be passed to Plugin\n     * @returns {object} self for chaining\n     */\n    // eslint-disable-next-line no-shadow\n\n\n    use(Plugin, opts) {\n      if (typeof Plugin !== 'function') {\n        const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n        throw new TypeError(msg);\n      } // Instantiate\n\n\n      const plugin = new Plugin(this, opts);\n      const pluginId = plugin.id;\n\n      if (!pluginId) {\n        throw new Error('Your plugin must have an id');\n      }\n\n      if (!plugin.type) {\n        throw new Error('Your plugin must have a type');\n      }\n\n      const existsPluginAlready = this.getPlugin(pluginId);\n\n      if (existsPluginAlready) {\n        const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n        throw new Error(msg);\n      }\n\n      if (Plugin.VERSION) {\n        this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n      }\n\n      if (plugin.type in _classPrivateFieldLooseBase$6(this, _plugins)[_plugins]) {\n        _classPrivateFieldLooseBase$6(this, _plugins)[_plugins][plugin.type].push(plugin);\n      } else {\n        _classPrivateFieldLooseBase$6(this, _plugins)[_plugins][plugin.type] = [plugin];\n      }\n\n      plugin.install();\n      return this;\n    }\n    /**\n     * Find one Plugin by name.\n     *\n     * @param {string} id plugin id\n     * @returns {BasePlugin|undefined}\n     */\n\n\n    getPlugin(id) {\n      for (const plugins of Object.values(_classPrivateFieldLooseBase$6(this, _plugins)[_plugins])) {\n        const foundPlugin = plugins.find(plugin => plugin.id === id);\n        if (foundPlugin != null) return foundPlugin;\n      }\n\n      return undefined;\n    }\n\n    [_Symbol$for$1](type) {\n      return _classPrivateFieldLooseBase$6(this, _plugins)[_plugins][type];\n    }\n    /**\n     * Iterate through all `use`d plugins.\n     *\n     * @param {Function} method that will be run on each plugin\n     */\n\n\n    iteratePlugins(method) {\n      Object.values(_classPrivateFieldLooseBase$6(this, _plugins)[_plugins]).flat(1).forEach(method);\n    }\n    /**\n     * Uninstall and remove a plugin.\n     *\n     * @param {object} instance The plugin instance to remove.\n     */\n\n\n    removePlugin(instance) {\n      this.log(`Removing plugin ${instance.id}`);\n      this.emit('plugin-remove', instance);\n\n      if (instance.uninstall) {\n        instance.uninstall();\n      }\n\n      const list = _classPrivateFieldLooseBase$6(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n      // to a Proxy object, which failed the strict comparison test:\n      // obj !== objProxy\n\n\n      const index = list.findIndex(item => item.id === instance.id);\n\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n\n      const state = this.getState();\n      const updatedState = {\n        plugins: { ...state.plugins,\n          [instance.id]: undefined\n        }\n      };\n      this.setState(updatedState);\n    }\n    /**\n     * Uninstall all plugins and close down this Uppy instance.\n     */\n\n\n    close() {\n      this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n      this.reset();\n\n      _classPrivateFieldLooseBase$6(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n      this.iteratePlugins(plugin => {\n        this.removePlugin(plugin);\n      });\n\n      if (typeof window !== 'undefined' && window.removeEventListener) {\n        window.removeEventListener('online', _classPrivateFieldLooseBase$6(this, _updateOnlineStatus)[_updateOnlineStatus]);\n        window.removeEventListener('offline', _classPrivateFieldLooseBase$6(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      }\n    }\n\n    hideInfo() {\n      const {\n        info\n      } = this.getState();\n      this.setState({\n        info: info.slice(1)\n      });\n      this.emit('info-hidden');\n    }\n    /**\n     * Set info message in `state.info`, so that UI plugins like `Informer`\n     * can display the message.\n     *\n     * @param {string | object} message Message to be displayed by the informer\n     * @param {string} [type]\n     * @param {number} [duration]\n     */\n\n\n    info(message, type, duration) {\n      if (type === void 0) {\n        type = 'info';\n      }\n\n      if (duration === void 0) {\n        duration = 3000;\n      }\n\n      const isComplexMessage = typeof message === 'object';\n      this.setState({\n        info: [...this.getState().info, {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null\n        }]\n      });\n      setTimeout(() => this.hideInfo(), duration);\n      this.emit('info-visible');\n    }\n    /**\n     * Passes messages to a function, provided in `opts.logger`.\n     * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n     *\n     * @param {string|object} message to log\n     * @param {string} [type] optional `error` or `warning`\n     */\n\n\n    log(message, type) {\n      const {\n        logger\n      } = this.opts;\n\n      switch (type) {\n        case 'error':\n          logger.error(message);\n          break;\n\n        case 'warning':\n          logger.warn(message);\n          break;\n\n        default:\n          logger.debug(message);\n          break;\n      }\n    }\n    /**\n     * Restore an upload by its ID.\n     */\n\n\n    restore(uploadID) {\n      this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n\n      if (!this.getState().currentUploads[uploadID]) {\n        _classPrivateFieldLooseBase$6(this, _removeUpload)[_removeUpload](uploadID);\n\n        return Promise.reject(new Error('Nonexistent upload'));\n      }\n\n      return _classPrivateFieldLooseBase$6(this, _runUpload)[_runUpload](uploadID);\n    }\n    /**\n     * Create an upload for a bunch of files.\n     *\n     * @param {Array<string>} fileIDs File IDs to include in this upload.\n     * @returns {string} ID of this upload.\n     */\n\n\n    [_Symbol$for2$1]() {\n      return _classPrivateFieldLooseBase$6(this, _createUpload)[_createUpload](...arguments);\n    }\n\n    /**\n     * Add data to an upload's result object.\n     *\n     * @param {string} uploadID The ID of the upload.\n     * @param {object} data Data properties to add to the result object.\n     */\n    addResultData(uploadID, data) {\n      if (!_classPrivateFieldLooseBase$6(this, _getUpload)[_getUpload](uploadID)) {\n        this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n        return;\n      }\n\n      const {\n        currentUploads\n      } = this.getState();\n      const currentUpload = { ...currentUploads[uploadID],\n        result: { ...currentUploads[uploadID].result,\n          ...data\n        }\n      };\n      this.setState({\n        currentUploads: { ...currentUploads,\n          [uploadID]: currentUpload\n        }\n      });\n    }\n    /**\n     * Remove an upload, eg. if it has been canceled or completed.\n     *\n     * @param {string} uploadID The ID of the upload.\n     */\n\n\n    /**\n     * Start an upload for all the files that are not currently being uploaded.\n     *\n     * @returns {Promise}\n     */\n    upload() {\n      var _classPrivateFieldLoo;\n\n      if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase$6(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n        this.log('No uploader type plugins are used', 'warning');\n      }\n\n      let {\n        files\n      } = this.getState();\n      const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n      if (onBeforeUploadResult === false) {\n        return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n      }\n\n      if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n        files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n        // and then fetch the actual file object from state\n\n        this.setState({\n          files\n        });\n      }\n\n      return Promise.resolve().then(() => {\n        _classPrivateFieldLooseBase$6(this, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);\n\n        _classPrivateFieldLooseBase$6(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);\n      }).catch(err => {\n        _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);\n      }).then(() => {\n        const {\n          currentUploads\n        } = this.getState(); // get a list of files that are currently assigned to uploads\n\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n        const waitingFileIDs = [];\n        Object.keys(files).forEach(fileID => {\n          const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n          if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n            waitingFileIDs.push(file.id);\n          }\n        });\n\n        const uploadID = _classPrivateFieldLooseBase$6(this, _createUpload)[_createUpload](waitingFileIDs);\n\n        return _classPrivateFieldLooseBase$6(this, _runUpload)[_runUpload](uploadID);\n      }).catch(err => {\n        _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          showInformer: false\n        });\n      });\n    }\n\n  }\n\n  function _checkRestrictions2(file, files) {\n    if (files === void 0) {\n      files = this.getFiles();\n    }\n\n    const {\n      maxFileSize,\n      minFileSize,\n      maxTotalFileSize,\n      maxNumberOfFiles,\n      allowedFileTypes\n    } = this.opts.restrictions;\n\n    if (maxNumberOfFiles) {\n      if (files.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n        smart_count: maxNumberOfFiles\n      })}`);\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some(type => {\n        // check if this is a mime-type\n        if (type.indexOf('/') > -1) {\n          if (!file.type) return false;\n          return mimeMatch(file.type.replace(/;.*?$/, ''), type);\n        } // otherwise this is likely an extension\n\n\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.substr(1).toLowerCase();\n        }\n\n        return false;\n      });\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }));\n      }\n    } // We can't check maxTotalFileSize if the size is unknown.\n\n\n    if (maxTotalFileSize && file.size != null) {\n      let totalFilesSize = 0;\n      totalFilesSize += file.size;\n      files.forEach(f => {\n        totalFilesSize += f.size;\n      });\n\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check maxFileSize if the size is unknown.\n\n\n    if (maxFileSize && file.size != null) {\n      if (file.size > maxFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check minFileSize if the size is unknown.\n\n\n    if (minFileSize && file.size != null) {\n      if (file.size < minFileSize) {\n        throw new RestrictionError(this.i18n('inferiorSize', {\n          size: prettierBytes(minFileSize)\n        }));\n      }\n    }\n  }\n\n  function _checkMinNumberOfFiles2(files) {\n    const {\n      minNumberOfFiles\n    } = this.opts.restrictions;\n\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', {\n      smart_count: minNumberOfFiles\n    })}`);\n    }\n  }\n\n  function _checkRequiredMetaFieldsOnFile2(file) {\n    const {\n      requiredMetaFields\n    } = this.opts.restrictions;\n    const {\n      hasOwnProperty\n    } = Object.prototype;\n    const errors = [];\n    const missingFields = [];\n\n    for (let i = 0; i < requiredMetaFields.length; i++) {\n      if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {\n        const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', {\n        fileName: file.name\n      })}`);\n        errors.push(err);\n        missingFields.push(requiredMetaFields[i]);\n\n        _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n          file,\n          showInformer: false,\n          throwErr: false\n        });\n      }\n    }\n\n    this.setFileState(file.id, {\n      missingRequiredMetaFields: missingFields\n    });\n    return errors;\n  }\n\n  function _checkRequiredMetaFields2(files) {\n    const errors = Object.keys(files).flatMap(fileID => {\n      const file = this.getFile(fileID);\n      return _classPrivateFieldLooseBase$6(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);\n    });\n\n    if (errors.length) {\n      throw new AggregateRestrictionError(errors, `${this.i18n('missingRequiredMetaField')}`);\n    }\n  }\n\n  function _showOrLogErrorAndThrow2(err, _temp) {\n    let {\n      showInformer = true,\n      file = null,\n      throwErr = true\n    } = _temp === void 0 ? {} : _temp;\n    const message = typeof err === 'object' ? err.message : err;\n    const details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,\n    // as they are expected and shown in the UI.\n\n    let logMessageWithDetails = message;\n\n    if (details) {\n      logMessageWithDetails += ` ${details}`;\n    }\n\n    if (err.isRestriction) {\n      this.log(logMessageWithDetails);\n      this.emit('restriction-failed', file, err);\n    } else {\n      this.log(logMessageWithDetails, 'error');\n    } // Sometimes informer has to be shown manually by the developer,\n    // for example, in `onBeforeFileAdded`.\n\n\n    if (showInformer) {\n      this.info({\n        message,\n        details\n      }, 'error', this.opts.infoTimeout);\n    }\n\n    if (throwErr) {\n      throw typeof err === 'object' ? err : new Error(err);\n    }\n  }\n\n  function _assertNewUploadAllowed2(file) {\n    const {\n      allowNewUpload\n    } = this.getState();\n\n    if (allowNewUpload === false) {\n      _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {\n        file\n      });\n    }\n  }\n\n  function _checkAndCreateFileStateObject2(files, fileDescriptor) {\n    const fileType = getFileType(fileDescriptor);\n    const fileName = getFileName(fileType, fileDescriptor);\n    const fileExtension = getFileNameAndExtension(fileName).extension;\n    const isRemote = Boolean(fileDescriptor.isRemote);\n    const fileID = generateFileID({ ...fileDescriptor,\n      type: fileType\n    });\n\n    if (this.checkIfFileAlreadyExists(fileID)) {\n      const error = new RestrictionError(this.i18n('noDuplicates', {\n        fileName\n      }));\n\n      _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n        file: fileDescriptor\n      });\n    }\n\n    const meta = fileDescriptor.meta || {};\n    meta.name = fileName;\n    meta.type = fileType; // `null` means the size is unknown.\n\n    const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n    let newFile = {\n      source: fileDescriptor.source || '',\n      id: fileID,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: { ...this.getState().meta,\n        ...meta\n      },\n      type: fileType,\n      data: fileDescriptor.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null\n      },\n      size,\n      isRemote,\n      remote: fileDescriptor.remote || '',\n      preview: fileDescriptor.preview\n    };\n    const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n    if (onBeforeFileAddedResult === false) {\n      // Don’t show UI info for this error, as it should be done by the developer\n      _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {\n        showInformer: false,\n        fileDescriptor\n      });\n    } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n      newFile = onBeforeFileAddedResult;\n    }\n\n    try {\n      const filesArray = Object.keys(files).map(i => files[i]);\n\n      _classPrivateFieldLooseBase$6(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);\n    } catch (err) {\n      _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {\n        file: newFile\n      });\n    }\n\n    return newFile;\n  }\n\n  function _startIfAutoProceed2() {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null;\n        this.upload().catch(err => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err);\n          }\n        });\n      }, 4);\n    }\n  }\n\n  function _addListeners2() {\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    const errorHandler = (error, file, response) => {\n      let errorMsg = error.message || 'Unknown error';\n\n      if (error.details) {\n        errorMsg += ` ${error.details}`;\n      }\n\n      this.setState({\n        error: errorMsg\n      });\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response\n        });\n      }\n    };\n\n    this.on('error', errorHandler);\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response);\n\n      if (typeof error === 'object' && error.message) {\n        const newError = new Error(error.message);\n        newError.details = error.message;\n\n        if (error.details) {\n          newError.details += ` ${error.details}`;\n        }\n\n        newError.message = this.i18n('failedToUpload', {\n          file: file.name\n        });\n\n        _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {\n          throwErr: false\n        });\n      } else {\n        _classPrivateFieldLooseBase$6(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {\n          throwErr: false\n        });\n      }\n    });\n    this.on('upload', () => {\n      this.setState({\n        error: null\n      });\n    });\n    this.on('upload-started', file => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      this.setFileState(file.id, {\n        progress: {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size\n        }\n      });\n    });\n    this.on('upload-progress', this.calculateProgress);\n    this.on('upload-success', (file, uploadResp) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      const currentProgress = this.getFile(file.id).progress;\n      this.setFileState(file.id, {\n        progress: { ...currentProgress,\n          postprocess: _classPrivateFieldLooseBase$6(this, _postProcessors)[_postProcessors].size > 0 ? {\n            mode: 'indeterminate'\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal\n        },\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false\n      }); // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n        });\n      }\n\n      this.calculateTotalProgress();\n    });\n    this.on('preprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress,\n          preprocess: progress\n        }\n      });\n    });\n    this.on('preprocess-complete', file => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      const files = { ...this.getState().files\n      };\n      files[file.id] = { ...files[file.id],\n        progress: { ...files[file.id].progress\n        }\n      };\n      delete files[file.id].progress.preprocess;\n      this.setState({\n        files\n      });\n    });\n    this.on('postprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      this.setFileState(file.id, {\n        progress: { ...this.getState().files[file.id].progress,\n          postprocess: progress\n        }\n      });\n    });\n    this.on('postprocess-complete', file => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`);\n        return;\n      }\n\n      const files = { ...this.getState().files\n      };\n      files[file.id] = { ...files[file.id],\n        progress: { ...files[file.id].progress\n        }\n      };\n      delete files[file.id].progress.postprocess;\n      this.setState({\n        files\n      });\n    });\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress();\n    });\n    this.on('dashboard:file-edit-complete', file => {\n      if (file) {\n        _classPrivateFieldLooseBase$6(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);\n      }\n    }); // show informer if offline\n\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', _classPrivateFieldLooseBase$6(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.addEventListener('offline', _classPrivateFieldLooseBase$6(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      setTimeout(_classPrivateFieldLooseBase$6(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n    }\n  }\n\n  function _createUpload2(fileIDs, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const {\n      forceAllowNewUpload = false\n    } = opts;\n    const {\n      allowNewUpload,\n      currentUploads\n    } = this.getState();\n\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.');\n    }\n\n    const uploadID = nanoid$1();\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs\n    });\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n      currentUploads: { ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {}\n        }\n      }\n    });\n    return uploadID;\n  }\n\n  function _getUpload2(uploadID) {\n    const {\n      currentUploads\n    } = this.getState();\n    return currentUploads[uploadID];\n  }\n\n  function _removeUpload2(uploadID) {\n    const currentUploads = { ...this.getState().currentUploads\n    };\n    delete currentUploads[uploadID];\n    this.setState({\n      currentUploads\n    });\n  }\n\n  async function _runUpload2(uploadID) {\n    let {\n      currentUploads\n    } = this.getState();\n    let currentUpload = currentUploads[uploadID];\n    const restoreStep = currentUpload.step || 0;\n    const steps = [..._classPrivateFieldLooseBase$6(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase$6(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase$6(this, _postProcessors)[_postProcessors]];\n\n    try {\n      for (let step = restoreStep; step < steps.length; step++) {\n        if (!currentUpload) {\n          break;\n        }\n\n        const fn = steps[step];\n        const updatedUpload = { ...currentUpload,\n          step\n        };\n        this.setState({\n          currentUploads: { ...currentUploads,\n            [uploadID]: updatedUpload\n          }\n        }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n        await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n        currentUploads = this.getState().currentUploads;\n        currentUpload = currentUploads[uploadID];\n      }\n    } catch (err) {\n      this.emit('error', err);\n\n      _classPrivateFieldLooseBase$6(this, _removeUpload)[_removeUpload](uploadID);\n\n      throw err;\n    } // Set result data.\n\n\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach(fileID => {\n        const file = this.getFile(fileID);\n\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file);\n        }\n      });\n      const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n      const successful = files.filter(file => !file.error);\n      const failed = files.filter(file => file.error);\n      await this.addResultData(uploadID, {\n        successful,\n        failed,\n        uploadID\n      }); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    } // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n\n\n    let result;\n\n    if (currentUpload) {\n      result = currentUpload.result;\n      this.emit('complete', result);\n\n      _classPrivateFieldLooseBase$6(this, _removeUpload)[_removeUpload](uploadID);\n    }\n\n    if (result == null) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n    }\n\n    return result;\n  }\n\n  Uppy.VERSION = \"2.1.3\";\n  var Uppy_1$1 = Uppy;\n\n  var preact = createCommonjsModule$1(function (module, exports) {\n  var n,l,u,t,i,r,o,f,e={},c=[],s=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a(n,l){for(var u in l)n[u]=l[u];return n}function v(n){var l=n.parentNode;l&&l.removeChild(n);}function h(l,u,t){var i,r,o,f={};for(o in u)\"key\"==o?i=u[o]:\"ref\"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),\"function\"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return p(l,f,i,r,null)}function p(n,t,i,r,o){var f={type:n,props:t,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u:o};return null==o&&null!=l.vnode&&l.vnode(f),f}function y(n){return n.children}function d(n,l){this.props=n,this.context=l;}function _(n,l){if(null==l)return n.__?_(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return \"function\"==typeof n.type?_(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function x(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!b.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||r)(b);}function b(){for(var n;b.__r=i.length;)n=i.sort(function(n,l){return n.__v.__b-l.__v.__b}),i=[],n.some(function(n){var l,u,t,i,r,o;n.__d&&(r=(i=(l=n).__v).__e,(o=l.__P)&&(u=[],(t=a({},i)).__v=i.__v+1,I(o,i,t,l.__n,void 0!==o.ownerSVGElement,null!=i.__h?[r]:null,u,null==r?_(i):r,i.__h),T(u,i),i.__e!=r&&k(i)));});}function m(n,l,u,t,i,r,o,f,s,a){var v,h,d,k,x,b,m,A=t&&t.__k||c,P=A.length;for(u.__k=[],v=0;v<l.length;v++)if(null!=(k=u.__k[v]=null==(k=l[v])||\"boolean\"==typeof k?null:\"string\"==typeof k||\"number\"==typeof k||\"bigint\"==typeof k?p(null,k,null,null,k):Array.isArray(k)?p(y,{children:k},null,null,null):k.__b>0?p(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=A[v])||d&&k.key==d.key&&k.type===d.type)A[v]=void 0;else for(h=0;h<P;h++){if((d=A[h])&&k.key==d.key&&k.type===d.type){A[h]=void 0;break}d=null;}I(n,k,d=d||e,i,r,o,f,s,a),x=k.__e,(h=k.ref)&&d.ref!=h&&(m||(m=[]),d.ref&&m.push(d.ref,null,k),m.push(h,k.__c||x,k)),null!=x?(null==b&&(b=x),\"function\"==typeof k.type&&k.__k===d.__k?k.__d=s=g(k,s,n):s=w(n,k,d,A,x,s),\"function\"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_(d));}for(u.__e=b,v=P;v--;)null!=A[v]&&(\"function\"==typeof u.type&&null!=A[v].__e&&A[v].__e==u.__d&&(u.__d=_(t,v+1)),L(A[v],A[v]));if(m)for(v=0;v<m.length;v++)z(m[v],m[++v],m[++v]);}function g(n,l,u){for(var t,i=n.__k,r=0;i&&r<i.length;r++)(t=i[r])&&(t.__=n,l=\"function\"==typeof t.type?g(t,l,u):w(u,t,t,i,t.__e,l));return l}function w(n,l,u,t,i,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||i!=r||null==i.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(i),o=null;else {for(f=r,e=0;(f=f.nextSibling)&&e<t.length;e+=2)if(f==i)break n;n.insertBefore(i,r),o=r;}return void 0!==o?o:i.nextSibling}function A(n,l,u,t,i){var r;for(r in u)\"children\"===r||\"key\"===r||r in l||C(n,r,null,u[r],t);for(r in l)i&&\"function\"!=typeof l[r]||\"children\"===r||\"key\"===r||\"value\"===r||\"checked\"===r||u[r]===l[r]||C(n,r,l[r],u[r],t);}function P(n,l,u){\"-\"===l[0]?n.setProperty(l,u):n[l]=null==u?\"\":\"number\"!=typeof u||s.test(l)?u:u+\"px\";}function C(n,l,u,t,i){var r;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else {if(\"string\"==typeof t&&(n.style.cssText=t=\"\"),t)for(l in t)u&&l in u||P(n.style,l,\"\");if(u)for(l in u)t&&u[l]===t[l]||P(n.style,l,u[l]);}else if(\"o\"===l[0]&&\"n\"===l[1])r=l!==(l=l.replace(/Capture$/,\"\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?t||n.addEventListener(l,r?H:$,r):n.removeEventListener(l,r?H:$,r);else if(\"dangerouslySetInnerHTML\"!==l){if(i)l=l.replace(/xlink[H:h]/,\"h\").replace(/sName$/,\"s\");else if(\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null!=u&&(!1!==u||\"a\"===l[0]&&\"r\"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function $(n){this.l[n.type+!1](l.event?l.event(n):n);}function H(n){this.l[n.type+!0](l.event?l.event(n):n);}function I(n,u,t,i,r,o,f,e,c){var s,v,h,p,_,k,x,b,g,w,A,P=u.type;if(void 0!==u.constructor)return null;null!=t.__h&&(c=t.__h,e=u.__e=t.__e,u.__h=null,o=[e]),(s=l.__b)&&s(u);try{n:if(\"function\"==typeof P){if(b=u.props,g=(s=P.contextType)&&i[s.__c],w=s?g?g.props.value:s.__:i,t.__c?x=(v=u.__c=t.__c).__=v.__E:(\"prototype\"in P&&P.prototype.render?u.__c=v=new P(b,w):(u.__c=v=new d(b,w),v.constructor=P,v.render=M),g&&g.sub(v),v.props=b,v.state||(v.state={}),v.context=w,v.__n=i,h=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=P.getDerivedStateFromProps&&(v.__s==v.state&&(v.__s=a({},v.__s)),a(v.__s,P.getDerivedStateFromProps(b,v.__s))),p=v.props,_=v.state,h)null==P.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&v.__h.push(v.componentDidMount);else {if(null==P.getDerivedStateFromProps&&b!==p&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(b,w),!v.__e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(b,v.__s,w)||u.__v===t.__v){v.props=b,v.state=v.__s,u.__v!==t.__v&&(v.__d=!1),v.__v=u,u.__e=t.__e,u.__k=t.__k,u.__k.forEach(function(n){n&&(n.__=u);}),v.__h.length&&f.push(v);break n}null!=v.componentWillUpdate&&v.componentWillUpdate(b,v.__s,w),null!=v.componentDidUpdate&&v.__h.push(function(){v.componentDidUpdate(p,_,k);});}v.context=w,v.props=b,v.state=v.__s,(s=l.__r)&&s(u),v.__d=!1,v.__v=u,v.__P=n,s=v.render(v.props,v.state,v.context),v.state=v.__s,null!=v.getChildContext&&(i=a(a({},i),v.getChildContext())),h||null==v.getSnapshotBeforeUpdate||(k=v.getSnapshotBeforeUpdate(p,_)),A=null!=s&&s.type===y&&null==s.key?s.props.children:s,m(n,Array.isArray(A)?A:[A],u,t,i,r,o,f,e,c),v.base=u.__e,u.__h=null,v.__h.length&&f.push(v),x&&(v.__E=v.__=null),v.__e=!1;}else null==o&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=j(t.__e,u,t,i,r,o,f,c);(s=l.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l.__e(n,u,t);}}function T(n,u){l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l.__e(n,u.__v);}});}function j(l,u,t,i,r,o,f,c){var s,a,h,p=t.props,y=u.props,d=u.type,k=0;if(\"svg\"===d&&(r=!0),null!=o)for(;k<o.length;k++)if((s=o[k])&&\"setAttribute\"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,o[k]=null;break}if(null==l){if(null===d)return document.createTextNode(y);l=r?document.createElementNS(\"http://www.w3.org/2000/svg\",d):document.createElement(d,y.is&&y),o=null,c=!1;}if(null===d)p===y||c&&l.data===y||(l.data=y);else {if(o=o&&n.call(l.childNodes),a=(p=t.props||e).dangerouslySetInnerHTML,h=y.dangerouslySetInnerHTML,!c){if(null!=o)for(p={},k=0;k<l.attributes.length;k++)p[l.attributes[k].name]=l.attributes[k].value;(h||a)&&(h&&(a&&h.__html==a.__html||h.__html===l.innerHTML)||(l.innerHTML=h&&h.__html||\"\"));}if(A(l,y,p,r,c),h)u.__k=[];else if(k=u.props.children,m(l,Array.isArray(k)?k:[k],u,t,i,r&&\"foreignObject\"!==d,o,f,o?o[0]:t.__k&&_(t,0),c),null!=o)for(k=o.length;k--;)null!=o[k]&&v(o[k]);c||(\"value\"in y&&void 0!==(k=y.value)&&(k!==p.value||k!==l.value||\"progress\"===d&&!k)&&C(l,\"value\",k,p.value,!1),\"checked\"in y&&void 0!==(k=y.checked)&&k!==l.checked&&C(l,\"checked\",k,p.checked,!1));}return l}function z(n,u,t){try{\"function\"==typeof n?n(u):n.current=u;}catch(n){l.__e(n,t);}}function L(n,u,t){var i,r;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||z(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount();}catch(n){l.__e(n,u);}i.base=i.__P=null;}if(i=n.__k)for(r=0;r<i.length;r++)i[r]&&L(i[r],u,\"function\"!=typeof n.type);t||null==n.__e||v(n.__e),n.__e=n.__d=void 0;}function M(n,l,u){return this.constructor(n,u)}function N(u,t,i){var r,o,f;l.__&&l.__(u,t),o=(r=\"function\"==typeof i)?null:i&&i.__k||t.__k,f=[],I(t,u=(!r&&i||t).__k=h(y,null,[u]),o||e,e,void 0!==t.ownerSVGElement,!r&&i?[i]:o?null:t.firstChild?n.call(t.childNodes):null,f,!r&&i?i:o?o.__e:t.firstChild,r),T(f,u);}n=c.slice,l={__e:function(n,l){for(var u,t,i;l=l.__;)if((u=l.__c)&&!u.__)try{if((t=u.constructor)&&null!=t.getDerivedStateFromError&&(u.setState(t.getDerivedStateFromError(n)),i=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),i=u.__d),i)return u.__E=u}catch(l){n=l;}throw n}},u=0,t=function(n){return null!=n&&void 0===n.constructor},d.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a({},this.state),\"function\"==typeof n&&(n=n(a({},u),this.props)),n&&a(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),x(this));},d.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),x(this));},d.prototype.render=y,i=[],r=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,b.__r=0,f=0,exports.Component=d,exports.Fragment=y,exports.cloneElement=function(l,u,t){var i,r,o,f=a({},l.props);for(o in u)\"key\"==o?i=u[o]:\"ref\"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),p(l.type,f,i||l.key,r||l.ref,null)},exports.createContext=function(n,l){var u={__c:l=\"__cC\"+f++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,t;return this.getChildContext||(u=[],(t={})[l]=this,this.getChildContext=function(){return t},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(x);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u},exports.createElement=h,exports.createRef=function(){return {current:null}},exports.h=h,exports.hydrate=function n(l,u){N(l,u,n);},exports.isValidElement=t,exports.options=l,exports.render=N,exports.toChildArray=function n(l,u){return u=u||[],null==l||\"boolean\"==typeof l||(Array.isArray(l)?l.some(function(l){n(l,u);}):u.push(l)),u};\n\n  });\n\n  /**\n   * Check if an object is a DOM element. Duck-typing based on `nodeType`.\n   *\n   * @param {*} obj\n   */\n  var isDOMElement = function isDOMElement(obj) {\n    return (obj == null ? void 0 : obj.nodeType) === Node.ELEMENT_NODE;\n  };\n\n  /**\n   * Find a DOM element.\n   *\n   * @param {Node|string} element\n   * @returns {Node|null}\n   */\n\n\n  var findDOMElement = function findDOMElement(element, context) {\n    if (context === void 0) {\n      context = document;\n    }\n\n    if (typeof element === 'string') {\n      return context.querySelector(element);\n    }\n\n    if (isDOMElement(element)) {\n      return element;\n    }\n\n    return null;\n  };\n\n  /**\n   * Core plugin logic that all plugins share.\n   *\n   * BasePlugin does not contain DOM rendering so it can be used for plugins\n   * without a user interface.\n   *\n   * See `Plugin` for the extended version with Preact rendering for interfaces.\n   */\n\n\n  var BasePlugin_1$1 = class BasePlugin {\n    constructor(uppy, opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      this.uppy = uppy;\n      this.opts = opts;\n    }\n\n    getPluginState() {\n      const {\n        plugins\n      } = this.uppy.getState();\n      return plugins[this.id] || {};\n    }\n\n    setPluginState(update) {\n      const {\n        plugins\n      } = this.uppy.getState();\n      this.uppy.setState({\n        plugins: { ...plugins,\n          [this.id]: { ...plugins[this.id],\n            ...update\n          }\n        }\n      });\n    }\n\n    setOptions(newOpts) {\n      this.opts = { ...this.opts,\n        ...newOpts\n      };\n      this.setPluginState(); // so that UI re-renders with new options\n\n      this.i18nInit();\n    }\n\n    i18nInit() {\n      const translator = new Translator_1([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n      this.i18n = translator.translate.bind(translator);\n      this.i18nArray = translator.translateArray.bind(translator);\n      this.setPluginState(); // so that UI re-renders and we see the updated locale\n    }\n    /**\n     * Extendable methods\n     * ==================\n     * These methods are here to serve as an overview of the extendable methods as well as\n     * making them not conditional in use, such as `if (this.afterUpdate)`.\n     */\n    // eslint-disable-next-line class-methods-use-this\n\n\n    addTarget() {\n      throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n    } // eslint-disable-next-line class-methods-use-this\n\n\n    install() {} // eslint-disable-next-line class-methods-use-this\n\n\n    uninstall() {}\n    /**\n     * Called when plugin is mounted, whether in DOM or into another plugin.\n     * Needed because sometimes plugins are mounted separately/after `install`,\n     * so this.el and this.parent might not be available in `install`.\n     * This is the case with @uppy/react plugins, for example.\n     */\n\n\n    render() {\n      throw new Error('Extend the render method to add your plugin to a DOM element');\n    } // eslint-disable-next-line class-methods-use-this\n\n\n    update() {} // Called after every state update, after everything's mounted. Debounced.\n    // eslint-disable-next-line class-methods-use-this\n\n\n    afterUpdate() {}\n\n  };\n\n  function _classPrivateFieldLooseBase$5(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$5 = 0;\n\n  function _classPrivateFieldLooseKey$5(name) { return \"__private_\" + id$5++ + \"_\" + name; }\n\n  const {\n    render\n  } = preact;\n\n\n\n\n  /**\n   * Defer a frequent call to the microtask queue.\n   *\n   * @param {() => T} fn\n   * @returns {Promise<T>}\n   */\n\n\n  function debounce(fn) {\n    let calling = null;\n    let latestArgs = null;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      latestArgs = args;\n\n      if (!calling) {\n        calling = Promise.resolve().then(() => {\n          calling = null; // At this point `args` may be different from the most\n          // recent state, if multiple calls happened since this task\n          // was queued. So we use the `latestArgs`, which definitely\n          // is the most recent call.\n\n          return fn(...latestArgs);\n        });\n      }\n\n      return calling;\n    };\n  }\n  /**\n   * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.\n   * Use this for plugins that need a user interface.\n   *\n   * For plugins without an user interface, see BasePlugin.\n   */\n\n\n  var _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey$5(\"updateUI\");\n\n  class UIPlugin extends BasePlugin_1$1 {\n    constructor() {\n      super(...arguments);\n      Object.defineProperty(this, _updateUI, {\n        writable: true,\n        value: void 0\n      });\n    }\n\n    /**\n     * Check if supplied `target` is a DOM element or an `object`.\n     * If it’s an object — target is a plugin, and we search `plugins`\n     * for a plugin with same name and return its target.\n     */\n    mount(target, plugin) {\n      const callerPluginName = plugin.id;\n      const targetElement = findDOMElement(target);\n\n      if (targetElement) {\n        this.isTargetDOMEl = true; // When target is <body> with a single <div> element,\n        // Preact thinks it’s the Uppy root element in there when doing a diff,\n        // and destroys it. So we are creating a fragment (could be empty div)\n\n        const uppyRootElement = document.createDocumentFragment(); // API for plugins that require a synchronous rerender.\n\n        _classPrivateFieldLooseBase$5(this, _updateUI)[_updateUI] = debounce(state => {\n          // plugin could be removed, but this.rerender is debounced below,\n          // so it could still be called even after uppy.removePlugin or uppy.close\n          // hence the check\n          if (!this.uppy.getPlugin(this.id)) return;\n          render(this.render(state), uppyRootElement);\n          this.afterUpdate();\n        });\n        this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`);\n\n        if (this.opts.replaceTargetContent) {\n          // Doing render(h(null), targetElement), which should have been\n          // a better way, since because the component might need to do additional cleanup when it is removed,\n          // stopped working — Preact just adds null into target, not replacing\n          targetElement.innerHTML = '';\n        }\n\n        render(this.render(this.uppy.getState()), uppyRootElement);\n        this.el = uppyRootElement.firstElementChild;\n        targetElement.appendChild(uppyRootElement);\n        this.onMount();\n        return this.el;\n      }\n\n      let targetPlugin;\n\n      if (typeof target === 'object' && target instanceof UIPlugin) {\n        // Targeting a plugin *instance*\n        targetPlugin = target;\n      } else if (typeof target === 'function') {\n        // Targeting a plugin type\n        const Target = target; // Find the target plugin instance.\n\n        this.uppy.iteratePlugins(p => {\n          if (p instanceof Target) {\n            targetPlugin = p;\n            return false;\n          }\n        });\n      }\n\n      if (targetPlugin) {\n        this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`);\n        this.parent = targetPlugin;\n        this.el = targetPlugin.addTarget(plugin);\n        this.onMount();\n        return this.el;\n      }\n\n      this.uppy.log(`Not installing ${callerPluginName}`);\n      let message = `Invalid target option given to ${callerPluginName}.`;\n\n      if (typeof target === 'function') {\n        message += ' The given target is not a Plugin class. ' + 'Please check that you\\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';\n      } else {\n        message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\\n\\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';\n      }\n\n      throw new Error(message);\n    }\n\n    update(state) {\n      if (this.el != null) {\n        var _classPrivateFieldLoo, _classPrivateFieldLoo2;\n\n        (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase$5(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);\n      }\n    }\n\n    unmount() {\n      if (this.isTargetDOMEl) {\n        var _this$el;\n\n        (_this$el = this.el) == null ? void 0 : _this$el.remove();\n      }\n\n      this.onUnmount();\n    } // eslint-disable-next-line class-methods-use-this\n\n\n    onMount() {} // eslint-disable-next-line class-methods-use-this\n\n\n    onUnmount() {}\n\n  }\n\n  var UIPlugin_1$1 = UIPlugin;\n\n  const {\n    debugLogger\n  } = loggers;\n\n  var lib$2 = Uppy_1$1;\n  var Uppy_1 = Uppy_1$1;\n  var UIPlugin_1 = UIPlugin_1$1;\n  var BasePlugin_1 = BasePlugin_1$1;\n  var debugLogger_1 = debugLogger;\n  lib$2.Uppy = Uppy_1;\n  lib$2.UIPlugin = UIPlugin_1;\n  lib$2.BasePlugin = BasePlugin_1;\n  lib$2.debugLogger = debugLogger_1;\n\n  class NetworkError extends Error {\n    constructor(error, xhr) {\n      if (xhr === void 0) {\n        xhr = null;\n      }\n\n      super(`This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.`);\n      this.cause = error;\n      this.isNetworkError = true;\n      this.request = xhr;\n    }\n\n  }\n\n  var NetworkError_1 = NetworkError;\n\n  /**\n   * Wrapper around window.fetch that throws a NetworkError when appropriate\n   */\n\n\n  var fetchWithNetworkError = function fetchWithNetworkError() {\n    return fetch(...arguments).catch(err => {\n      if (err.name === 'AbortError') {\n        throw err;\n      } else {\n        throw new NetworkError_1(err);\n      }\n    });\n  };\n\n  class AuthError extends Error {\n    constructor() {\n      super('Authorization required');\n      this.name = 'AuthError';\n      this.isAuthError = true;\n    }\n\n  }\n\n  var AuthError_1 = AuthError;\n\n  var _class$1, _getPostResponseFunc, _getUrl, _errorHandler, _temp$1;\n\n  function _classPrivateFieldLooseBase$4(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$4 = 0;\n\n  function _classPrivateFieldLooseKey$4(name) { return \"__private_\" + id$4++ + \"_\" + name; }\n\n\n\n   // Remove the trailing slash so we can always safely append /xyz.\n\n\n  function stripSlash(url) {\n    return url.replace(/\\/$/, '');\n  }\n\n  async function handleJSONResponse(res) {\n    if (res.status === 401) {\n      throw new AuthError_1();\n    }\n\n    const jsonPromise = res.json();\n\n    if (res.status < 200 || res.status > 300) {\n      let errMsg = `Failed request with status: ${res.status}. ${res.statusText}`;\n\n      try {\n        const errData = await jsonPromise;\n        errMsg = errData.message ? `${errMsg} message: ${errData.message}` : errMsg;\n        errMsg = errData.requestId ? `${errMsg} request-Id: ${errData.requestId}` : errMsg;\n      } finally {\n        // eslint-disable-next-line no-unsafe-finally\n        throw new Error(errMsg);\n      }\n    }\n\n    return jsonPromise;\n  }\n\n  var RequestClient_1 = (_temp$1 = (_getPostResponseFunc = /*#__PURE__*/_classPrivateFieldLooseKey$4(\"getPostResponseFunc\"), _getUrl = /*#__PURE__*/_classPrivateFieldLooseKey$4(\"getUrl\"), _errorHandler = /*#__PURE__*/_classPrivateFieldLooseKey$4(\"errorHandler\"), _class$1 = class RequestClient {\n    // eslint-disable-next-line global-require\n    constructor(uppy, opts) {\n      Object.defineProperty(this, _errorHandler, {\n        value: _errorHandler2\n      });\n      Object.defineProperty(this, _getUrl, {\n        value: _getUrl2\n      });\n      Object.defineProperty(this, _getPostResponseFunc, {\n        writable: true,\n        value: skip => response => skip ? response : this.onReceiveResponse(response)\n      });\n      this.uppy = uppy;\n      this.opts = opts;\n      this.onReceiveResponse = this.onReceiveResponse.bind(this);\n      this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];\n      this.preflightDone = false;\n    }\n\n    get hostname() {\n      const {\n        companion\n      } = this.uppy.getState();\n      const host = this.opts.companionUrl;\n      return stripSlash(companion && companion[host] ? companion[host] : host);\n    }\n\n    headers() {\n      const userHeaders = this.opts.companionHeaders || {};\n      return Promise.resolve({ ...RequestClient.defaultHeaders,\n        ...userHeaders\n      });\n    }\n\n    onReceiveResponse(response) {\n      const state = this.uppy.getState();\n      const companion = state.companion || {};\n      const host = this.opts.companionUrl;\n      const {\n        headers\n      } = response; // Store the self-identified domain name for the Companion instance we just hit.\n\n      if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {\n        this.uppy.setState({\n          companion: { ...companion,\n            [host]: headers.get('i-am')\n          }\n        });\n      }\n\n      return response;\n    }\n\n    preflight(path) {\n      if (this.preflightDone) {\n        return Promise.resolve(this.allowedHeaders.slice());\n      }\n\n      return fetch(_classPrivateFieldLooseBase$4(this, _getUrl)[_getUrl](path), {\n        method: 'OPTIONS'\n      }).then(response => {\n        if (response.headers.has('access-control-allow-headers')) {\n          this.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(headerName => headerName.trim().toLowerCase());\n        }\n\n        this.preflightDone = true;\n        return this.allowedHeaders.slice();\n      }).catch(err => {\n        this.uppy.log(`[CompanionClient] unable to make preflight request ${err}`, 'warning');\n        this.preflightDone = true;\n        return this.allowedHeaders.slice();\n      });\n    }\n\n    preflightAndHeaders(path) {\n      return Promise.all([this.preflight(path), this.headers()]).then(_ref => {\n        let [allowedHeaders, headers] = _ref;\n        // filter to keep only allowed Headers\n        Object.keys(headers).forEach(header => {\n          if (!allowedHeaders.includes(header.toLowerCase())) {\n            this.uppy.log(`[CompanionClient] excluding disallowed header ${header}`);\n            delete headers[header]; // eslint-disable-line no-param-reassign\n          }\n        });\n        return headers;\n      });\n    }\n\n    get(path, skipPostResponse) {\n      const method = 'get';\n      return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase$4(this, _getUrl)[_getUrl](path), {\n        method,\n        headers,\n        credentials: this.opts.companionCookiesRule || 'same-origin'\n      })).then(_classPrivateFieldLooseBase$4(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase$4(this, _errorHandler)[_errorHandler](method, path));\n    }\n\n    post(path, data, skipPostResponse) {\n      const method = 'post';\n      return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase$4(this, _getUrl)[_getUrl](path), {\n        method,\n        headers,\n        credentials: this.opts.companionCookiesRule || 'same-origin',\n        body: JSON.stringify(data)\n      })).then(_classPrivateFieldLooseBase$4(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase$4(this, _errorHandler)[_errorHandler](method, path));\n    }\n\n    delete(path, data, skipPostResponse) {\n      const method = 'delete';\n      return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(`${this.hostname}/${path}`, {\n        method,\n        headers,\n        credentials: this.opts.companionCookiesRule || 'same-origin',\n        body: data ? JSON.stringify(data) : null\n      })).then(_classPrivateFieldLooseBase$4(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase$4(this, _errorHandler)[_errorHandler](method, path));\n    }\n\n  }), _class$1.VERSION = \"2.0.4\", _class$1.defaultHeaders = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    'Uppy-Versions': `@uppy/companion-client=${_class$1.VERSION}`\n  }, _temp$1);\n\n  function _getUrl2(url) {\n    if (/^(https?:|)\\/\\//.test(url)) {\n      return url;\n    }\n\n    return `${this.hostname}/${url}`;\n  }\n\n  function _errorHandler2(method, path) {\n    return err => {\n      var _err;\n\n      if (!((_err = err) != null && _err.isAuthError)) {\n        const error = new Error(`Could not ${method} ${_classPrivateFieldLooseBase$4(this, _getUrl)[_getUrl](path)}`);\n        error.cause = err;\n        err = error; // eslint-disable-line no-param-reassign\n      }\n\n      return Promise.reject(err);\n    };\n  }\n\n  /**\n   * This module serves as an Async wrapper for LocalStorage\n   */\n\n  var setItem = (key, value) => {\n    return new Promise(resolve => {\n      localStorage.setItem(key, value);\n      resolve();\n    });\n  };\n\n  var getItem = key => {\n    return Promise.resolve(localStorage.getItem(key));\n  };\n\n  var removeItem = key => {\n    return new Promise(resolve => {\n      localStorage.removeItem(key);\n      resolve();\n    });\n  };\n\n  var tokenStorage = {\n  \tsetItem: setItem,\n  \tgetItem: getItem,\n  \tremoveItem: removeItem\n  };\n\n  const getName$1 = id => {\n    return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');\n  };\n\n  var Provider_1 = class Provider extends RequestClient_1 {\n    constructor(uppy, opts) {\n      super(uppy, opts);\n      this.provider = opts.provider;\n      this.id = this.provider;\n      this.name = this.opts.name || getName$1(this.id);\n      this.pluginId = this.opts.pluginId;\n      this.tokenKey = `companion-${this.pluginId}-auth-token`;\n      this.companionKeysParams = this.opts.companionKeysParams;\n      this.preAuthToken = null;\n    }\n\n    headers() {\n      return Promise.all([super.headers(), this.getAuthToken()]).then(_ref => {\n        let [headers, token] = _ref;\n        const authHeaders = {};\n\n        if (token) {\n          authHeaders['uppy-auth-token'] = token;\n        }\n\n        if (this.companionKeysParams) {\n          authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({\n            params: this.companionKeysParams\n          }));\n        }\n\n        return { ...headers,\n          ...authHeaders\n        };\n      });\n    }\n\n    onReceiveResponse(response) {\n      response = super.onReceiveResponse(response);\n      const plugin = this.uppy.getPlugin(this.pluginId);\n      const oldAuthenticated = plugin.getPluginState().authenticated;\n      const authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;\n      plugin.setPluginState({\n        authenticated\n      });\n      return response;\n    }\n\n    setAuthToken(token) {\n      return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);\n    }\n\n    getAuthToken() {\n      return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);\n    }\n\n    authUrl(queries) {\n      if (queries === void 0) {\n        queries = {};\n      }\n\n      if (this.preAuthToken) {\n        queries.uppyPreAuthToken = this.preAuthToken;\n      }\n\n      return `${this.hostname}/${this.id}/connect?${new URLSearchParams(queries)}`;\n    }\n\n    fileUrl(id) {\n      return `${this.hostname}/${this.id}/get/${id}`;\n    }\n\n    fetchPreAuthToken() {\n      if (!this.companionKeysParams) {\n        return Promise.resolve();\n      }\n\n      return this.post(`${this.id}/preauth/`, {\n        params: this.companionKeysParams\n      }).then(res => {\n        this.preAuthToken = res.token;\n      }).catch(err => {\n        this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${err}`, 'warning');\n      });\n    }\n\n    list(directory) {\n      return this.get(`${this.id}/list/${directory || ''}`);\n    }\n\n    logout() {\n      return this.get(`${this.id}/logout`).then(response => Promise.all([response, this.uppy.getPlugin(this.pluginId).storage.removeItem(this.tokenKey)])).then(_ref2 => {\n        let [response] = _ref2;\n        return response;\n      });\n    }\n\n    static initPlugin(plugin, opts, defaultOpts) {\n      plugin.type = 'acquirer';\n      plugin.files = [];\n\n      if (defaultOpts) {\n        plugin.opts = { ...defaultOpts,\n          ...opts\n        };\n      }\n\n      if (opts.serverUrl || opts.serverPattern) {\n        throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');\n      }\n\n      if (opts.companionAllowedHosts) {\n        const pattern = opts.companionAllowedHosts; // validate companionAllowedHosts param\n\n        if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {\n          throw new TypeError(`${plugin.id}: the option \"companionAllowedHosts\" must be one of string, Array, RegExp`);\n        }\n\n        plugin.opts.companionAllowedHosts = pattern;\n      } else if (/^(?!https?:\\/\\/).*$/i.test(opts.companionUrl)) {\n        // does not start with https://\n        plugin.opts.companionAllowedHosts = `https://${opts.companionUrl.replace(/^\\/\\//, '')}`;\n      } else {\n        plugin.opts.companionAllowedHosts = new URL(opts.companionUrl).origin;\n      }\n\n      plugin.storage = plugin.opts.storage || tokenStorage;\n    }\n\n  };\n\n  const getName = id => {\n    return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');\n  };\n\n  var SearchProvider_1 = class SearchProvider extends RequestClient_1 {\n    constructor(uppy, opts) {\n      super(uppy, opts);\n      this.provider = opts.provider;\n      this.id = this.provider;\n      this.name = this.opts.name || getName(this.id);\n      this.pluginId = this.opts.pluginId;\n    }\n\n    fileUrl(id) {\n      return `${this.hostname}/search/${this.id}/get/${id}`;\n    }\n\n    search(text, queries) {\n      queries = queries ? `&${queries}` : '';\n      return this.get(`search/${this.id}/list?q=${encodeURIComponent(text)}${queries}`);\n    }\n\n  };\n\n  var _queued, _emitter$1, _isOpen, _socket, _handleMessage;\n\n  let _Symbol$for, _Symbol$for2;\n\n  function _classPrivateFieldLooseBase$3(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$3 = 0;\n\n  function _classPrivateFieldLooseKey$3(name) { return \"__private_\" + id$3++ + \"_\" + name; }\n\n\n\n  var Socket$1 = (_queued = /*#__PURE__*/_classPrivateFieldLooseKey$3(\"queued\"), _emitter$1 = /*#__PURE__*/_classPrivateFieldLooseKey$3(\"emitter\"), _isOpen = /*#__PURE__*/_classPrivateFieldLooseKey$3(\"isOpen\"), _socket = /*#__PURE__*/_classPrivateFieldLooseKey$3(\"socket\"), _handleMessage = /*#__PURE__*/_classPrivateFieldLooseKey$3(\"handleMessage\"), _Symbol$for = Symbol.for('uppy test: getSocket'), _Symbol$for2 = Symbol.for('uppy test: getQueued'), class UppySocket {\n    constructor(opts) {\n      Object.defineProperty(this, _queued, {\n        writable: true,\n        value: []\n      });\n      Object.defineProperty(this, _emitter$1, {\n        writable: true,\n        value: namespaceEmitter()\n      });\n      Object.defineProperty(this, _isOpen, {\n        writable: true,\n        value: false\n      });\n      Object.defineProperty(this, _socket, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _handleMessage, {\n        writable: true,\n        value: e => {\n          try {\n            const message = JSON.parse(e.data);\n            this.emit(message.action, message.payload);\n          } catch (err) {\n            // TODO: use a more robust error handler.\n            console.log(err); // eslint-disable-line no-console\n          }\n        }\n      });\n      this.opts = opts;\n\n      if (!opts || opts.autoOpen !== false) {\n        this.open();\n      }\n    }\n\n    get isOpen() {\n      return _classPrivateFieldLooseBase$3(this, _isOpen)[_isOpen];\n    }\n\n    [_Symbol$for]() {\n      return _classPrivateFieldLooseBase$3(this, _socket)[_socket];\n    }\n\n    [_Symbol$for2]() {\n      return _classPrivateFieldLooseBase$3(this, _queued)[_queued];\n    }\n\n    open() {\n      _classPrivateFieldLooseBase$3(this, _socket)[_socket] = new WebSocket(this.opts.target);\n\n      _classPrivateFieldLooseBase$3(this, _socket)[_socket].onopen = () => {\n        _classPrivateFieldLooseBase$3(this, _isOpen)[_isOpen] = true;\n\n        while (_classPrivateFieldLooseBase$3(this, _queued)[_queued].length > 0 && _classPrivateFieldLooseBase$3(this, _isOpen)[_isOpen]) {\n          const first = _classPrivateFieldLooseBase$3(this, _queued)[_queued].shift();\n\n          this.send(first.action, first.payload);\n        }\n      };\n\n      _classPrivateFieldLooseBase$3(this, _socket)[_socket].onclose = () => {\n        _classPrivateFieldLooseBase$3(this, _isOpen)[_isOpen] = false;\n      };\n\n      _classPrivateFieldLooseBase$3(this, _socket)[_socket].onmessage = _classPrivateFieldLooseBase$3(this, _handleMessage)[_handleMessage];\n    }\n\n    close() {\n      var _classPrivateFieldLoo;\n\n      (_classPrivateFieldLoo = _classPrivateFieldLooseBase$3(this, _socket)[_socket]) == null ? void 0 : _classPrivateFieldLoo.close();\n    }\n\n    send(action, payload) {\n      // attach uuid\n      if (!_classPrivateFieldLooseBase$3(this, _isOpen)[_isOpen]) {\n        _classPrivateFieldLooseBase$3(this, _queued)[_queued].push({\n          action,\n          payload\n        });\n\n        return;\n      }\n\n      _classPrivateFieldLooseBase$3(this, _socket)[_socket].send(JSON.stringify({\n        action,\n        payload\n      }));\n    }\n\n    on(action, handler) {\n      _classPrivateFieldLooseBase$3(this, _emitter$1)[_emitter$1].on(action, handler);\n    }\n\n    emit(action, payload) {\n      _classPrivateFieldLooseBase$3(this, _emitter$1)[_emitter$1].emit(action, payload);\n    }\n\n    once(action, handler) {\n      _classPrivateFieldLooseBase$3(this, _emitter$1)[_emitter$1].once(action, handler);\n    }\n\n  });\n\n  /**\n   * Manages communications with Companion\n   */\n\n\n\n\n\n\n\n\n\n  var lib$1 = {\n    RequestClient: RequestClient_1,\n    Provider: Provider_1,\n    SearchProvider: SearchProvider_1,\n    Socket: Socket$1\n  };\n\n  function emitSocketProgress(uploader, progressData, file) {\n    const {\n      progress,\n      bytesUploaded,\n      bytesTotal\n    } = progressData;\n\n    if (progress) {\n      uploader.uppy.log(`Upload progress: ${progress}`);\n      uploader.uppy.emit('upload-progress', file, {\n        uploader,\n        bytesUploaded,\n        bytesTotal\n      });\n    }\n  }\n\n  var emitSocketProgress_1 = lodash_throttle(emitSocketProgress, 300, {\n    leading: true,\n    trailing: true\n  });\n\n  var getSocketHost = function getSocketHost(url) {\n    // get the host domain\n    const regex = /^(?:https?:\\/\\/|\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^\\n]+)/i;\n    const host = regex.exec(url)[1];\n    const socketProtocol = /^http:\\/\\//i.test(url) ? 'ws' : 'wss';\n    return `${socketProtocol}://${host}`;\n  };\n\n  var settle = function settle(promises) {\n    const resolutions = [];\n    const rejections = [];\n\n    function resolved(value) {\n      resolutions.push(value);\n    }\n\n    function rejected(error) {\n      rejections.push(error);\n    }\n\n    const wait = Promise.all(promises.map(promise => promise.then(resolved, rejected)));\n    return wait.then(() => {\n      return {\n        successful: resolutions,\n        failed: rejections\n      };\n    });\n  };\n\n  var _emitter, _events;\n\n  function _classPrivateFieldLooseBase$2(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$2 = 0;\n\n  function _classPrivateFieldLooseKey$2(name) { return \"__private_\" + id$2++ + \"_\" + name; }\n\n  /**\n   * Create a wrapper around an event emitter with a `remove` method to remove\n   * all events that were added using the wrapped emitter.\n   */\n  var EventTracker_1 = (_emitter = /*#__PURE__*/_classPrivateFieldLooseKey$2(\"emitter\"), _events = /*#__PURE__*/_classPrivateFieldLooseKey$2(\"events\"), class EventTracker {\n    constructor(emitter) {\n      Object.defineProperty(this, _emitter, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _events, {\n        writable: true,\n        value: []\n      });\n      _classPrivateFieldLooseBase$2(this, _emitter)[_emitter] = emitter;\n    }\n\n    on(event, fn) {\n      _classPrivateFieldLooseBase$2(this, _events)[_events].push([event, fn]);\n\n      return _classPrivateFieldLooseBase$2(this, _emitter)[_emitter].on(event, fn);\n    }\n\n    remove() {\n      for (const [event, fn] of _classPrivateFieldLooseBase$2(this, _events)[_events].splice(0)) {\n        _classPrivateFieldLooseBase$2(this, _emitter)[_emitter].off(event, fn);\n      }\n    }\n\n  });\n\n  function _classPrivateFieldLooseBase$1(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id$1 = 0;\n\n  function _classPrivateFieldLooseKey$1(name) { return \"__private_\" + id$1++ + \"_\" + name; }\n\n  var _aliveTimer = /*#__PURE__*/_classPrivateFieldLooseKey$1(\"aliveTimer\");\n\n  var _isDone = /*#__PURE__*/_classPrivateFieldLooseKey$1(\"isDone\");\n\n  var _onTimedOut = /*#__PURE__*/_classPrivateFieldLooseKey$1(\"onTimedOut\");\n\n  var _timeout = /*#__PURE__*/_classPrivateFieldLooseKey$1(\"timeout\");\n\n  /**\n   * Helper to abort upload requests if there has not been any progress for `timeout` ms.\n   * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`\n   * Call `timer.progress()` to signal that there has been progress of any kind.\n   * Call `timer.done()` when the upload has completed.\n   */\n  class ProgressTimeout {\n    constructor(timeout, timeoutHandler) {\n      Object.defineProperty(this, _aliveTimer, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _isDone, {\n        writable: true,\n        value: false\n      });\n      Object.defineProperty(this, _onTimedOut, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _timeout, {\n        writable: true,\n        value: void 0\n      });\n      _classPrivateFieldLooseBase$1(this, _timeout)[_timeout] = timeout;\n      _classPrivateFieldLooseBase$1(this, _onTimedOut)[_onTimedOut] = timeoutHandler;\n    }\n\n    progress() {\n      // Some browsers fire another progress event when the upload is\n      // cancelled, so we have to ignore progress after the timer was\n      // told to stop.\n      if (_classPrivateFieldLooseBase$1(this, _isDone)[_isDone]) return;\n\n      if (_classPrivateFieldLooseBase$1(this, _timeout)[_timeout] > 0) {\n        clearTimeout(_classPrivateFieldLooseBase$1(this, _aliveTimer)[_aliveTimer]);\n        _classPrivateFieldLooseBase$1(this, _aliveTimer)[_aliveTimer] = setTimeout(_classPrivateFieldLooseBase$1(this, _onTimedOut)[_onTimedOut], _classPrivateFieldLooseBase$1(this, _timeout)[_timeout]);\n      }\n    }\n\n    done() {\n      if (!_classPrivateFieldLooseBase$1(this, _isDone)[_isDone]) {\n        clearTimeout(_classPrivateFieldLooseBase$1(this, _aliveTimer)[_aliveTimer]);\n        _classPrivateFieldLooseBase$1(this, _aliveTimer)[_aliveTimer] = null;\n        _classPrivateFieldLooseBase$1(this, _isDone)[_isDone] = true;\n      }\n    }\n\n  }\n\n  var ProgressTimeout_1 = ProgressTimeout;\n\n  function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\n  var id = 0;\n\n  function _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\n  function createCancelError() {\n    return new Error('Cancelled');\n  }\n\n  var _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey(\"activeRequests\");\n\n  var _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"queuedHandlers\");\n\n  var _call = /*#__PURE__*/_classPrivateFieldLooseKey(\"call\");\n\n  var _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey(\"queueNext\");\n\n  var _next = /*#__PURE__*/_classPrivateFieldLooseKey(\"next\");\n\n  var _queue = /*#__PURE__*/_classPrivateFieldLooseKey(\"queue\");\n\n  var _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey(\"dequeue\");\n\n  class RateLimitedQueue$1 {\n    constructor(limit) {\n      Object.defineProperty(this, _dequeue, {\n        value: _dequeue2\n      });\n      Object.defineProperty(this, _queue, {\n        value: _queue2\n      });\n      Object.defineProperty(this, _next, {\n        value: _next2\n      });\n      Object.defineProperty(this, _queueNext, {\n        value: _queueNext2\n      });\n      Object.defineProperty(this, _call, {\n        value: _call2\n      });\n      Object.defineProperty(this, _activeRequests, {\n        writable: true,\n        value: 0\n      });\n      Object.defineProperty(this, _queuedHandlers, {\n        writable: true,\n        value: []\n      });\n\n      if (typeof limit !== 'number' || limit === 0) {\n        this.limit = Infinity;\n      } else {\n        this.limit = limit;\n      }\n    }\n\n    run(fn, queueOptions) {\n      if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {\n        return _classPrivateFieldLooseBase(this, _call)[_call](fn);\n      }\n\n      return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);\n    }\n\n    wrapPromiseFunction(fn, queueOptions) {\n      var _this = this;\n\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        let queuedRequest;\n        const outerPromise = new Promise((resolve, reject) => {\n          queuedRequest = _this.run(() => {\n            let cancelError;\n            let innerPromise;\n\n            try {\n              innerPromise = Promise.resolve(fn(...args));\n            } catch (err) {\n              innerPromise = Promise.reject(err);\n            }\n\n            innerPromise.then(result => {\n              if (cancelError) {\n                reject(cancelError);\n              } else {\n                queuedRequest.done();\n                resolve(result);\n              }\n            }, err => {\n              if (cancelError) {\n                reject(cancelError);\n              } else {\n                queuedRequest.done();\n                reject(err);\n              }\n            });\n            return () => {\n              cancelError = createCancelError();\n            };\n          }, queueOptions);\n        });\n\n        outerPromise.abort = () => {\n          queuedRequest.abort();\n        };\n\n        return outerPromise;\n      };\n    }\n\n  }\n\n  function _call2(fn) {\n    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;\n    let done = false;\n    let cancelActive;\n\n    try {\n      cancelActive = fn();\n    } catch (err) {\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      throw err;\n    }\n\n    return {\n      abort: () => {\n        if (done) return;\n        done = true;\n        _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n        cancelActive();\n\n        _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n      },\n      done: () => {\n        if (done) return;\n        done = true;\n        _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n\n        _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n      }\n    };\n  }\n\n  function _queueNext2() {\n    // Do it soon but not immediately, this allows clearing out the entire queue synchronously\n    // one by one without continuously _advancing_ it (and starting new tasks before immediately\n    // aborting them)\n    queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());\n  }\n\n  function _next2() {\n    if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {\n      return;\n    }\n\n    if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {\n      return;\n    } // Dispatch the next request, and update the abort/done handlers\n    // so that cancelling it does the Right Thing (and doesn't just try\n    // to dequeue an already-running request).\n\n\n    const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();\n\n    const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);\n\n    next.abort = handler.abort;\n    next.done = handler.done;\n  }\n\n  function _queue2(fn, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const handler = {\n      fn,\n      priority: options.priority || 0,\n      abort: () => {\n        _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);\n      },\n      done: () => {\n        throw new Error('Cannot mark a queued request as done: this indicates a bug');\n      }\n    };\n\n    const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {\n      return handler.priority > other.priority;\n    });\n\n    if (index === -1) {\n      _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);\n    } else {\n      _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);\n    }\n\n    return handler;\n  }\n\n  function _dequeue2(handler) {\n    const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);\n\n    if (index !== -1) {\n      _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);\n    }\n  }\n\n  var RateLimitedQueue_1 = {\n    RateLimitedQueue: RateLimitedQueue$1,\n    internalRateLimitedQueue: Symbol('__queue')\n  };\n\n  function isNetworkError(xhr) {\n    if (!xhr) {\n      return false;\n    }\n\n    return xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0;\n  }\n\n  var isNetworkError_1 = isNetworkError;\n\n  var locale = {\n    strings: {\n      // Shown in the Informer if an upload is being canceled because it stalled for too long.\n      timedOut: 'Upload stalled for %{seconds} seconds, aborting.'\n    }\n  };\n\n  var _class, _temp;\n\n\n\n  const {\n    nanoid\n  } = require$$4;\n\n  const {\n    Provider,\n    RequestClient,\n    Socket\n  } = lib$1;\n\n\n\n\n\n\n\n\n\n\n\n  const {\n    RateLimitedQueue,\n    internalRateLimitedQueue\n  } = RateLimitedQueue_1;\n\n\n\n\n\n\n\n  function buildResponseError(xhr, err) {\n    let error = err; // No error message\n\n    if (!error) error = new Error('Upload error'); // Got an error message string\n\n    if (typeof error === 'string') error = new Error(error); // Got something else\n\n    if (!(error instanceof Error)) {\n      error = Object.assign(new Error('Upload error'), {\n        data: error\n      });\n    }\n\n    if (isNetworkError_1(xhr)) {\n      error = new NetworkError_1(error, xhr);\n      return error;\n    }\n\n    error.request = xhr;\n    return error;\n  }\n  /**\n   * Set `data.type` in the blob to `file.meta.type`,\n   * because we might have detected a more accurate file type in Uppy\n   * https://stackoverflow.com/a/50875615\n   *\n   * @param {object} file File object with `data`, `size` and `meta` properties\n   * @returns {object} blob updated with the new `type` set from `file.meta.type`\n   */\n\n\n  function setTypeInBlob(file) {\n    const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);\n    return dataWithUpdatedType;\n  }\n\n  var lib = (_temp = _class = class XHRUpload extends BasePlugin_1$1 {\n    // eslint-disable-next-line global-require\n    constructor(uppy, opts) {\n      super(uppy, opts);\n      this.type = 'uploader';\n      this.id = this.opts.id || 'XHRUpload';\n      this.title = 'XHRUpload';\n      this.defaultLocale = locale; // Default options\n\n      const defaultOptions = {\n        formData: true,\n        fieldName: opts.bundle ? 'files[]' : 'file',\n        method: 'post',\n        metaFields: null,\n        responseUrlFieldName: 'url',\n        bundle: false,\n        headers: {},\n        timeout: 30 * 1000,\n        limit: 5,\n        withCredentials: false,\n        responseType: '',\n\n        /**\n         * @typedef respObj\n         * @property {string} responseText\n         * @property {number} status\n         * @property {string} statusText\n         * @property {object.<string, string>} headers\n         *\n         * @param {string} responseText the response body string\n         * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)\n         */\n        getResponseData(responseText) {\n          let parsedResponse = {};\n\n          try {\n            parsedResponse = JSON.parse(responseText);\n          } catch (err) {\n            uppy.log(err);\n          }\n\n          return parsedResponse;\n        },\n\n        /**\n         *\n         * @param {string} responseText the response body string\n         * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)\n         */\n        getResponseError(_, response) {\n          let error = new Error('Upload error');\n\n          if (isNetworkError_1(response)) {\n            error = new NetworkError_1(error, response);\n          }\n\n          return error;\n        },\n\n        /**\n         * Check if the response from the upload endpoint indicates that the upload was successful.\n         *\n         * @param {number} status the response status code\n         */\n        validateStatus(status) {\n          return status >= 200 && status < 300;\n        }\n\n      };\n      this.opts = { ...defaultOptions,\n        ...opts\n      };\n      this.i18nInit();\n      this.handleUpload = this.handleUpload.bind(this); // Simultaneous upload limiting is shared across all uploads with this plugin.\n\n      if (internalRateLimitedQueue in this.opts) {\n        this.requests = this.opts[internalRateLimitedQueue];\n      } else {\n        this.requests = new RateLimitedQueue(this.opts.limit);\n      }\n\n      if (this.opts.bundle && !this.opts.formData) {\n        throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');\n      }\n\n      this.uploaderEvents = Object.create(null);\n    }\n\n    getOptions(file) {\n      const overrides = this.uppy.getState().xhrUpload;\n      const {\n        headers\n      } = this.opts;\n      const opts = { ...this.opts,\n        ...(overrides || {}),\n        ...(file.xhrUpload || {}),\n        headers: {}\n      }; // Support for `headers` as a function, only in the XHRUpload settings.\n      // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.\n      //\n      // ```js\n      // headers: (file) => ({ expires: file.meta.expires })\n      // ```\n\n      if (typeof headers === 'function') {\n        opts.headers = headers(file);\n      } else {\n        Object.assign(opts.headers, this.opts.headers);\n      }\n\n      if (overrides) {\n        Object.assign(opts.headers, overrides.headers);\n      }\n\n      if (file.xhrUpload) {\n        Object.assign(opts.headers, file.xhrUpload.headers);\n      }\n\n      return opts;\n    } // eslint-disable-next-line class-methods-use-this\n\n\n    addMetadata(formData, meta, opts) {\n      const metaFields = Array.isArray(opts.metaFields) ? opts.metaFields : Object.keys(meta); // Send along all fields by default.\n\n      metaFields.forEach(item => {\n        formData.append(item, meta[item]);\n      });\n    }\n\n    createFormDataUpload(file, opts) {\n      const formPost = new FormData();\n      this.addMetadata(formPost, file.meta, opts);\n      const dataWithUpdatedType = setTypeInBlob(file);\n\n      if (file.name) {\n        formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);\n      } else {\n        formPost.append(opts.fieldName, dataWithUpdatedType);\n      }\n\n      return formPost;\n    }\n\n    createBundledUpload(files, opts) {\n      const formPost = new FormData();\n      const {\n        meta\n      } = this.uppy.getState();\n      this.addMetadata(formPost, meta, opts);\n      files.forEach(file => {\n        const options = this.getOptions(file);\n        const dataWithUpdatedType = setTypeInBlob(file);\n\n        if (file.name) {\n          formPost.append(options.fieldName, dataWithUpdatedType, file.name);\n        } else {\n          formPost.append(options.fieldName, dataWithUpdatedType);\n        }\n      });\n      return formPost;\n    }\n\n    upload(file, current, total) {\n      const opts = this.getOptions(file);\n      this.uppy.log(`uploading ${current} of ${total}`);\n      return new Promise((resolve, reject) => {\n        this.uppy.emit('upload-started', file);\n        const data = opts.formData ? this.createFormDataUpload(file, opts) : file.data;\n        const xhr = new XMLHttpRequest();\n        this.uploaderEvents[file.id] = new EventTracker_1(this.uppy);\n        const timer = new ProgressTimeout_1(opts.timeout, () => {\n          xhr.abort();\n          queuedRequest.done();\n          const error = new Error(this.i18n('timedOut', {\n            seconds: Math.ceil(opts.timeout / 1000)\n          }));\n          this.uppy.emit('upload-error', file, error);\n          reject(error);\n        });\n        const id = nanoid();\n        xhr.upload.addEventListener('loadstart', () => {\n          this.uppy.log(`[XHRUpload] ${id} started`);\n        });\n        xhr.upload.addEventListener('progress', ev => {\n          this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`); // Begin checking for timeouts when progress starts, instead of loading,\n          // to avoid timing out requests on browser concurrency queue\n\n          timer.progress();\n\n          if (ev.lengthComputable) {\n            this.uppy.emit('upload-progress', file, {\n              uploader: this,\n              bytesUploaded: ev.loaded,\n              bytesTotal: ev.total\n            });\n          }\n        });\n        xhr.addEventListener('load', ev => {\n          this.uppy.log(`[XHRUpload] ${id} finished`);\n          timer.done();\n          queuedRequest.done();\n\n          if (this.uploaderEvents[file.id]) {\n            this.uploaderEvents[file.id].remove();\n            this.uploaderEvents[file.id] = null;\n          }\n\n          if (opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {\n            const body = opts.getResponseData(xhr.responseText, xhr);\n            const uploadURL = body[opts.responseUrlFieldName];\n            const uploadResp = {\n              status: ev.target.status,\n              body,\n              uploadURL\n            };\n            this.uppy.emit('upload-success', file, uploadResp);\n\n            if (uploadURL) {\n              this.uppy.log(`Download ${file.name} from ${uploadURL}`);\n            }\n\n            return resolve(file);\n          }\n\n          const body = opts.getResponseData(xhr.responseText, xhr);\n          const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n          const response = {\n            status: ev.target.status,\n            body\n          };\n          this.uppy.emit('upload-error', file, error, response);\n          return reject(error);\n        });\n        xhr.addEventListener('error', () => {\n          this.uppy.log(`[XHRUpload] ${id} errored`);\n          timer.done();\n          queuedRequest.done();\n\n          if (this.uploaderEvents[file.id]) {\n            this.uploaderEvents[file.id].remove();\n            this.uploaderEvents[file.id] = null;\n          }\n\n          const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));\n          this.uppy.emit('upload-error', file, error);\n          return reject(error);\n        });\n        xhr.open(opts.method.toUpperCase(), opts.endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`\n        // before `open()` is called.\n\n        xhr.withCredentials = opts.withCredentials;\n\n        if (opts.responseType !== '') {\n          xhr.responseType = opts.responseType;\n        }\n\n        const queuedRequest = this.requests.run(() => {\n          this.uppy.emit('upload-started', file); // When using an authentication system like JWT, the bearer token goes as a header. This\n          // header needs to be fresh each time the token is refreshed so computing and setting the\n          // headers just before the upload starts enables this kind of authentication to work properly.\n          // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.\n\n          const currentOpts = this.getOptions(file);\n          Object.keys(currentOpts.headers).forEach(header => {\n            xhr.setRequestHeader(header, currentOpts.headers[header]);\n          });\n          xhr.send(data);\n          return () => {\n            timer.done();\n            xhr.abort();\n          };\n        });\n        this.onFileRemove(file.id, () => {\n          queuedRequest.abort();\n          reject(new Error('File removed'));\n        });\n        this.onCancelAll(file.id, () => {\n          queuedRequest.abort();\n          reject(new Error('Upload cancelled'));\n        });\n      });\n    }\n\n    uploadRemote(file) {\n      const opts = this.getOptions(file);\n      return new Promise((resolve, reject) => {\n        this.uppy.emit('upload-started', file);\n        const fields = {};\n        const metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.\n        : Object.keys(file.meta);\n        metaFields.forEach(name => {\n          fields[name] = file.meta[name];\n        });\n        const Client = file.remote.providerOptions.provider ? Provider : RequestClient;\n        const client = new Client(this.uppy, file.remote.providerOptions);\n        client.post(file.remote.url, { ...file.remote.body,\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          metadata: fields,\n          httpMethod: opts.method,\n          useFormData: opts.formData,\n          headers: opts.headers\n        }).then(res => {\n          const {\n            token\n          } = res;\n          const host = getSocketHost(file.remote.companionUrl);\n          const socket = new Socket({\n            target: `${host}/api/${token}`,\n            autoOpen: false\n          });\n          this.uploaderEvents[file.id] = new EventTracker_1(this.uppy);\n          this.onFileRemove(file.id, () => {\n            socket.send('cancel', {});\n            queuedRequest.abort();\n            resolve(`upload ${file.id} was removed`);\n          });\n          this.onCancelAll(file.id, () => {\n            socket.send('cancel', {});\n            queuedRequest.abort();\n            resolve(`upload ${file.id} was canceled`);\n          });\n          this.onRetry(file.id, () => {\n            socket.send('pause', {});\n            socket.send('resume', {});\n          });\n          this.onRetryAll(file.id, () => {\n            socket.send('pause', {});\n            socket.send('resume', {});\n          });\n          socket.on('progress', progressData => emitSocketProgress_1(this, progressData, file));\n          socket.on('success', data => {\n            const body = opts.getResponseData(data.response.responseText, data.response);\n            const uploadURL = body[opts.responseUrlFieldName];\n            const uploadResp = {\n              status: data.response.status,\n              body,\n              uploadURL\n            };\n            this.uppy.emit('upload-success', file, uploadResp);\n            queuedRequest.done();\n\n            if (this.uploaderEvents[file.id]) {\n              this.uploaderEvents[file.id].remove();\n              this.uploaderEvents[file.id] = null;\n            }\n\n            return resolve();\n          });\n          socket.on('error', errData => {\n            const resp = errData.response;\n            const error = resp ? opts.getResponseError(resp.responseText, resp) : Object.assign(new Error(errData.error.message), {\n              cause: errData.error\n            });\n            this.uppy.emit('upload-error', file, error);\n            queuedRequest.done();\n\n            if (this.uploaderEvents[file.id]) {\n              this.uploaderEvents[file.id].remove();\n              this.uploaderEvents[file.id] = null;\n            }\n\n            reject(error);\n          });\n          const queuedRequest = this.requests.run(() => {\n            socket.open();\n\n            if (file.isPaused) {\n              socket.send('pause', {});\n            }\n\n            return () => socket.close();\n          });\n        }).catch(err => {\n          this.uppy.emit('upload-error', file, err);\n          reject(err);\n        });\n      });\n    }\n\n    uploadBundle(files) {\n      return new Promise((resolve, reject) => {\n        const {\n          endpoint\n        } = this.opts;\n        const {\n          method\n        } = this.opts;\n        const optsFromState = this.uppy.getState().xhrUpload;\n        const formData = this.createBundledUpload(files, { ...this.opts,\n          ...(optsFromState || {})\n        });\n        const xhr = new XMLHttpRequest();\n        const timer = new ProgressTimeout_1(this.opts.timeout, () => {\n          xhr.abort();\n          const error = new Error(this.i18n('timedOut', {\n            seconds: Math.ceil(this.opts.timeout / 1000)\n          }));\n          emitError(error);\n          reject(error);\n        });\n\n        const emitError = error => {\n          files.forEach(file => {\n            this.uppy.emit('upload-error', file, error);\n          });\n        };\n\n        xhr.upload.addEventListener('loadstart', () => {\n          this.uppy.log('[XHRUpload] started uploading bundle');\n          timer.progress();\n        });\n        xhr.upload.addEventListener('progress', ev => {\n          timer.progress();\n          if (!ev.lengthComputable) return;\n          files.forEach(file => {\n            this.uppy.emit('upload-progress', file, {\n              uploader: this,\n              bytesUploaded: ev.loaded / ev.total * file.size,\n              bytesTotal: file.size\n            });\n          });\n        });\n        xhr.addEventListener('load', ev => {\n          timer.done();\n\n          if (this.opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {\n            const body = this.opts.getResponseData(xhr.responseText, xhr);\n            const uploadResp = {\n              status: ev.target.status,\n              body\n            };\n            files.forEach(file => {\n              this.uppy.emit('upload-success', file, uploadResp);\n            });\n            return resolve();\n          }\n\n          const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n          error.request = xhr;\n          emitError(error);\n          return reject(error);\n        });\n        xhr.addEventListener('error', () => {\n          timer.done();\n          const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');\n          emitError(error);\n          return reject(error);\n        });\n        this.uppy.on('cancel-all', () => {\n          timer.done();\n          xhr.abort();\n        });\n        xhr.open(method.toUpperCase(), endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`\n        // before `open()` is called.\n\n        xhr.withCredentials = this.opts.withCredentials;\n\n        if (this.opts.responseType !== '') {\n          xhr.responseType = this.opts.responseType;\n        }\n\n        Object.keys(this.opts.headers).forEach(header => {\n          xhr.setRequestHeader(header, this.opts.headers[header]);\n        });\n        xhr.send(formData);\n        files.forEach(file => {\n          this.uppy.emit('upload-started', file);\n        });\n      });\n    }\n\n    uploadFiles(files) {\n      const promises = files.map((file, i) => {\n        const current = parseInt(i, 10) + 1;\n        const total = files.length;\n\n        if (file.error) {\n          return Promise.reject(new Error(file.error));\n        }\n\n        if (file.isRemote) {\n          return this.uploadRemote(file, current, total);\n        }\n\n        return this.upload(file, current, total);\n      });\n      return settle(promises);\n    }\n\n    onFileRemove(fileID, cb) {\n      this.uploaderEvents[fileID].on('file-removed', file => {\n        if (fileID === file.id) cb(file.id);\n      });\n    }\n\n    onRetry(fileID, cb) {\n      this.uploaderEvents[fileID].on('upload-retry', targetFileID => {\n        if (fileID === targetFileID) {\n          cb();\n        }\n      });\n    }\n\n    onRetryAll(fileID, cb) {\n      this.uploaderEvents[fileID].on('retry-all', () => {\n        if (!this.uppy.getFile(fileID)) return;\n        cb();\n      });\n    }\n\n    onCancelAll(fileID, cb) {\n      this.uploaderEvents[fileID].on('cancel-all', () => {\n        if (!this.uppy.getFile(fileID)) return;\n        cb();\n      });\n    }\n\n    handleUpload(fileIDs) {\n      if (fileIDs.length === 0) {\n        this.uppy.log('[XHRUpload] No files to upload!');\n        return Promise.resolve();\n      } // No limit configured by the user, and no RateLimitedQueue passed in by a \"parent\" plugin\n      // (basically just AwsS3) using the internal symbol\n\n\n      if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {\n        this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');\n      }\n\n      this.uppy.log('[XHRUpload] Uploading...');\n      const files = fileIDs.map(fileID => this.uppy.getFile(fileID));\n\n      if (this.opts.bundle) {\n        // if bundle: true, we don’t support remote uploads\n        const isSomeFileRemote = files.some(file => file.isRemote);\n\n        if (isSomeFileRemote) {\n          throw new Error('Can’t upload remote files when the `bundle: true` option is set');\n        }\n\n        if (typeof this.opts.headers === 'function') {\n          throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');\n        }\n\n        return this.uploadBundle(files);\n      }\n\n      return this.uploadFiles(files).then(() => null);\n    }\n\n    install() {\n      if (this.opts.bundle) {\n        const {\n          capabilities\n        } = this.uppy.getState();\n        this.uppy.setState({\n          capabilities: { ...capabilities,\n            individualCancellation: false\n          }\n        });\n      }\n\n      this.uppy.addUploader(this.handleUpload);\n    }\n\n    uninstall() {\n      if (this.opts.bundle) {\n        const {\n          capabilities\n        } = this.uppy.getState();\n        this.uppy.setState({\n          capabilities: { ...capabilities,\n            individualCancellation: true\n          }\n        });\n      }\n\n      this.uppy.removeUploader(this.handleUpload);\n    }\n\n  }, _class.VERSION = \"2.0.6\", _temp);\n\n  var require$$2$1 = dist$7;\n\n  var require$$1 = dom7_cjs;\n\n  var require$$2 = snabbdom_cjs;\n\n  var dist$6 = createCommonjsModule$1(function (module, exports) {\n  !function(e,t){t(exports,require$$2$1,lodash_toarray,require$$1,lodash_foreach,require$$4,lodash_throttle,require$$2,lodash_camelcase,lib$4,lodash_debounce,lodash_clonedeep,lib$2,lib);}(commonjsGlobal,(function(e,t,n,r,o,i,a,s,l,u,c,f,d,p){function h(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var g=h(t),v=h(n),y=h(r),m=h(o),b=h(a),w=h(l),x=h(c),E=h(f),S=h(d),k=h(p),O=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function C(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}function T(e){var t={exports:{}};return e(t,t.exports),t.exports}var N,M,L=function(e){return e&&e.Math==Math&&e},P=L(\"object\"==typeof globalThis&&globalThis)||L(\"object\"==typeof window&&window)||L(\"object\"==typeof self&&self)||L(\"object\"==typeof O&&O)||function(){return this}()||Function(\"return this\")(),R=Object.defineProperty,D=function(e,t){try{R(P,e,{value:t,configurable:!0,writable:!0});}catch(n){P[e]=t;}return t},j=\"__core-js_shared__\",A=P[j]||D(j,{}),_=T((function(e){(e.exports=function(e,t){return A[e]||(A[e]=void 0!==t?t:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),F=Function.prototype,I=F.bind,B=F.call,$=I&&I.bind(B),W=I?function(e){return e&&$(B,e)}:function(e){return e&&function(){return B.apply(e,arguments)}},H=P.TypeError,V=function(e){if(null==e)throw H(\"Can't call method on \"+e);return e},z=P.Object,U=function(e){return z(V(e))},K=W({}.hasOwnProperty),q=Object.hasOwn||function(e,t){return K(U(e),t)},G=0,J=Math.random(),Y=W(1..toString),X=function(e){return \"Symbol(\"+(void 0===e?\"\":e)+\")_\"+Y(++G+J,36)},Q=function(e){return \"function\"==typeof e},Z=function(e){return Q(e)?e:void 0},ee=function(e,t){return arguments.length<2?Z(P[e]):P[e]&&P[e][t]},te=ee(\"navigator\",\"userAgent\")||\"\",ne=P.process,re=P.Deno,oe=ne&&ne.versions||re&&re.version,ie=oe&&oe.v8;ie&&(M=(N=ie.split(\".\"))[0]>0&&N[0]<4?1:+(N[0]+N[1])),!M&&te&&(!(N=te.match(/Edge\\/(\\d+)/))||N[1]>=74)&&(N=te.match(/Chrome\\/(\\d+)/))&&(M=+N[1]);var ae=M,se=function(e){try{return !!e()}catch(e){return !0}},le=!!Object.getOwnPropertySymbols&&!se((function(){var e=Symbol();return !String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&ae&&ae<41})),ue=le&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,ce=_(\"wks\"),fe=P.Symbol,de=fe&&fe.for,pe=ue?fe:fe&&fe.withoutSetter||X,he=function(e){if(!q(ce,e)||!le&&\"string\"!=typeof ce[e]){var t=\"Symbol.\"+e;le&&q(fe,e)?ce[e]=fe[e]:ce[e]=ue&&de?de(t):pe(t);}return ce[e]},ge={};ge[he(\"toStringTag\")]=\"z\";var ve=\"[object z]\"===String(ge),ye=!se((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),me=function(e){return \"object\"==typeof e?null!==e:Q(e)},be=P.document,we=me(be)&&me(be.createElement),xe=function(e){return we?be.createElement(e):{}},Ee=!ye&&!se((function(){return 7!=Object.defineProperty(xe(\"div\"),\"a\",{get:function(){return 7}}).a})),Se=P.String,ke=P.TypeError,Oe=function(e){if(me(e))return e;throw ke(Se(e)+\" is not an object\")},Ce=Function.prototype.call,Te=Ce.bind?Ce.bind(Ce):function(){return Ce.apply(Ce,arguments)},Ne=W({}.isPrototypeOf),Me=P.Object,Le=ue?function(e){return \"symbol\"==typeof e}:function(e){var t=ee(\"Symbol\");return Q(t)&&Ne(t.prototype,Me(e))},Pe=P.String,Re=function(e){try{return Pe(e)}catch(e){return \"Object\"}},De=P.TypeError,je=function(e){if(Q(e))return e;throw De(Re(e)+\" is not a function\")},Ae=function(e,t){var n=e[t];return null==n?void 0:je(n)},_e=P.TypeError,Fe=P.TypeError,Ie=he(\"toPrimitive\"),Be=function(e,t){if(!me(e)||Le(e))return e;var n,r=Ae(e,Ie);if(r){if(void 0===t&&(t=\"default\"),n=Te(r,e,t),!me(n)||Le(n))return n;throw Fe(\"Can't convert object to primitive value\")}return void 0===t&&(t=\"number\"),function(e,t){var n,r;if(\"string\"===t&&Q(n=e.toString)&&!me(r=Te(n,e)))return r;if(Q(n=e.valueOf)&&!me(r=Te(n,e)))return r;if(\"string\"!==t&&Q(n=e.toString)&&!me(r=Te(n,e)))return r;throw _e(\"Can't convert object to primitive value\")}(e,t)},$e=function(e){var t=Be(e,\"string\");return Le(t)?t:t+\"\"},We=P.TypeError,He=Object.defineProperty,Ve={f:ye?He:function(e,t,n){if(Oe(e),t=$e(t),Oe(n),Ee)try{return He(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw We(\"Accessors not supported\");return \"value\"in n&&(e[t]=n.value),e}},ze=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},Ue=ye?function(e,t,n){return Ve.f(e,t,ze(1,n))}:function(e,t,n){return e[t]=n,e},Ke=W(Function.toString);Q(A.inspectSource)||(A.inspectSource=function(e){return Ke(e)});var qe,Ge,Je,Ye=A.inspectSource,Xe=P.WeakMap,Qe=Q(Xe)&&/native code/.test(Ye(Xe)),Ze=_(\"keys\"),et=function(e){return Ze[e]||(Ze[e]=X(e))},tt={},nt=\"Object already initialized\",rt=P.TypeError,ot=P.WeakMap;if(Qe||A.state){var it=A.state||(A.state=new ot),at=W(it.get),st=W(it.has),lt=W(it.set);qe=function(e,t){if(st(it,e))throw new rt(nt);return t.facade=e,lt(it,e,t),t},Ge=function(e){return at(it,e)||{}},Je=function(e){return st(it,e)};}else {var ut=et(\"state\");tt[ut]=!0,qe=function(e,t){if(q(e,ut))throw new rt(nt);return t.facade=e,Ue(e,ut,t),t},Ge=function(e){return q(e,ut)?e[ut]:{}},Je=function(e){return q(e,ut)};}var ct={set:qe,get:Ge,has:Je,enforce:function(e){return Je(e)?Ge(e):qe(e,{})},getterFor:function(e){return function(t){var n;if(!me(t)||(n=Ge(t)).type!==e)throw rt(\"Incompatible receiver, \"+e+\" required\");return n}}},ft=Function.prototype,dt=ye&&Object.getOwnPropertyDescriptor,pt=q(ft,\"name\"),ht={EXISTS:pt,PROPER:pt&&\"something\"===function(){}.name,CONFIGURABLE:pt&&(!ye||ye&&dt(ft,\"name\").configurable)},gt=T((function(e){var t=ht.CONFIGURABLE,n=ct.get,r=ct.enforce,o=String(String).split(\"String\");(e.exports=function(e,n,i,a){var s,l=!!a&&!!a.unsafe,u=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;Q(i)&&(\"Symbol(\"===String(f).slice(0,7)&&(f=\"[\"+String(f).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!q(i,\"name\")||t&&i.name!==f)&&Ue(i,\"name\",f),(s=r(i)).source||(s.source=o.join(\"string\"==typeof f?f:\"\"))),e!==P?(l?!c&&e[n]&&(u=!0):delete e[n],u?e[n]=i:Ue(e,n,i)):u?e[n]=i:D(n,i);})(Function.prototype,\"toString\",(function(){return Q(this)&&n(this).source||Ye(this)}));})),vt=W({}.toString),yt=W(\"\".slice),mt=function(e){return yt(vt(e),8,-1)},bt=he(\"toStringTag\"),wt=P.Object,xt=\"Arguments\"==mt(function(){return arguments}()),Et=ve?mt:function(e){var t,n,r;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=wt(e),bt))?n:xt?mt(t):\"Object\"==(r=mt(t))&&Q(t.callee)?\"Arguments\":r},St=ve?{}.toString:function(){return \"[object \"+Et(this)+\"]\"};ve||gt(Object.prototype,\"toString\",St,{unsafe:!0});var kt={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Ot=xe(\"span\").classList,Ct=Ot&&Ot.constructor&&Ot.constructor.prototype,Tt=Ct===Object.prototype?void 0:Ct,Nt=W(W.bind),Mt=function(e,t){return je(e),void 0===t?e:Nt?Nt(e,t):function(){return e.apply(t,arguments)}},Lt=P.Object,Pt=W(\"\".split),Rt=se((function(){return !Lt(\"z\").propertyIsEnumerable(0)}))?function(e){return \"String\"==mt(e)?Pt(e,\"\"):Lt(e)}:Lt,Dt=Math.ceil,jt=Math.floor,At=function(e){var t=+e;return t!=t||0===t?0:(t>0?jt:Dt)(t)},_t=Math.min,Ft=function(e){return e>0?_t(At(e),9007199254740991):0},It=function(e){return Ft(e.length)},Bt=Array.isArray||function(e){return \"Array\"==mt(e)},$t=function(){},Wt=[],Ht=ee(\"Reflect\",\"construct\"),Vt=/^\\s*(?:class|function)\\b/,zt=W(Vt.exec),Ut=!Vt.exec($t),Kt=function(e){if(!Q(e))return !1;try{return Ht($t,Wt,e),!0}catch(e){return !1}},qt=!Ht||se((function(){var e;return Kt(Kt.call)||!Kt(Object)||!Kt((function(){e=!0;}))||e}))?function(e){if(!Q(e))return !1;switch(Et(e)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Ut||!!zt(Vt,Ye(e))}:Kt,Gt=he(\"species\"),Jt=P.Array,Yt=function(e,t){return new(function(e){var t;return Bt(e)&&(t=e.constructor,(qt(t)&&(t===Jt||Bt(t.prototype))||me(t)&&null===(t=t[Gt]))&&(t=void 0)),void 0===t?Jt:t}(e))(0===t?0:t)},Xt=W([].push),Qt=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,s=5==e||i;return function(l,u,c,f){for(var d,p,h=U(l),g=Rt(h),v=Mt(u,c),y=It(g),m=0,b=f||Yt,w=t?b(l,y):n||a?b(l,0):void 0;y>m;m++)if((s||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return !0;case 5:return d;case 6:return m;case 2:Xt(w,d);}else switch(e){case 4:return !1;case 7:Xt(w,d);}return i?-1:r||o?o:w}},Zt={forEach:Qt(0),map:Qt(1),filter:Qt(2),some:Qt(3),every:Qt(4),find:Qt(5),findIndex:Qt(6),filterReject:Qt(7)},en=function(e,t){var n=[][e];return !!n&&se((function(){n.call(null,t||function(){throw 1},1);}))},tn=Zt.forEach,nn=en(\"forEach\")?[].forEach:function(e){return tn(this,e,arguments.length>1?arguments[1]:void 0)},rn=function(e){if(e&&e.forEach!==nn)try{Ue(e,\"forEach\",nn);}catch(t){e.forEach=nn;}};for(var on in kt)kt[on]&&rn(P[on]&&P[on].prototype);rn(Tt);var an={}.propertyIsEnumerable,sn=Object.getOwnPropertyDescriptor,ln=sn&&!an.call({1:2},1)?function(e){var t=sn(this,e);return !!t&&t.enumerable}:an,un={f:ln},cn=function(e){return Rt(V(e))},fn=Object.getOwnPropertyDescriptor,dn={f:ye?fn:function(e,t){if(e=cn(e),t=$e(t),Ee)try{return fn(e,t)}catch(e){}if(q(e,t))return ze(!Te(un.f,e,t),e[t])}},pn=Math.max,hn=Math.min,gn=function(e,t){var n=At(e);return n<0?pn(n+t,0):hn(n,t)},vn=function(e){return function(t,n,r){var o,i=cn(t),a=It(i),s=gn(r,a);if(e&&n!=n){for(;a>s;)if((o=i[s++])!=o)return !0}else for(;a>s;s++)if((e||s in i)&&i[s]===n)return e||s||0;return !e&&-1}},yn={includes:vn(!0),indexOf:vn(!1)},mn=yn.indexOf,bn=W([].push),wn=function(e,t){var n,r=cn(e),o=0,i=[];for(n in r)!q(tt,n)&&q(r,n)&&bn(i,n);for(;t.length>o;)q(r,n=t[o++])&&(~mn(i,n)||bn(i,n));return i},xn=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],En=xn.concat(\"length\",\"prototype\"),Sn={f:Object.getOwnPropertyNames||function(e){return wn(e,En)}},kn={f:Object.getOwnPropertySymbols},On=W([].concat),Cn=ee(\"Reflect\",\"ownKeys\")||function(e){var t=Sn.f(Oe(e)),n=kn.f;return n?On(t,n(e)):t},Tn=function(e,t){for(var n=Cn(t),r=Ve.f,o=dn.f,i=0;i<n.length;i++){var a=n[i];q(e,a)||r(e,a,o(t,a));}},Nn=/#|\\.prototype\\./,Mn=function(e,t){var n=Pn[Ln(e)];return n==Dn||n!=Rn&&(Q(t)?se(t):!!t)},Ln=Mn.normalize=function(e){return String(e).replace(Nn,\".\").toLowerCase()},Pn=Mn.data={},Rn=Mn.NATIVE=\"N\",Dn=Mn.POLYFILL=\"P\",jn=Mn,An=dn.f,_n=function(e,t){var n,r,o,i,a,s=e.target,l=e.global,u=e.stat;if(n=l?P:u?P[s]||D(s,{}):(P[s]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=An(n,r))&&a.value:n[r],!jn(l?r:s+(u?\".\":\"#\")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Tn(i,o);}(e.sham||o&&o.sham)&&Ue(i,\"sham\",!0),gt(n,r,i,e);}},Fn=Object.keys||function(e){return wn(e,xn)},In=se((function(){Fn(1);}));\n  /*!\n  \t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n  \t *\n  \t * Copyright (c) 2014-2017, Jon Schlinkert.\n  \t * Released under the MIT License.\n  \t */\n  function Bn(e){return \"[object Object]\"===Object.prototype.toString.call(e)}_n({target:\"Object\",stat:!0,forced:In},{keys:function(e){return Fn(U(e))}});var $n=function(e){var t,n;return !1!==Bn(e)&&(void 0===(t=e.constructor)||!1!==Bn(n=t.prototype)&&!1!==n.hasOwnProperty(\"isPrototypeOf\"))},Wn=Object.defineProperty({isPlainObject:$n},\"__esModule\",{value:!0}),Hn=function(e){return Wn.isPlainObject(e)&&Array.isArray(e.redos)&&Array.isArray(e.undos)&&(0===e.redos.length||g.default.Operation.isOperationList(e.redos[0]))&&(0===e.undos.length||g.default.Operation.isOperationList(e.undos[0]))},Vn=new WeakMap,zn=new WeakMap,Un={isHistoryEditor:function(e){return Hn(e.history)&&g.default.Editor.isEditor(e)},isMerging:function(e){return zn.get(e)},isSaving:function(e){return Vn.get(e)},redo:function(e){e.redo();},undo:function(e){e.undo();},withoutMerging:function(e,t){var n=Un.isMerging(e);zn.set(e,!1),t(),zn.set(e,n);},withoutSaving:function(e,t){var n=Un.isSaving(e);Vn.set(e,!1),t(),Vn.set(e,n);}};function Kn(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return qn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return qn(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,o=function(){};return {s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,a=!0,s=!1;return {s:function(){n=n.call(e);},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,i=e;},f:function(){try{a||null==n.return||n.return();}finally{if(s)throw i}}}}function qn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Gn=function(e,t){return \"set_selection\"===e.type||(!(!t||\"insert_text\"!==e.type||\"insert_text\"!==t.type||e.offset!==t.offset+t.text.length||!g.default.Path.equals(e.path,t.path))||!(!t||\"remove_text\"!==e.type||\"remove_text\"!==t.type||e.offset+e.text.length!==t.offset||!g.default.Path.equals(e.path,t.path)))},Jn=function(e,t){return \"set_selection\"!==e.type||null!=e.properties&&null!=e.newProperties},Yn=function(e,t){return !(!t||\"set_selection\"!==e.type||\"set_selection\"!==t.type)},Xn=function(e){return \"set_selection\"!==e.type},Qn=function(e){var t=e,n=t.apply;return t.history={undos:[],redos:[]},t.redo=function(){var e=t.history,n=e.redos;if(n.length>0){var r=n[n.length-1];Un.withoutSaving(t,(function(){g.default.Editor.withoutNormalizing(t,(function(){var e,n=Kn(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.apply(o);}}catch(e){n.e(e);}finally{n.f();}}));})),e.redos.pop(),e.undos.push(r);}},t.undo=function(){var e=t.history,n=e.undos;if(n.length>0){var r=n[n.length-1];Un.withoutSaving(t,(function(){g.default.Editor.withoutNormalizing(t,(function(){var e,n=Kn(r.map(g.default.Operation.inverse).reverse());try{for(n.s();!(e=n.n()).done;){var o=e.value;t.apply(o);}}catch(e){n.e(e);}finally{n.f();}}));})),e.redos.push(r),e.undos.pop();}},t.apply=function(e){var r=t.operations,o=t.history,i=o.undos,a=i[i.length-1],s=a&&a[a.length-1],l=Yn(e,s),u=Un.isSaving(t),c=Un.isMerging(t);if(null==u&&(u=Jn(e)),u){if(null==c&&(c=null!=a&&(0!==r.length||(Gn(e,s)||l))),a&&c)l&&a.pop(),a.push(e);else {var f=[e];i.push(f);}for(;i.length>100;)i.shift();Xn(e)&&(o.redos=[]);}n(e);},t},Zn=P.String,er=function(e){if(\"Symbol\"===Et(e))throw TypeError(\"Cannot convert a Symbol value to a string\");return Zn(e)},tr=function(){var e=Oe(this),t=\"\";return e.global&&(t+=\"g\"),e.ignoreCase&&(t+=\"i\"),e.multiline&&(t+=\"m\"),e.dotAll&&(t+=\"s\"),e.unicode&&(t+=\"u\"),e.sticky&&(t+=\"y\"),t},nr=ht.PROPER,rr=\"toString\",or=RegExp.prototype,ir=or.toString,ar=W(tr),sr=se((function(){return \"/a/b\"!=ir.call({source:\"a\",flags:\"b\"})})),lr=nr&&ir.name!=rr;(sr||lr)&&gt(RegExp.prototype,rr,(function(){var e=Oe(this),t=er(e.source),n=e.flags;return \"/\"+t+\"/\"+er(void 0===n&&Ne(or,e)&&!(\"flags\"in or)?ar(e):n)}),{unsafe:!0});var ur,cr=ye?Object.defineProperties:function(e,t){Oe(e);for(var n,r=cn(t),o=Fn(t),i=o.length,a=0;i>a;)Ve.f(e,n=o[a++],r[n]);return e},fr=ee(\"document\",\"documentElement\"),dr=et(\"IE_PROTO\"),pr=function(){},hr=function(e){return \"<script>\"+e+\"</\"+\"script>\"},gr=function(e){e.write(hr(\"\")),e.close();var t=e.parentWindow.Object;return e=null,t},vr=function(){try{ur=new ActiveXObject(\"htmlfile\");}catch(e){}var e,t;vr=\"undefined\"!=typeof document?document.domain&&ur?gr(ur):((t=xe(\"iframe\")).style.display=\"none\",fr.appendChild(t),t.src=String(\"javascript:\"),(e=t.contentWindow.document).open(),e.write(hr(\"document.F=Object\")),e.close(),e.F):gr(ur);for(var n=xn.length;n--;)delete vr.prototype[xn[n]];return vr()};tt[dr]=!0;var yr=Object.create||function(e,t){var n;return null!==e?(pr.prototype=Oe(e),n=new pr,pr.prototype=null,n[dr]=e):n=vr(),void 0===t?n:cr(n,t)},mr=he(\"unscopables\"),br=Array.prototype;null==br[mr]&&Ve.f(br,mr,{configurable:!0,value:yr(null)});var wr=function(e){br[mr][e]=!0;},xr=yn.includes;_n({target:\"Array\",proto:!0},{includes:function(e){return xr(this,e,arguments.length>1?arguments[1]:void 0)}}),wr(\"includes\");var Er=he(\"match\"),Sr=function(e){var t;return me(e)&&(void 0!==(t=e[Er])?!!t:\"RegExp\"==mt(e))},kr=P.TypeError,Or=function(e){if(Sr(e))throw kr(\"The method doesn't accept regular expressions\");return e},Cr=he(\"match\"),Tr=function(e){var t=/./;try{\"/./\"[e](t);}catch(n){try{return t[Cr]=!1,\"/./\"[e](t)}catch(e){}}return !1},Nr=W(\"\".indexOf);_n({target:\"String\",proto:!0,forced:!Tr(\"includes\")},{includes:function(e){return !!~Nr(er(V(this)),er(Or(e)),arguments.length>1?arguments[1]:void 0)}});var Mr,Lr=/\"/g,Pr=W(\"\".replace);_n({target:\"String\",proto:!0,forced:(Mr=\"anchor\",se((function(){var e=\"\"[Mr]('\"');return e!==e.toLowerCase()||e.split('\"').length>3})))},{anchor:function(e){return t=\"a\",n=\"name\",r=e,o=er(V(this)),i=\"<\"+t,\"\"!==n&&(i+=\" \"+n+'=\"'+Pr(er(r),Lr,\"&quot;\")+'\"'),i+\">\"+o+\"</\"+t+\">\";var t,n,r,o,i;}});var Rr=function(e,t,n){var r,o;Oe(e);try{if(!(r=Ae(e,\"return\"))){if(\"throw\"===t)throw n;return n}r=Te(r,e);}catch(e){o=!0,r=e;}if(\"throw\"===t)throw n;if(o)throw r;return Oe(r),n},Dr=function(e,t,n,r){try{return r?t(Oe(n)[0],n[1]):t(n)}catch(t){Rr(e,\"throw\",t);}},jr={},Ar=he(\"iterator\"),_r=Array.prototype,Fr=function(e){return void 0!==e&&(jr.Array===e||_r[Ar]===e)},Ir=function(e,t,n){var r=$e(t);r in e?Ve.f(e,r,ze(0,n)):e[r]=n;},Br=he(\"iterator\"),$r=function(e){if(null!=e)return Ae(e,Br)||Ae(e,\"@@iterator\")||jr[Et(e)]},Wr=P.TypeError,Hr=function(e,t){var n=arguments.length<2?$r(e):t;if(je(n))return Oe(Te(n,e));throw Wr(Re(e)+\" is not iterable\")},Vr=P.Array,zr=he(\"iterator\"),Ur=!1;try{var Kr=0,qr={next:function(){return {done:!!Kr++}},return:function(){Ur=!0;}};qr[zr]=function(){return this},Array.from(qr,(function(){throw 2}));}catch(e){}var Gr=function(e,t){if(!t&&!Ur)return !1;var n=!1;try{var r={};r[zr]=function(){return {next:function(){return {done:n=!0}}}},e(r);}catch(e){}return n},Jr=!Gr((function(e){Array.from(e);}));_n({target:\"Array\",stat:!0,forced:Jr},{from:function(e){var t=U(e),n=qt(this),r=arguments.length,o=r>1?arguments[1]:void 0,i=void 0!==o;i&&(o=Mt(o,r>2?arguments[2]:void 0));var a,s,l,u,c,f,d=$r(t),p=0;if(!d||this==Vr&&Fr(d))for(a=It(t),s=n?new this(a):Vr(a);a>p;p++)f=i?o(t[p],p):t[p],Ir(s,p,f);else for(c=(u=Hr(t,d)).next,s=n?new this:[];!(l=Te(c,u)).done;p++)f=i?Dr(u,o,[l.value,p],!0):l.value,Ir(s,p,f);return s.length=p,s}});var Yr,Xr,Qr,Zr=W(\"\".charAt),eo=W(\"\".charCodeAt),to=W(\"\".slice),no=function(e){return function(t,n){var r,o,i=er(V(t)),a=At(n),s=i.length;return a<0||a>=s?e?\"\":void 0:(r=eo(i,a))<55296||r>56319||a+1===s||(o=eo(i,a+1))<56320||o>57343?e?Zr(i,a):r:e?to(i,a,a+2):o-56320+(r-55296<<10)+65536}},ro={codeAt:no(!1),charAt:no(!0)},oo=!se((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),io=et(\"IE_PROTO\"),ao=P.Object,so=ao.prototype,lo=oo?ao.getPrototypeOf:function(e){var t=U(e);if(q(t,io))return t[io];var n=t.constructor;return Q(n)&&t instanceof n?n.prototype:t instanceof ao?so:null},uo=he(\"iterator\"),co=!1;[].keys&&(\"next\"in(Qr=[].keys())?(Xr=lo(lo(Qr)))!==Object.prototype&&(Yr=Xr):co=!0);var fo=null==Yr||se((function(){var e={};return Yr[uo].call(e)!==e}));fo&&(Yr={}),Q(Yr[uo])||gt(Yr,uo,(function(){return this}));var po={IteratorPrototype:Yr,BUGGY_SAFARI_ITERATORS:co},ho=Ve.f,go=he(\"toStringTag\"),vo=function(e,t,n){e&&!q(e=n?e:e.prototype,go)&&ho(e,go,{configurable:!0,value:t});},yo=po.IteratorPrototype,mo=function(){return this},bo=P.String,wo=P.TypeError,xo=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var e,t=!1,n={};try{(e=W(Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set))(n,[]),t=n instanceof Array;}catch(e){}return function(n,r){return Oe(n),function(e){if(\"object\"==typeof e||Q(e))return e;throw wo(\"Can't set \"+bo(e)+\" as a prototype\")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),Eo=ht.PROPER,So=ht.CONFIGURABLE,ko=po.IteratorPrototype,Oo=po.BUGGY_SAFARI_ITERATORS,Co=he(\"iterator\"),To=\"keys\",No=\"values\",Mo=\"entries\",Lo=function(){return this},Po=function(e,t,n,r,o,i,a){!function(e,t,n,r){var o=t+\" Iterator\";e.prototype=yr(yo,{next:ze(+!r,n)}),vo(e,o,!1),jr[o]=mo;}(n,t,r);var s,l,u,c=function(e){if(e===o&&g)return g;if(!Oo&&e in p)return p[e];switch(e){case To:case No:case Mo:return function(){return new n(this,e)}}return function(){return new n(this)}},f=t+\" Iterator\",d=!1,p=e.prototype,h=p[Co]||p[\"@@iterator\"]||o&&p[o],g=!Oo&&h||c(o),v=\"Array\"==t&&p.entries||h;if(v&&(s=lo(v.call(new e)))!==Object.prototype&&s.next&&(lo(s)!==ko&&(xo?xo(s,ko):Q(s[Co])||gt(s,Co,Lo)),vo(s,f,!0)),Eo&&o==No&&h&&h.name!==No&&(So?Ue(p,\"name\",No):(d=!0,g=function(){return Te(h,this)})),o)if(l={values:c(No),keys:i?g:c(To),entries:c(Mo)},a)for(u in l)(Oo||d||!(u in p))&&gt(p,u,l[u]);else _n({target:t,proto:!0,forced:Oo||d},l);return p[Co]!==g&&gt(p,Co,g,{name:o}),jr[t]=g,l},Ro=ro.charAt,Do=\"String Iterator\",jo=ct.set,Ao=ct.getterFor(Do);Po(String,\"String\",(function(e){jo(this,{type:Do,string:er(e),index:0});}),(function(){var e,t=Ao(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=Ro(n,r),t.index+=e.length,{value:e,done:!1})}));var _o,Fo=dn.f,Io=W(\"\".endsWith),Bo=W(\"\".slice),$o=Math.min,Wo=Tr(\"endsWith\"),Ho=!(Wo||(_o=Fo(String.prototype,\"endsWith\"),!_o||_o.writable));_n({target:\"String\",proto:!0,forced:!Ho&&!Wo},{endsWith:function(e){var t=er(V(this));Or(e);var n=arguments.length>1?arguments[1]:void 0,r=t.length,o=void 0===n?r:$o(Ft(n),r),i=er(e);return Io?Io(t,i,o):Bo(t,o-i.length,o)===i}});var Vo=W([].join),zo=Rt!=Object,Uo=en(\"join\",\",\");_n({target:\"Array\",proto:!0,forced:zo||!Uo},{join:function(e){return Vo(cn(this),void 0===e?\",\":e)}});var Ko=he(\"species\"),qo=function(e){return ae>=51||!se((function(){var t=[];return (t.constructor={})[Ko]=function(){return {foo:1}},1!==t[e](Boolean).foo}))},Go=Zt.map,Jo=qo(\"map\");_n({target:\"Array\",proto:!0,forced:!Jo},{map:function(e){return Go(this,e,arguments.length>1?arguments[1]:void 0)}});var Yo=P.RegExp,Xo=se((function(){var e=Yo(\"a\",\"y\");return e.lastIndex=2,null!=e.exec(\"abcd\")})),Qo=Xo||se((function(){return !Yo(\"a\",\"y\").sticky})),Zo={BROKEN_CARET:Xo||se((function(){var e=Yo(\"^r\",\"gy\");return e.lastIndex=2,null!=e.exec(\"str\")})),MISSED_STICKY:Qo,UNSUPPORTED_Y:Xo},ei=P.RegExp,ti=se((function(){var e=ei(\".\",\"s\");return !(e.dotAll&&e.exec(\"\\n\")&&\"s\"===e.flags)})),ni=P.RegExp,ri=se((function(){var e=ni(\"(?<a>b)\",\"g\");return \"b\"!==e.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(e,\"$<a>c\")})),oi=ct.get,ii=_(\"native-string-replace\",String.prototype.replace),ai=RegExp.prototype.exec,si=ai,li=W(\"\".charAt),ui=W(\"\".indexOf),ci=W(\"\".replace),fi=W(\"\".slice),di=function(){var e=/a/,t=/b*/g;return Te(ai,e,\"a\"),Te(ai,t,\"a\"),0!==e.lastIndex||0!==t.lastIndex}(),pi=Zo.BROKEN_CARET,hi=void 0!==/()??/.exec(\"\")[1];(di||hi||pi||ti||ri)&&(si=function(e){var t,n,r,o,i,a,s,l=this,u=oi(l),c=er(e),f=u.raw;if(f)return f.lastIndex=l.lastIndex,t=Te(si,f,c),l.lastIndex=f.lastIndex,t;var d=u.groups,p=pi&&l.sticky,h=Te(tr,l),g=l.source,v=0,y=c;if(p&&(h=ci(h,\"y\",\"\"),-1===ui(h,\"g\")&&(h+=\"g\"),y=fi(c,l.lastIndex),l.lastIndex>0&&(!l.multiline||l.multiline&&\"\\n\"!==li(c,l.lastIndex-1))&&(g=\"(?: \"+g+\")\",y=\" \"+y,v++),n=new RegExp(\"^(?:\"+g+\")\",h)),hi&&(n=new RegExp(\"^\"+g+\"$(?!\\\\s)\",h)),di&&(r=l.lastIndex),o=Te(ai,p?n:l,y),p?o?(o.input=fi(o.input,v),o[0]=fi(o[0],v),o.index=l.lastIndex,l.lastIndex+=o[0].length):l.lastIndex=0:di&&o&&(l.lastIndex=l.global?o.index+o[0].length:r),hi&&o&&o.length>1&&Te(ii,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&d)for(o.groups=a=yr(null),i=0;i<d.length;i++)a[(s=d[i])[0]]=o[s[1]];return o});var gi=si;_n({target:\"RegExp\",proto:!0,forced:/./.exec!==gi},{exec:gi});var vi=Function.prototype,yi=vi.apply,mi=vi.bind,bi=vi.call,wi=\"object\"==typeof Reflect&&Reflect.apply||(mi?bi.bind(yi):function(){return bi.apply(yi,arguments)}),xi=he(\"species\"),Ei=RegExp.prototype,Si=function(e,t,n,r){var o=he(e),i=!se((function(){var t={};return t[o]=function(){return 7},7!=\"\"[e](t)})),a=i&&!se((function(){var t=!1,n=/a/;return \"split\"===e&&((n={}).constructor={},n.constructor[xi]=function(){return n},n.flags=\"\",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](\"\"),!t}));if(!i||!a||n){var s=W(/./[o]),l=t(o,\"\"[e],(function(e,t,n,r,o){var a=W(e),l=t.exec;return l===gi||l===Ei.exec?i&&!o?{done:!0,value:s(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));gt(String.prototype,e,l[0]),gt(Ei,o,l[1]);}r&&Ue(Ei[o],\"sham\",!0);},ki=ro.charAt,Oi=function(e,t,n){return t+(n?ki(e,t).length:1)},Ci=Math.floor,Ti=W(\"\".charAt),Ni=W(\"\".replace),Mi=W(\"\".slice),Li=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,Pi=/\\$([$&'`]|\\d{1,2})/g,Ri=function(e,t,n,r,o,i){var a=n+e.length,s=r.length,l=Pi;return void 0!==o&&(o=U(o),l=Li),Ni(i,l,(function(i,l){var u;switch(Ti(l,0)){case\"$\":return \"$\";case\"&\":return e;case\"`\":return Mi(t,0,n);case\"'\":return Mi(t,a);case\"<\":u=o[Mi(l,1,-1)];break;default:var c=+l;if(0===c)return i;if(c>s){var f=Ci(c/10);return 0===f?i:f<=s?void 0===r[f-1]?Ti(l,1):r[f-1]+Ti(l,1):i}u=r[c-1];}return void 0===u?\"\":u}))},Di=P.TypeError,ji=function(e,t){var n=e.exec;if(Q(n)){var r=Te(n,e,t);return null!==r&&Oe(r),r}if(\"RegExp\"===mt(e))return Te(gi,e,t);throw Di(\"RegExp#exec called on incompatible receiver\")},Ai=he(\"replace\"),_i=Math.max,Fi=Math.min,Ii=W([].concat),Bi=W([].push),$i=W(\"\".indexOf),Wi=W(\"\".slice),Hi=\"$0\"===\"a\".replace(/./,\"$0\"),Vi=!!/./[Ai]&&\"\"===/./[Ai](\"a\",\"$0\");Si(\"replace\",(function(e,t,n){var r=Vi?\"$\":\"$0\";return [function(e,n){var r=V(this),o=null==e?void 0:Ae(e,Ai);return o?Te(o,e,r,n):Te(t,er(r),e,n)},function(e,o){var i=Oe(this),a=er(e);if(\"string\"==typeof o&&-1===$i(o,r)&&-1===$i(o,\"$<\")){var s=n(t,i,a,o);if(s.done)return s.value}var l=Q(o);l||(o=er(o));var u=i.global;if(u){var c=i.unicode;i.lastIndex=0;}for(var f=[];;){var d=ji(i,a);if(null===d)break;if(Bi(f,d),!u)break;\"\"===er(d[0])&&(i.lastIndex=Oi(a,Ft(i.lastIndex),c));}for(var p,h=\"\",g=0,v=0;v<f.length;v++){for(var y=er((d=f[v])[0]),m=_i(Fi(At(d.index),a.length),0),b=[],w=1;w<d.length;w++)Bi(b,void 0===(p=d[w])?p:String(p));var x=d.groups;if(l){var E=Ii([y],b,m,a);void 0!==x&&Bi(E,x);var S=er(wi(o,void 0,E));}else S=Ri(y,a,m,b,x,o);m>=g&&(h+=Wi(a,g,m)+S,g=m+y.length);}return h+Wi(a,g)}]}),!!se((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:\"7\"},e},\"7\"!==\"\".replace(e,\"$<a>\")}))||!Hi||Vi);\n  /*! *****************************************************************************\n  \tCopyright (c) Microsoft Corporation.\n\n  \tPermission to use, copy, modify, and/or distribute this software for any\n  \tpurpose with or without fee is hereby granted.\n\n  \tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  \tREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  \tAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  \tINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  \tLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  \tOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  \tPERFORMANCE OF THIS SOFTWARE.\n  \t***************************************************************************** */\n  var zi=function(e,t){return zi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);},zi(e,t)};function Ui(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e;}zi(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n);}var Ki=function(){return Ki=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ki.apply(this,arguments)};function qi(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\"number\"==typeof e.length)return {next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function Gi(e,t){var n=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value);}catch(e){o={error:e};}finally{try{r&&!r.done&&(n=i.return)&&n.call(i);}finally{if(o)throw o.error}}return a}function Ji(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}var Yi=0,Xi=function(){this.id=\"\"+Yi++;},Qi=\"Array Iterator\",Zi=ct.set,ea=ct.getterFor(Qi),ta=Po(Array,\"Array\",(function(e,t){Zi(this,{type:Qi,target:cn(e),index:0,kind:t});}),(function(){var e=ea(this),t=e.target,n=e.kind,r=e.index++;return !t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),\"values\");jr.Arguments=jr.Array,wr(\"keys\"),wr(\"values\"),wr(\"entries\");var na=function(e,t,n){for(var r in t)gt(e,r,t[r],n);return e},ra=P.Array,oa=Math.max,ia=function(e,t,n){for(var r=It(e),o=gn(t,r),i=gn(void 0===n?r:n,r),a=ra(oa(i-o,0)),s=0;o<i;o++,s++)Ir(a,s,e[o]);return a.length=s,a},aa=Sn.f,sa=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],la={f:function(e){return sa&&\"Window\"==mt(e)?function(e){try{return aa(e)}catch(e){return ia(sa)}}(e):aa(cn(e))}},ua=se((function(){if(\"function\"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,\"a\",{value:8});}})),ca=Object.isExtensible,fa=se((function(){ca(1);}))||ua?function(e){return !!me(e)&&((!ua||\"ArrayBuffer\"!=mt(e))&&(!ca||ca(e)))}:ca,da=!se((function(){return Object.isExtensible(Object.preventExtensions({}))})),pa=T((function(e){var t=Ve.f,n=!1,r=X(\"meta\"),o=0,i=function(e){t(e,r,{value:{objectID:\"O\"+o++,weakData:{}}});},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=Sn.f,t=W([].splice),o={};o[r]=1,e(o).length&&(Sn.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},_n({target:\"Object\",stat:!0,forced:!0},{getOwnPropertyNames:la.f}));},fastKey:function(e,t){if(!me(e))return \"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!q(e,r)){if(!fa(e))return \"F\";if(!t)return \"E\";i(e);}return e[r].objectID},getWeakData:function(e,t){if(!q(e,r)){if(!fa(e))return !0;if(!t)return !1;i(e);}return e[r].weakData},onFreeze:function(e){return da&&n&&fa(e)&&!q(e,r)&&i(e),e}};tt[r]=!0;})),ha=P.TypeError,ga=function(e,t){this.stopped=e,this.result=t;},va=ga.prototype,ya=function(e,t,n){var r,o,i,a,s,l,u,c=n&&n.that,f=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),p=!(!n||!n.INTERRUPTED),h=Mt(t,c),g=function(e){return r&&Rr(r,\"normal\",e),new ga(!0,e)},v=function(e){return f?(Oe(e),p?h(e[0],e[1],g):h(e[0],e[1])):p?h(e,g):h(e)};if(d)r=e;else {if(!(o=$r(e)))throw ha(Re(e)+\" is not iterable\");if(Fr(o)){for(i=0,a=It(e);a>i;i++)if((s=v(e[i]))&&Ne(va,s))return s;return new ga(!1)}r=Hr(e,o);}for(l=r.next;!(u=Te(l,r)).done;){try{s=v(u.value);}catch(e){Rr(r,\"throw\",e);}if(\"object\"==typeof s&&s&&Ne(va,s))return s}return new ga(!1)},ma=P.TypeError,ba=function(e,t){if(Ne(t,e))return e;throw ma(\"Incorrect invocation\")},wa=function(e,t,n){var r,o;return xo&&Q(r=t.constructor)&&r!==n&&me(o=r.prototype)&&o!==n.prototype&&xo(e,o),e},xa=function(e,t,n){var r=-1!==e.indexOf(\"Map\"),o=-1!==e.indexOf(\"Weak\"),i=r?\"set\":\"add\",a=P[e],s=a&&a.prototype,l=a,u={},c=function(e){var t=W(s[e]);gt(s,e,\"add\"==e?function(e){return t(this,0===e?0:e),this}:\"delete\"==e?function(e){return !(o&&!me(e))&&t(this,0===e?0:e)}:\"get\"==e?function(e){return o&&!me(e)?void 0:t(this,0===e?0:e)}:\"has\"==e?function(e){return !(o&&!me(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this});};if(jn(e,!Q(a)||!(o||s.forEach&&!se((function(){(new a).entries().next();})))))l=n.getConstructor(t,e,r,i),pa.enable();else if(jn(e,!0)){var f=new l,d=f[i](o?{}:-0,1)!=f,p=se((function(){f.has(1);})),h=Gr((function(e){new a(e);})),g=!o&&se((function(){for(var e=new a,t=5;t--;)e[i](t,t);return !e.has(-0)}));h||((l=t((function(e,t){ba(e,s);var n=wa(new a,e,l);return null!=t&&ya(t,n[i],{that:n,AS_ENTRIES:r}),n}))).prototype=s,s.constructor=l),(p||g)&&(c(\"delete\"),c(\"has\"),r&&c(\"get\")),(g||d)&&c(i),o&&s.clear&&delete s.clear;}return u[e]=l,_n({global:!0,forced:l!=a},u),vo(l,e),o||n.setStrong(l,e,r),l},Ea=pa.getWeakData,Sa=ct.set,ka=ct.getterFor,Oa=Zt.find,Ca=Zt.findIndex,Ta=W([].splice),Na=0,Ma=function(e){return e.frozen||(e.frozen=new La)},La=function(){this.entries=[];},Pa=function(e,t){return Oa(e.entries,(function(e){return e[0]===t}))};La.prototype={get:function(e){var t=Pa(this,e);if(t)return t[1]},has:function(e){return !!Pa(this,e)},set:function(e,t){var n=Pa(this,e);n?n[1]=t:this.entries.push([e,t]);},delete:function(e){var t=Ca(this.entries,(function(t){return t[0]===e}));return ~t&&Ta(this.entries,t,1),!!~t}};var Ra,Da={getConstructor:function(e,t,n,r){var o=e((function(e,o){ba(e,i),Sa(e,{type:t,id:Na++,frozen:void 0}),null!=o&&ya(o,e[r],{that:e,AS_ENTRIES:n});})),i=o.prototype,a=ka(t),s=function(e,t,n){var r=a(e),o=Ea(Oe(t),!0);return !0===o?Ma(r).set(t,n):o[r.id]=n,e};return na(i,{delete:function(e){var t=a(this);if(!me(e))return !1;var n=Ea(e);return !0===n?Ma(t).delete(e):n&&q(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!me(e))return !1;var n=Ea(e);return !0===n?Ma(t).has(e):n&&q(n,t.id)}}),na(i,n?{get:function(e){var t=a(this);if(me(e)){var n=Ea(e);return !0===n?Ma(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return s(this,e,t)}}:{add:function(e){return s(this,e,!0)}}),o}},ja=ct.enforce,Aa=!P.ActiveXObject&&\"ActiveXObject\"in P,_a=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},Fa=xa(\"WeakMap\",_a,Da);if(Qe&&Aa){Ra=Da.getConstructor(_a,\"WeakMap\",!0),pa.enable();var Ia=Fa.prototype,Ba=W(Ia.delete),$a=W(Ia.has),Wa=W(Ia.get),Ha=W(Ia.set);na(Ia,{delete:function(e){if(me(e)&&!fa(e)){var t=ja(this);return t.frozen||(t.frozen=new Ra),Ba(this,e)||t.frozen.delete(e)}return Ba(this,e)},has:function(e){if(me(e)&&!fa(e)){var t=ja(this);return t.frozen||(t.frozen=new Ra),$a(this,e)||t.frozen.has(e)}return $a(this,e)},get:function(e){if(me(e)&&!fa(e)){var t=ja(this);return t.frozen||(t.frozen=new Ra),$a(this,e)?Wa(this,e):t.frozen.get(e)}return Wa(this,e)},set:function(e,t){if(me(e)&&!fa(e)){var n=ja(this);n.frozen||(n.frozen=new Ra),$a(this,e)?Ha(this,e,t):n.frozen.set(e,t);}else Ha(this,e,t);return this}});}var Va=he(\"iterator\"),za=he(\"toStringTag\"),Ua=ta.values,Ka=function(e,t){if(e){if(e[Va]!==Ua)try{Ue(e,Va,Ua);}catch(t){e[Va]=Ua;}if(e[za]||Ue(e,za,t),kt[t])for(var n in ta)if(e[n]!==ta[n])try{Ue(e,n,ta[n]);}catch(t){e[n]=ta[n];}}};for(var qa in kt)Ka(P[qa]&&P[qa].prototype,qa);Ka(Tt,\"DOMTokenList\");var Ga=new WeakMap,Ja=new WeakMap,Ya=new WeakMap,Xa=new WeakMap,Qa=new WeakMap,Za=new WeakMap,es=new WeakMap,ts=new WeakMap,ns=new WeakMap,rs=new WeakMap,os=new WeakMap,is=new WeakMap,as=new WeakMap,ss=new WeakMap,ls=new WeakMap,us=new WeakMap,cs=new WeakMap,fs=new WeakMap,ds=new WeakMap,ps=new WeakMap,hs=new WeakMap,gs=new WeakMap,vs=new WeakMap,ys=new WeakMap,ms=new WeakMap,bs=Zt.find,ws=\"find\",xs=!0;ws in[]&&Array(1).find((function(){xs=!1;})),_n({target:\"Array\",proto:!0,forced:xs},{find:function(e){return bs(this,e,arguments.length>1?arguments[1]:void 0)}}),wr(ws),_n({global:!0},{globalThis:P});const Es=[\"area\",\"base\",\"basefont\",\"bgsound\",\"br\",\"col\",\"command\",\"embed\",\"frame\",\"hr\",\"image\",\"img\",\"input\",\"isindex\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"nextid\",\"param\",\"source\",\"track\",\"wbr\"];r.css&&(y.default.fn.css=r.css),r.append&&(y.default.fn.append=r.append),r.addClass&&(y.default.fn.addClass=r.addClass),r.removeClass&&(y.default.fn.removeClass=r.removeClass),r.hasClass&&(y.default.fn.hasClass=r.hasClass),r.on&&(y.default.fn.on=r.on),r.focus&&(y.default.fn.focus=r.focus),r.attr&&(y.default.fn.attr=r.attr),r.removeAttr&&(y.default.fn.removeAttr=r.removeAttr),r.hide&&(y.default.fn.hide=r.hide),r.show&&(y.default.fn.show=r.show),r.offset&&(y.default.fn.offset=r.offset),r.width&&(y.default.fn.width=r.width),r.height&&(y.default.fn.height=r.height),r.parent&&(y.default.fn.parent=r.parent),r.parents&&(y.default.fn.parents=r.parents),r.is&&(y.default.fn.is=r.is),r.dataset&&(y.default.fn.dataset=r.dataset),r.val&&(y.default.fn.val=r.val),r.text&&(y.default.fn.text=r.text),r.html&&(y.default.fn.html=r.html),r.children&&(y.default.fn.children=r.children),r.remove&&(y.default.fn.remove=r.remove),r.find&&(y.default.fn.find=r.find),r.each&&(y.default.fn.each=r.each),r.empty&&(y.default.fn.empty=r.empty);var Ss,ks=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||null},Os=function(e){return Cs(e)&&1===e.nodeType},Cs=function(e){var t=ks(e);return !!t&&e instanceof t.Node},Ts=function(e){var t=e&&e.anchorNode&&ks(e.anchorNode);return !!t&&e instanceof t.Selection},Ns=function(e){return Cs(e)&&3===e.nodeType},Ms=function(e){var t,n,r;return null!==(t=window.document.getElementById(e))&&void 0!==t?t:(null===(r=null===(n=window.document.activeElement)||void 0===n?void 0:n.shadowRoot)||void 0===r?void 0:r.getElementById(e))||null},Ls=function(e,t,n){for(var r,o=e.childNodes,i=o[t],a=t,s=!1,l=!1;(Cs(r=i)&&8===r.nodeType||Os(i)&&0===i.childNodes.length||Os(i)&&\"false\"===i.getAttribute(\"contenteditable\"))&&(!s||!l);)a>=o.length?(s=!0,a=t-1,n=\"backward\"):a<0?(l=!0,a=t+1,n=\"forward\"):(i=o[a],t=a,a+=\"forward\"===n?1:-1);return [i,t]},Ps=function(e,t,n){return Gi(Ls(e,t,n),1)[0]},Rs=function e(t){var n,r,o=\"\";if(Ns(t)&&t.nodeValue)return t.nodeValue;if(Os(t)){try{for(var i=qi(Array.from(t.childNodes)),a=i.next();!a.done;a=i.next()){o+=e(a.value);}}catch(e){n={error:e};}finally{try{a&&!a.done&&(r=i.return)&&r.call(i);}finally{if(n)throw n.error}}var s=getComputedStyle(t).getPropertyValue(\"display\");\"block\"!==s&&\"list\"!==s&&\"table-row\"!==s&&\"BR\"!==t.tagName||(o+=\"\\n\");}return o};function Ds(e,t){if(!(e instanceof HTMLElement&&\"true\"===e.dataset.slateVoid))for(var n=e.childNodes,r=n.length;r--;){var o=n[r],i=o.nodeType;3==i?t(o,e):1!=i&&9!=i&&11!=i||Ds(o,t);}}function js(e){if(0===e.length)return \"\";var t=e[0];return t.nodeType!==Ss.ELEMENT_NODE?\"\":t.tagName.toLowerCase()}!function(e){e[e.ELEMENT_NODE=1]=\"ELEMENT_NODE\",e[e.TEXT_NODE=3]=\"TEXT_NODE\",e[e.CDATA_SECTION_NODE=4]=\"CDATA_SECTION_NODE\",e[e.PROCESSING_INSTRUCTION_NODE=7]=\"PROCESSING_INSTRUCTION_NODE\",e[e.COMMENT_NODE=8]=\"COMMENT_NODE\",e[e.DOCUMENT_NODE=9]=\"DOCUMENT_NODE\",e[e.DOCUMENT_TYPE_NODE=10]=\"DOCUMENT_TYPE_NODE\",e[e.DOCUMENT_FRAGMENT_NODE=11]=\"DOCUMENT_FRAGMENT_NODE\";}(Ss||(Ss={})),void 0!==globalThis.navigator&&void 0!==globalThis.window&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&globalThis.window.MSStream;var As=\"undefined\"!=typeof navigator&&/Mac OS X/.test(navigator.userAgent),_s=\"undefined\"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\"undefined\"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])(?:\\.)).*/i.test(navigator.userAgent);var Fs=\"undefined\"!=typeof navigator&&/Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent),Is=\"undefined\"!=typeof navigator&&/Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(?:\\.)/i.test(navigator.userAgent),Bs=\"undefined\"!=typeof navigator&&/Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(?:\\.)/i.test(navigator.userAgent),$s=\"undefined\"!=typeof navigator&&/Chrome/i.test(navigator.userAgent);\"undefined\"!=typeof navigator&&/.*QQBrowser/.test(navigator.userAgent);var Ws=!Bs&&!Is&&\"undefined\"!=typeof globalThis&&globalThis.InputEvent&&\"function\"==typeof globalThis.InputEvent.prototype.getTargetRanges,Hs={getWindow:function(e){var t=hs.get(e);if(!t)throw new Error(\"Unable to find a host window element for this editor\");return t},findKey:function(e,t){var n=ps.get(t);return n||(n=new Xi,ps.set(t,n)),n},setNewKey:function(e){var t=new Xi;ps.set(e,t);},findPath:function(e,n){for(var r=[],o=n;;){var i=ls.get(o);if(null==i){if(t.Editor.isEditor(o))return r;break}var a=ss.get(o);if(null==a)break;r.unshift(a),o=i;}throw new Error(\"Unable to find the path for Slate node: \"+JSON.stringify(n))},findDocumentOrShadowRoot:function(e){if(e.isDestroyed)return window.document;var t=Hs.toDOMNode(e,e),n=t.getRootNode();return (n instanceof Document||n instanceof ShadowRoot)&&null!=n.getSelection?n:t.ownerDocument},getParentNode:function(e,t){return ls.get(t)||null},getParentsNodes:function(e,t){for(var n=[],r=t;r!==e&&null!=r;){var o=Hs.getParentNode(e,r);if(null==o)break;n.push(o),r=o;}return n},getTopNode:function(e,n){var r=[Hs.findPath(e,n)[0]];return t.Node.get(e,r)},toDOMNode:function(e,n){var r;if(t.Editor.isEditor(n))r=us.get(e);else {var o=Hs.findKey(e,n);r=fs.get(o);}if(!r)throw new Error(\"Cannot resolve a DOM node from Slate node: \"+JSON.stringify(n));return r},hasDOMNode:function(e,t,n){void 0===n&&(n={});var r,o=n.editable,i=void 0!==o&&o,a=Hs.toDOMNode(e,e);try{r=Os(t)?t:t.parentElement;}catch(e){if(!e.message.includes('Permission denied to access property \"nodeType\"'))throw e}return !!r&&(r.closest(\"[data-slate-editor]\")===a&&(!i||r.isContentEditable||!!r.getAttribute(\"data-slate-zero-width\")))},toDOMRange:function(e,n){var r=n.anchor,o=n.focus,i=t.Range.isBackward(n),a=Hs.toDOMPoint(e,r),s=t.Range.isCollapsed(n)?a:Hs.toDOMPoint(e,o),l=Hs.getWindow(e).document.createRange(),u=Gi(i?s:a,2),c=u[0],f=u[1],d=Gi(i?a:s,2),p=d[0],h=d[1],g=!!(Os(c)?c:c.parentElement).getAttribute(\"data-slate-zero-width\"),v=!!(Os(p)?p:p.parentElement).getAttribute(\"data-slate-zero-width\");return l.setStart(c,g?1:f),l.setEnd(p,v?1:h),l},toDOMPoint:function(e,n){var r,o,i,a=Gi(t.Editor.node(e,n.path),1)[0],s=Hs.toDOMNode(e,a);t.Editor.void(e,{at:n})&&(n={path:n.path,offset:0});var l=Array.from(s.querySelectorAll(\"[data-slate-string], [data-slate-zero-width]\")),u=0;try{for(var c=qi(l),f=c.next();!f.done;f=c.next()){var d=f.value,p=d.childNodes[0];if(null!=p&&null!=p.textContent){var h=p.textContent.length,g=d.getAttribute(\"data-slate-length\"),v=u+(null==g?h:parseInt(g,10));if(n.offset<=v){i=[p,Math.min(h,Math.max(0,n.offset-u))];break}u=v;}}}catch(e){r={error:e};}finally{try{f&&!f.done&&(o=c.return)&&o.call(c);}finally{if(r)throw r.error}}if(!i)throw new Error(\"Cannot resolve a DOM point from Slate point: \"+JSON.stringify(n));return i},toSlateNode:function(e,t){var n=Os(t)?t:t.parentElement;n&&!n.hasAttribute(\"data-slate-node\")&&(n=n.closest(\"[data-slate-node]\"));var r=n?cs.get(n):null;if(!r)throw new Error(\"Cannot resolve a Slate node from DOM node: \"+n);return r},findEventRange:function(e,n){\"nativeEvent\"in n&&(n=n.nativeEvent);var r=n.clientX,o=n.clientY,i=n.target;if(null==r||null==o)throw new Error(\"Cannot resolve a Slate range from a DOM event: \"+n);var a,s=Hs.toSlateNode(e,n.target),l=Hs.findPath(e,s);if(t.Editor.isVoid(e,s)){var u=i.getBoundingClientRect(),c=e.isInline(s)?r-u.left<u.left+u.width-r:o-u.top<u.top+u.height-o,f=t.Editor.point(e,l,{edge:c?\"start\":\"end\"}),d=c?t.Editor.before(e,f):t.Editor.after(e,f);if(d)return t.Editor.range(e,d)}var p=this.getWindow(e).document;if(p.caretRangeFromPoint)a=p.caretRangeFromPoint(r,o);else {var h=p.caretPositionFromPoint(r,o);h&&((a=p.createRange()).setStart(h.offsetNode,h.offset),a.setEnd(h.offsetNode,h.offset));}if(!a)throw new Error(\"Cannot resolve a Slate range from a DOM event: \"+n);return Hs.toSlateRange(e,a,{exactMatch:!1,suppressThrow:!1})},toSlateRange:function(e,n,r){var o,i,a,s,l,u=r.exactMatch,c=r.suppressThrow;if((Ts(n)?n.anchorNode:n.startContainer)&&(Ts(n)?(o=n.anchorNode,i=n.anchorOffset,a=n.focusNode,s=n.focusOffset,l=$s&&window.document.activeElement&&window.document.activeElement.shadowRoot?n.anchorNode===n.focusNode&&n.anchorOffset===n.focusOffset:n.isCollapsed):(o=n.startContainer,i=n.startOffset,a=n.endContainer,s=n.endOffset,l=n.collapsed)),null==o||null==a||null==i||null==s)throw new Error(\"Cannot resolve a Slate range from DOM range: \"+n);var f=Hs.toSlatePoint(e,[o,i],{exactMatch:u,suppressThrow:c});if(!f)return null;var d=l?f:Hs.toSlatePoint(e,[a,s],{exactMatch:u,suppressThrow:c});if(!d)return null;var p={anchor:f,focus:d};return t.Range.isExpanded(p)&&t.Range.isForward(p)&&Os(a)&&t.Editor.void(e,{at:p.focus,mode:\"highest\"})&&(p=t.Editor.unhangRange(e,p,{voids:!0})),p},toSlatePoint:function(e,t,n){var r,o=n.exactMatch,i=n.suppressThrow,a=Gi(o?t:function(e){var t,n=Gi(e,2),r=n[0],o=n[1];if(Os(r)&&r.childNodes.length){var i=o===r.childNodes.length,a=i?o-1:o;for(r=(t=Gi(Ls(r,a,i?\"backward\":\"forward\"),2))[0],i=(a=t[1])<o;Os(r)&&r.childNodes.length;){var s=i?r.childNodes.length-1:0;r=Ps(r,s,i?\"backward\":\"forward\");}o=i&&null!=r.textContent?r.textContent.length:0;}return [r,o]}(t),2),s=a[0],l=a[1],u=s.parentNode,c=null,f=0;if(u){var d=u.closest('[data-slate-void=\"true\"]'),p=u.closest(\"[data-slate-leaf]\"),h=null;if(p){c=p.closest('[data-slate-node=\"text\"]');var g=Hs.getWindow(e).document.createRange();g.setStart(c,0),g.setEnd(s,l);var y=g.cloneContents();Ji(Ji([],Gi(v.default(y.querySelectorAll(\"[data-slate-zero-width]\")))),Gi(v.default(y.querySelectorAll(\"[contenteditable=false]\")))).forEach((function(e){e.parentNode.removeChild(e);})),f=y.textContent.length,h=c;}else d&&((p=d.querySelector(\"[data-slate-leaf]\"))?(c=p.closest('[data-slate-node=\"text\"]'),f=(h=p).textContent.length,h.querySelectorAll(\"[data-slate-zero-width]\").forEach((function(e){f-=e.textContent.length;}))):f=1);h&&f===h.textContent.length&&(u.hasAttribute(\"data-slate-zero-width\")||_s&&(null===(r=h.textContent)||void 0===r?void 0:r.endsWith(\"\\n\")))&&f--;}if(!c){if(i)return null;throw new Error(\"Cannot resolve a Slate point from DOM point: \"+t)}var m=Hs.toSlateNode(e,c);return {path:Hs.findPath(e,m),offset:f}},hasRange:function(e,n){var r=n.anchor,o=n.focus;return t.Editor.hasPath(e,r.path)&&t.Editor.hasPath(e,o.path)},getNodeType:function(e){return t.Element.isElement(e)?e.type:\"\"},checkNodeType:function(e,t){return this.getNodeType(e)===t},getNodesStr:function(e){return e.map((function(e){return t.Node.string(e)})).join(\"\")},getSelectedElems:function(e){var n,r,o=[],i=t.Editor.nodes(e,{universal:!0});try{for(var a=qi(i),s=a.next();!s.done;s=a.next()){var l=Gi(s.value,1)[0];t.Element.isElement(l)&&o.push(l);}}catch(e){n={error:e};}finally{try{s&&!s.done&&(r=a.return)&&r.call(a);}finally{if(n)throw n.error}}return o},getSelectedNodeByType:function(e,n){var r=this,o=Gi(t.Editor.nodes(e,{match:function(e){return r.checkNodeType(e,n)},universal:!0}),1),i=o[0];return null==i?null:i[0]},getSelectedTextNode:function(e){var n=Gi(t.Editor.nodes(e,{match:function(e){return t.Text.isText(e)},universal:!0}),1),r=n[0];return null==r?null:r[0]},isNodeSelected:function(e,n){var r=Gi(t.Editor.nodes(e,{match:function(e){return e===n},universal:!0}),1),o=r[0];return null!=o&&Gi(o,1)[0]===n},isSelectionAtLineEnd:function(e,n){var r=e.selection;return !!r&&(t.Editor.isEnd(e,r.anchor,n)||t.Editor.isEnd(e,r.focus,n))},getTextarea:function(e){var t=Ga.get(e);if(null==t)throw new Error(\"Cannot find textarea instance by editor\");return t},getToolbar:function(e){return Xa.get(e)||null},getHoverbar:function(e){return Za.get(e)||null},normalizeContent:function(e){e.children.forEach((function(t,n){e.normalizeNode([t,[n]]);}));},getLeftLengthOfMaxLength:function(e){var t=e.getConfig(),n=t.maxLength,r=t.onMaxLength;if(\"number\"!=typeof n||n<=0)return 1/0;var o=n-e.getText().replace(/\\r|\\n|(\\r\\n)/g,\"\").length;return o<=0&&r&&r(e),o},cleanExposedTexNodeInSelectionBlock:function(e){var n,r,o,i,a=Hs.getTextarea(e).$textArea,s=null==a?void 0:a[0].childNodes;if(s)try{for(var l=qi(Array.from(s)),u=l.next();!u.done;u=l.next()){var c=u.value;if(3!==c.nodeType)break;c.remove();}}catch(e){n={error:e};}finally{try{u&&!u.done&&(r=l.return)&&r.call(l);}finally{if(n)throw n.error}}var f=t.Editor.nodes(e,{match:function(n){return !(!t.Element.isElement(n)||e.isInline(n))},universal:!0});try{for(var d=qi(f),p=d.next();!p.done;p=d.next()){var h=p.value;if(null!=h){var g=h[0];Ds(Hs.toDOMNode(e,g),(function(e,t){var n=y.default(t);n.attr(\"data-slate-string\")||n.attr(\"data-slate-zero-width\")||n.attr(\"data-w-e-reserve\")||t.removeChild(e);}));}}}catch(e){o={error:e};}finally{try{p&&!p.done&&(i=d.return)&&i.call(d);}finally{if(o)throw o.error}}},isLastNode:function(e,t){var n=e.children||[];return n[n.length-1]===t},genEmptyParagraph:function(){return {type:\"paragraph\",children:[{text:\"\"}]}},isSelectedVoidNode:function(e){var n,r,o=t.Editor.nodes(e,{match:function(t){return e.isVoid(t)}}),i=0;try{for(var a=qi(o),s=a.next();!s.done;s=a.next()){s.value;i++;}}catch(e){n={error:e};}finally{try{s&&!s.done&&(r=a.return)&&r.call(a);}finally{if(n)throw n.error}}return i>0},isSelectedEmptyParagraph:function(e){var n=e.selection;if(null==n)return !1;if(t.Range.isExpanded(n))return !1;var r=Hs.getSelectedNodeByType(e,\"paragraph\");if(null===r)return !1;var o=r.children;return 1===o.length&&(\"\"===o[0].text||void 0)},isEmptyPath:function(e,n){var r=t.Editor.node(e,n);if(null==r)return !1;var o=Gi(r,1)[0].children;if(1===o.length&&\"\"===o[0].text)return !0;return !1}},Vs=1,zs={};var Us={};var Ks=Zt.filter,qs=qo(\"filter\");_n({target:\"Array\",proto:!0,forced:!qs},{filter:function(e){return Ks(this,e,arguments.length>1?arguments[1]:void 0)}});var Gs=\"\\t\\n\\v\\f\\r                　\\u2028\\u2029\\ufeff\",Js=W(\"\".replace),Ys=\"[\"+Gs+\"]\",Xs=RegExp(\"^\"+Ys+Ys+\"*\"),Qs=RegExp(Ys+Ys+\"*$\"),Zs=function(e){return function(t){var n=er(V(t));return 1&e&&(n=Js(n,Xs,\"\")),2&e&&(n=Js(n,Qs,\"\")),n}},el={start:Zs(1),end:Zs(2),trim:Zs(3)},tl=ht.PROPER,nl=el.trim;_n({target:\"String\",proto:!0,forced:function(e){return se((function(){return !!Gs[e]()||\"​᠎\"!==\"​᠎\"[e]()||tl&&Gs[e].name!==e}))}(\"trim\")},{trim:function(){return nl(this)}});var rl=[];var ol={};function il(e,t,n){var r=n.isInline(e)?\"span\":\"div\";return \"<\"+r+\">\"+t+\"</\"+r+\">\"}function al(e,n){var r=e.type,o=void 0===r?\"\":r,i=e.children,a=void 0===i?[]:i,s=t.Editor.isVoid(n,e),l=\"\";s||(l=a.map((function(e){return Ku(e,n)})).join(\"\"));var u=function(e){return ol[e]||il}(o),c=u(e,l,n),f=\"\";if(f=\"string\"==typeof c?c:c.html||\"\",s||rl.forEach((function(t){return f=t(e,f)})),\"string\"==typeof c)return f;var d=c.prefix,p=void 0===d?\"\":d,h=c.suffix,g=void 0===h?\"\":h;return p&&(f=p+f),g&&(f+=g),f}var sl,ll,ul,cl,fl=P.Promise,dl=he(\"species\"),pl=function(e){var t=ee(e),n=Ve.f;ye&&t&&!t[dl]&&n(t,dl,{configurable:!0,get:function(){return this}});},hl=P.TypeError,gl=he(\"species\"),vl=function(e,t){var n,r=Oe(e).constructor;return void 0===r||null==(n=Oe(r)[gl])?t:function(e){if(qt(e))return e;throw hl(Re(e)+\" is not a constructor\")}(n)},yl=W([].slice),ml=/(?:ipad|iphone|ipod).*applewebkit/i.test(te),bl=\"process\"==mt(P.process),wl=P.setImmediate,xl=P.clearImmediate,El=P.process,Sl=P.Dispatch,kl=P.Function,Ol=P.MessageChannel,Cl=P.String,Tl=0,Nl={},Ml=\"onreadystatechange\";try{sl=P.location;}catch(e){}var Ll=function(e){if(q(Nl,e)){var t=Nl[e];delete Nl[e],t();}},Pl=function(e){return function(){Ll(e);}},Rl=function(e){Ll(e.data);},Dl=function(e){P.postMessage(Cl(e),sl.protocol+\"//\"+sl.host);};wl&&xl||(wl=function(e){var t=yl(arguments,1);return Nl[++Tl]=function(){wi(Q(e)?e:kl(e),void 0,t);},ll(Tl),Tl},xl=function(e){delete Nl[e];},bl?ll=function(e){El.nextTick(Pl(e));}:Sl&&Sl.now?ll=function(e){Sl.now(Pl(e));}:Ol&&!ml?(cl=(ul=new Ol).port2,ul.port1.onmessage=Rl,ll=Mt(cl.postMessage,cl)):P.addEventListener&&Q(P.postMessage)&&!P.importScripts&&sl&&\"file:\"!==sl.protocol&&!se(Dl)?(ll=Dl,P.addEventListener(\"message\",Rl,!1)):ll=Ml in xe(\"script\")?function(e){fr.appendChild(xe(\"script\")).onreadystatechange=function(){fr.removeChild(this),Ll(e);};}:function(e){setTimeout(Pl(e),0);});var jl,Al,_l,Fl,Il,Bl,$l,Wl,Hl={set:wl,clear:xl},Vl=/ipad|iphone|ipod/i.test(te)&&void 0!==P.Pebble,zl=/web0s(?!.*chrome)/i.test(te),Ul=dn.f,Kl=Hl.set,ql=P.MutationObserver||P.WebKitMutationObserver,Gl=P.document,Jl=P.process,Yl=P.Promise,Xl=Ul(P,\"queueMicrotask\"),Ql=Xl&&Xl.value;Ql||(jl=function(){var e,t;for(bl&&(e=Jl.domain)&&e.exit();Al;){t=Al.fn,Al=Al.next;try{t();}catch(e){throw Al?Fl():_l=void 0,e}}_l=void 0,e&&e.enter();},ml||bl||zl||!ql||!Gl?!Vl&&Yl&&Yl.resolve?(($l=Yl.resolve(void 0)).constructor=Yl,Wl=Mt($l.then,$l),Fl=function(){Wl(jl);}):bl?Fl=function(){Jl.nextTick(jl);}:(Kl=Mt(Kl,P),Fl=function(){Kl(jl);}):(Il=!0,Bl=Gl.createTextNode(\"\"),new ql(jl).observe(Bl,{characterData:!0}),Fl=function(){Bl.data=Il=!Il;}));var Zl,eu,tu,nu,ru=Ql||function(e){var t={fn:e,next:void 0};_l&&(_l.next=t),Al||(Al=t,Fl()),_l=t;},ou=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError(\"Bad Promise constructor\");t=e,n=r;})),this.resolve=je(t),this.reject=je(n);},iu={f:function(e){return new ou(e)}},au=function(e){try{return {error:!1,value:e()}}catch(e){return {error:!0,value:e}}},su=\"object\"==typeof window,lu=Hl.set,uu=he(\"species\"),cu=\"Promise\",fu=ct.getterFor(cu),du=ct.set,pu=ct.getterFor(cu),hu=fl&&fl.prototype,gu=fl,vu=hu,yu=P.TypeError,mu=P.document,bu=P.process,wu=iu.f,xu=wu,Eu=!!(mu&&mu.createEvent&&P.dispatchEvent),Su=Q(P.PromiseRejectionEvent),ku=\"unhandledrejection\",Ou=!1,Cu=jn(cu,(function(){var e=Ye(gu),t=e!==String(gu);if(!t&&66===ae)return !0;if(ae>=51&&/native code/.test(e))return !1;var n=new gu((function(e){e(1);})),r=function(e){e((function(){}),(function(){}));};return (n.constructor={})[uu]=r,!(Ou=n.then((function(){}))instanceof r)||!t&&su&&!Su})),Tu=Cu||!Gr((function(e){gu.all(e).catch((function(){}));})),Nu=function(e){var t;return !(!me(e)||!Q(t=e.then))&&t},Mu=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;ru((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,s,l,u=n[i++],c=o?u.ok:u.fail,f=u.resolve,d=u.reject,p=u.domain;try{c?(o||(2===e.rejection&&Du(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),l=!0)),a===u.promise?d(yu(\"Promise-chain cycle\")):(s=Nu(a))?Te(s,a,f,d):f(a)):d(r);}catch(e){p&&!l&&p.exit(),d(e);}}e.reactions=[],e.notified=!1,t&&!e.rejection&&Pu(e);}));}},Lu=function(e,t,n){var r,o;Eu?((r=mu.createEvent(\"Event\")).promise=t,r.reason=n,r.initEvent(e,!1,!0),P.dispatchEvent(r)):r={promise:t,reason:n},!Su&&(o=P[\"on\"+e])?o(r):e===ku&&function(e,t){var n=P.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t));}(\"Unhandled promise rejection\",n);},Pu=function(e){Te(lu,P,(function(){var t,n=e.facade,r=e.value;if(Ru(e)&&(t=au((function(){bl?bu.emit(\"unhandledRejection\",r,n):Lu(ku,n,r);})),e.rejection=bl||Ru(e)?2:1,t.error))throw t.value}));},Ru=function(e){return 1!==e.rejection&&!e.parent},Du=function(e){Te(lu,P,(function(){var t=e.facade;bl?bu.emit(\"rejectionHandled\",t):Lu(\"rejectionhandled\",t,e.value);}));},ju=function(e,t,n){return function(r){e(t,r,n);}},Au=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,Mu(e,!0));},_u=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw yu(\"Promise can't be resolved itself\");var r=Nu(t);r?ru((function(){var n={done:!1};try{Te(r,t,ju(_u,n,e),ju(Au,n,e));}catch(t){Au(n,t,e);}})):(e.value=t,e.state=1,Mu(e,!1));}catch(t){Au({done:!1},t,e);}}};if(Cu&&(vu=(gu=function(e){ba(this,vu),je(e),Te(Zl,this);var t=fu(this);try{e(ju(_u,t),ju(Au,t));}catch(e){Au(t,e);}}).prototype,(Zl=function(e){du(this,{type:cu,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0});}).prototype=na(vu,{then:function(e,t){var n=pu(this),r=n.reactions,o=wu(vl(this,gu));return o.ok=!Q(e)||e,o.fail=Q(t)&&t,o.domain=bl?bu.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&Mu(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),eu=function(){var e=new Zl,t=fu(e);this.promise=e,this.resolve=ju(_u,t),this.reject=ju(Au,t);},iu.f=wu=function(e){return e===gu||e===tu?new eu(e):xu(e)},Q(fl)&&hu!==Object.prototype)){nu=hu.then,Ou||(gt(hu,\"then\",(function(e,t){var n=this;return new gu((function(e,t){Te(nu,n,e,t);})).then(e,t)}),{unsafe:!0}),gt(hu,\"catch\",vu.catch,{unsafe:!0}));try{delete hu.constructor;}catch(e){}xo&&xo(hu,vu);}_n({global:!0,wrap:!0,forced:Cu},{Promise:gu}),vo(gu,cu,!1),pl(cu),tu=ee(cu),_n({target:cu,stat:!0,forced:Cu},{reject:function(e){var t=wu(this);return Te(t.reject,void 0,e),t.promise}}),_n({target:cu,stat:!0,forced:Cu},{resolve:function(e){return function(e,t){if(Oe(e),me(t)&&t.constructor===e)return t;var n=iu.f(e);return (0, n.resolve)(t),n.promise}(this,e)}}),_n({target:cu,stat:!0,forced:Tu},{all:function(e){var t=this,n=wu(t),r=n.resolve,o=n.reject,i=au((function(){var n=je(t.resolve),i=[],a=0,s=1;ya(e,(function(e){var l=a++,u=!1;s++,Te(n,t,e).then((function(e){u||(u=!0,i[l]=e,--s||r(i));}),o);})),--s||r(i);}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=wu(t),r=n.reject,o=au((function(){var o=je(t.resolve);ya(e,(function(e){Te(o,t,e).then(n.resolve,r);}));}));return o.error&&r(o.value),n.promise}});var Fu=Zo.UNSUPPORTED_Y,Iu=4294967295,Bu=Math.min,$u=[].push,Wu=W(/./.exec),Hu=W($u),Vu=W(\"\".slice),zu=!se((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n=\"ab\".split(e);return 2!==n.length||\"a\"!==n[0]||\"b\"!==n[1]}));function Uu(e){Promise.resolve().then(e);}function Ku(e,n){return t.Element.isElement(e)?al(e,n):function(e,t){var n=e.text;if(null==n)throw new Error(\"Current node is not slate Text \"+JSON.stringify(e));var r=n;r=function(e){return e.replace(/ {2}/g,\" &nbsp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/®/g,\"&reg;\").replace(/©/g,\"&copy;\").replace(/™/g,\"&trade;\")}(r);var o=Hs.getParentsNodes(t,e).some((function(e){return \"pre\"===Hs.getNodeType(e)}));if(o||(r=r.replace(/\\r\\n|\\r|\\n/g,\"<br>\")),o&&(r=r.replace(/&nbsp;/g,\" \")),\"\"===r){var i=Hs.getParentNode(null,e);if(!i||0!==i.children.length)return r;r=\"<br>\";}return rl.forEach((function(t){return r=t(e,r)})),r}(e,n)}function qu(e){return \"w-e-element-\"+e}Si(\"split\",(function(e,t,n){var r;return r=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(e,n){var r=er(V(this)),o=void 0===n?Iu:n>>>0;if(0===o)return [];if(void 0===e)return [r];if(!Sr(e))return Te(t,r,e,o);for(var i,a,s,l=[],u=(e.ignoreCase?\"i\":\"\")+(e.multiline?\"m\":\"\")+(e.unicode?\"u\":\"\")+(e.sticky?\"y\":\"\"),c=0,f=new RegExp(e.source,u+\"g\");(i=Te(gi,f,r))&&!((a=f.lastIndex)>c&&(Hu(l,Vu(r,c,i.index)),i.length>1&&i.index<r.length&&wi($u,l,ia(i,1)),s=i[0].length,c=a,l.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return c===r.length?!s&&Wu(f,\"\")||Hu(l,\"\"):Hu(l,Vu(r,c)),l.length>o?ia(l,0,o):l}:\"0\".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:Te(t,this,e,n)}:t,[function(t,n){var o=V(this),i=null==t?void 0:Ae(t,e);return i?Te(i,t,o,n):Te(r,er(o),t,n)},function(e,o){var i=Oe(this),a=er(e),s=n(r,i,a,o,r!==t);if(s.done)return s.value;var l=vl(i,RegExp),u=i.unicode,c=(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(Fu?\"g\":\"y\"),f=new l(Fu?\"^(?:\"+i.source+\")\":i,c),d=void 0===o?Iu:o>>>0;if(0===d)return [];if(0===a.length)return null===ji(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=Fu?0:h;var v,y=ji(f,Fu?Vu(a,h):a);if(null===y||(v=Bu(Ft(f.lastIndex+(Fu?h:0)),a.length))===p)h=Oi(a,h,u);else {if(Hu(g,Vu(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(Hu(g,y[m]),g.length===d)return g;h=p=v;}}return Hu(g,Vu(a,p)),g}]}),!zu,Fu);var Gu=function(e,t){var n=(t.top+t.bottom)/2;return e.top<=n&&e.bottom>=n},Ju=function(e,t,n){var r=Hs.toDOMRange(e,t).getBoundingClientRect(),o=Hs.toDOMRange(e,n).getBoundingClientRect();return Gu(r,o)&&Gu(o,r)},Yu=[\"span\",\"b\",\"strong\",\"i\",\"em\",\"s\",\"strike\",\"u\",\"font\",\"sub\",\"sup\"],Xu=[];var Qu=[];var Zu={};var ec=Ve.f,tc=Sn.f,nc=ct.enforce,rc=he(\"match\"),oc=P.RegExp,ic=oc.prototype,ac=P.SyntaxError,sc=W(tr),lc=W(ic.exec),uc=W(\"\".charAt),cc=W(\"\".replace),fc=W(\"\".indexOf),dc=W(\"\".slice),pc=/^\\?<[^\\s\\d!#%&*+<=>@^][^\\s!#%&*+<=>@^]*>/,hc=/a/g,gc=/a/g,vc=new oc(hc)!==hc,yc=Zo.MISSED_STICKY,mc=Zo.UNSUPPORTED_Y,bc=ye&&(!vc||yc||ti||ri||se((function(){return gc[rc]=!1,oc(hc)!=hc||oc(gc)==gc||\"/a/i\"!=oc(hc,\"i\")})));if(jn(\"RegExp\",bc)){for(var wc=function(e,t){var n,r,o,i,a,s,l=Ne(ic,this),u=Sr(e),c=void 0===t,f=[],d=e;if(!l&&u&&c&&e.constructor===wc)return e;if((u||Ne(ic,e))&&(e=e.source,c&&(t=\"flags\"in d?d.flags:sc(d))),e=void 0===e?\"\":er(e),t=void 0===t?\"\":er(t),d=e,ti&&\"dotAll\"in hc&&(r=!!t&&fc(t,\"s\")>-1)&&(t=cc(t,/s/g,\"\")),n=t,yc&&\"sticky\"in hc&&(o=!!t&&fc(t,\"y\")>-1)&&mc&&(t=cc(t,/y/g,\"\")),ri&&(i=function(e){for(var t,n=e.length,r=0,o=\"\",i=[],a={},s=!1,l=!1,u=0,c=\"\";r<=n;r++){if(\"\\\\\"===(t=uc(e,r)))t+=uc(e,++r);else if(\"]\"===t)s=!1;else if(!s)switch(!0){case\"[\"===t:s=!0;break;case\"(\"===t:lc(pc,dc(e,r+1))&&(r+=2,l=!0),o+=t,u++;continue;case\">\"===t&&l:if(\"\"===c||q(a,c))throw new ac(\"Invalid capture group name\");a[c]=!0,i[i.length]=[c,u],l=!1,c=\"\";continue}l?c+=t:o+=t;}return [o,i]}(e),e=i[0],f=i[1]),a=wa(oc(e,t),l?this:ic,wc),(r||o||f.length)&&(s=nc(a),r&&(s.dotAll=!0,s.raw=wc(function(e){for(var t,n=e.length,r=0,o=\"\",i=!1;r<=n;r++)\"\\\\\"!==(t=uc(e,r))?i||\".\"!==t?(\"[\"===t?i=!0:\"]\"===t&&(i=!1),o+=t):o+=\"[\\\\s\\\\S]\":o+=t+uc(e,++r);return o}(e),n)),o&&(s.sticky=!0),f.length&&(s.groups=f)),e!==d)try{Ue(a,\"source\",\"\"===d?\"(?:)\":d);}catch(e){}return a},xc=function(e){e in wc||ec(wc,e,{configurable:!0,get:function(){return oc[e]},set:function(t){oc[e]=t;}});},Ec=tc(oc),Sc=0;Ec.length>Sc;)xc(Ec[Sc++]);ic.constructor=wc,wc.prototype=ic,gt(P,\"RegExp\",wc);}pl(\"RegExp\");var kc=new RegExp(String.fromCharCode(160),\"g\");function Oc(e){return e.replace(kc,\" \")}function Cc(e,n){var r=e.length;if(r){var o=e[r-1];if(t.Text.isText(o)){var i=Object.keys(o);if(1===i.length&&\"text\"===i[0])return o.text=o.text+n,!0}}return !1}function Tc(e,t,n){return {type:\"paragraph\",children:[{text:y.default(e).text().replace(/\\s+/gm,\" \")}]}}function Nc(e,n){var r=function(e,t){var n=[];if(null!=e.attr(\"data-w-e-is-void\"))return n;var r=e[0].childNodes;return 1===r.length&&\"BR\"===r[0].nodeName?(n.push({text:\"\"}),n):(r.forEach((function(e){if(e.nodeType!==Ss.ELEMENT_NODE)if(e.nodeType!==Ss.TEXT_NODE);else {var r=e.textContent||\"\";if(\"\"===r.trim()&&r.indexOf(\"\\n\")>=0)return;r&&(r=Oc(r),Cc(n,r)||n.push({text:r}));}else {if(\"BR\"===e.nodeName)return void(Cc(n,\"\\n\")||n.push({text:\"\\n\"}));var o=Lc(y.default(e),t);Array.isArray(o)?o.forEach((function(e){return n.push(e)})):n.push(o);}})),n)}(e,n),o=function(e){for(var t in Zu)if(e[0].matches(t))return Zu[t];return Tc}(e),i=o(e[0],r,n);return Array.isArray(i)||(i=[i]),i.forEach((function(o){t.Editor.isVoid(n,o)||(0===r.length&&(o.children=[{text:e.text().replace(/\\s+/gm,\" \")}]),Qu.forEach((function(t){o=t(e[0],o,n);})));})),i}function Mc(e,t){0===e.parents(\"pre\").length&&(e[0].innerHTML=e[0].innerHTML.replace(/\\s+/gm,\" \").replace(/<br>/g,\"\\n\"));var n=e[0].textContent||\"\";n=function(e){return e.replace(/&nbsp;/g,\" \").replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\").replace(/&reg;/g,\"®\").replace(/&copy;/g,\"©\").replace(/&trade;/g,\"™\").replace(/&quot;/g,'\"')}(n);var r={text:n=Oc(n)};return Qu.forEach((function(n){r=n(e[0],r,t);})),r}function Lc(e,t){Xu.forEach((function(t){var n=t.selector,r=t.preParseHtml;e[0].matches(n)&&(e=y.default(r(e[0])));}));var n=js(e);return \"span\"===n?e.attr(\"data-w-e-type\")?Nc(e,t):Mc(e,t):\"code\"===n?\"pre\"===js(e.parent())?Nc(e,t):Mc(e,t):Yu.includes(n)?Mc(e,t):Nc(e,t)}function Pc(e,t,n){var r=y.default(n);return !!r.attr(t)||(r.attr(t,\"true\"),e.on(\"destroyed\",(function(){r.removeAttr(t);})),!1)}function Rc(e,t){void 0===t&&(t=\"\");var n=[];\"\"===t&&(t=\"<p><br></p>\"),0!==t.indexOf(\"<\")&&(t=t.split(/\\n/).map((function(e){return \"<p>\"+e+\"</p>\"})).join(\"\"));var r=y.default(\"<div>\"+t+\"</div>\");return Array.from(r.children()).forEach((function(t){var r=Lc(y.default(t),e);Array.isArray(r)?r.forEach((function(e){return n.push(e)})):n.push(r);})),n}var Dc=Ve.f,jc=pa.fastKey,Ac=ct.set,_c=ct.getterFor,Fc={getConstructor:function(e,t,n,r){var o=e((function(e,o){ba(e,i),Ac(e,{type:t,index:yr(null),first:void 0,last:void 0,size:0}),ye||(e.size=0),null!=o&&ya(o,e[r],{that:e,AS_ENTRIES:n});})),i=o.prototype,a=_c(t),s=function(e,t,n){var r,o,i=a(e),s=l(e,t);return s?s.value=n:(i.last=s={index:o=jc(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=s),r&&(r.next=s),ye?i.size++:e.size++,\"F\"!==o&&(i.index[o]=s)),e},l=function(e,t){var n,r=a(e),o=jc(t);if(\"F\"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return na(i,{clear:function(){for(var e=a(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,ye?e.size=0:this.size=0;},delete:function(e){var t=this,n=a(t),r=l(t,e);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),ye?n.size--:t.size--;}return !!r},forEach:function(e){for(var t,n=a(this),r=Mt(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous;},has:function(e){return !!l(this,e)}}),na(i,n?{get:function(e){var t=l(this,e);return t&&t.value},set:function(e,t){return s(this,0===e?0:e,t)}}:{add:function(e){return s(this,e=0===e?0:e,e)}}),ye&&Dc(i,\"size\",{get:function(){return a(this).size}}),o},setStrong:function(e,t,n){var r=t+\" Iterator\",o=_c(t),i=_c(r);Po(e,t,(function(e,t){Ac(this,{type:r,target:e,state:o(e),kind:t,last:void 0});}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?\"keys\"==t?{value:n.key,done:!1}:\"values\"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?\"entries\":\"values\",!n,!0),pl(t);}};xa(\"Set\",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),Fc);var Ic=new Set([\"doctype\",\"!doctype\",\"meta\",\"script\",\"style\",\"link\",\"frame\",\"iframe\",\"title\",\"svg\"]);function Bc(e,n){e.isInline(n)?(e.insertNode(n),\"link\"===n.type&&e.insertFragment([{text:\"\"}])):t.Transforms.insertNodes(e,n,{mode:\"highest\"});}var $c=function(e){var n=e,r=n.onChange,o=n.insertText,i=n.apply,a=n.deleteBackward;return n.insertText=function(e){n.getConfig().readOnly||o(e);},n.apply=function(e){var r,o,a,s,l,u,c,f,d=[];switch(e.type){case\"insert_text\":case\"remove_text\":case\"set_node\":try{for(var p=qi(t.Editor.levels(n,{at:e.path})),h=p.next();!h.done;h=p.next()){var g=Gi(h.value,2),v=g[0],y=g[1],m=Hs.findKey(n,v);d.push([y,m]);}}catch(e){r={error:e};}finally{try{h&&!h.done&&(o=p.return)&&o.call(p);}finally{if(r)throw r.error}}break;case\"insert_node\":case\"remove_node\":case\"merge_node\":case\"split_node\":try{for(var b=qi(t.Editor.levels(n,{at:t.Path.parent(e.path)})),w=b.next();!w.done;w=b.next()){var x=Gi(w.value,2);v=x[0],y=x[1],m=Hs.findKey(n,v);d.push([y,m]);}}catch(e){a={error:e};}finally{try{w&&!w.done&&(s=b.return)&&s.call(b);}finally{if(a)throw a.error}}break;case\"move_node\":try{for(var E=qi(t.Editor.levels(n,{at:t.Path.common(t.Path.parent(e.path),t.Path.parent(e.newPath))})),S=E.next();!S.done;S=E.next()){var k=Gi(S.value,2);v=k[0],y=k[1],m=Hs.findKey(n,v);d.push([y,m]);}}catch(e){l={error:e};}finally{try{S&&!S.done&&(u=E.return)&&u.call(E);}finally{if(l)throw l.error}}}i(e);try{for(var O=qi(d),C=O.next();!C.done;C=O.next()){var T=Gi(C.value,2);y=T[0],m=T[1],v=Gi(t.Editor.node(n,y),1)[0];ps.set(v,m);}}catch(e){c={error:e};}finally{try{C&&!C.done&&(f=O.return)&&f.call(O);}finally{if(c)throw c.error}}},n.deleteBackward=function(r){if(\"line\"!==r)return a(r);if(e.selection&&t.Range.isCollapsed(e.selection)){var o=t.Editor.above(e,{match:function(n){return t.Editor.isBlock(e,n)},at:e.selection});if(o){var i=Gi(o,2)[1],s=t.Editor.range(e,i,e.selection.anchor),l=function(e,n){var r=t.Editor.range(e,t.Range.end(n)),o=Array.from(t.Editor.positions(e,{at:n})),i=0,a=o.length,s=Math.floor(a/2);if(Ju(e,t.Editor.range(e,o[i]),r))return t.Editor.range(e,o[i],r);if(o.length<2)return t.Editor.range(e,o[o.length-1],r);for(;s!==o.length&&s!==i;)Ju(e,t.Editor.range(e,o[s]),r)?a=s:i=s,s=Math.floor((i+a)/2);return t.Editor.range(e,o[a],r)}(n,s);t.Range.isCollapsed(l)||t.Transforms.delete(e,{at:l});}}},n.onChange=function(){var e=n.selection;null!=e&&vs.set(n,e),n.emit(\"change\"),r();},n.handleTab=function(){n.insertText(\"    \");},n.getHtml=function(){var e=n.children;return (void 0===e?[]:e).map((function(e){return Ku(e,n)})).join(\"\")},n.getText=function(){var e=n.children;return (void 0===e?[]:e).map((function(e){return t.Node.string(e)})).join(\"\\n\")},n.getSelectionText=function(){var r=n.selection;return null==r?\"\":t.Editor.string(e,r)},n.getElemsByType=function(e,r){var o,i;void 0===r&&(r=!1);var a=[],s=t.Editor.nodes(n,{at:[],universal:!0});try{for(var l=qi(s),u=l.next();!u.done;u=l.next()){var c=Gi(u.value,1)[0];if(t.Element.isElement(c))if(r?c.type.indexOf(e)>=0:c.type===e){var f=qu(Hs.findKey(n,c).id);a.push(Ki(Ki({},c),{id:f}));}}}catch(e){o={error:e};}finally{try{u&&!u.done&&(i=l.return)&&i.call(l);}finally{if(o)throw o.error}}return a},n.getElemsByTypePrefix=function(e){return n.getElemsByType(e,!0)},n.isEmpty=function(){var e=n.children,r=void 0===e?[]:e;if(r.length>1)return !1;var o=r[0];if(null==o)return !0;if(t.Element.isElement(o)&&\"paragraph\"===o.type){var i=o.children,a=void 0===i?[]:i;if(a.length>1)return !1;var s=a[0];if(null==s)return !0;if(t.Text.isText(s)&&\"\"===s.text)return !0}return !1},n.clear=function(){t.Transforms.delete(n,{at:{anchor:t.Editor.start(n,[]),focus:t.Editor.end(n,[])}}),0===n.children.length&&t.Transforms.insertNodes(n,[{type:\"paragraph\",children:[{text:\"\"}]}]);},n.getParentNode=function(e){return Hs.getParentNode(n,e)},n.dangerouslyInsertHtml=function(e,r){if(void 0===e&&(e=\"\"),void 0===r&&(r=!1),e){var o=document.createElement(\"div\");o.innerHTML=e;var i=Array.from(o.childNodes);if(i=i.filter((function(e){var t=e.nodeType,n=e.nodeName;return t===Ss.TEXT_NODE||t===Ss.ELEMENT_NODE&&!Ic.has(n.toLowerCase())})),0!==i.length){var a=n.selection;if(null!=a){var s=null;if(Hs.isSelectedEmptyParagraph(n)&&!r)s=[a.focus.path[0]];o.setAttribute(\"hidden\",\"true\"),document.body.appendChild(o);var l=0;i.forEach((function(e){var t=e.nodeType,r=e.nodeName,o=e.textContent,i=void 0===o?\"\":o;if(t!==Ss.TEXT_NODE)if(\"BR\"!==r){var a=e,s=!1;if(Yu.includes(r.toLowerCase()))s=!0;else for(var u in Zu)if(a.matches(u)){s=!0;break}if(s){var c=Lc(y.default(a),n);return Array.isArray(c)?(c.forEach((function(e){return Bc(n,e)})),l++):(Bc(n,c),l++),void(Hs.isSelectedVoidNode(n)&&n.move(1))}var f=window.getComputedStyle(a).display;Hs.isSelectedEmptyParagraph(n)||f.indexOf(\"inline\")<0&&n.insertBreak(),n.dangerouslyInsertHtml(a.innerHTML,!0);}else n.insertText(\"\\n\");else {if(!i||!i.trim())return;n.insertNode({text:i});}})),l&&s&&Hs.isEmptyPath(n,s)&&t.Transforms.removeNodes(n,{at:s}),o.remove();}}}},n.setHtml=function(e){void 0===e&&(e=\"\");var r=n.isDisabled(),o=n.isFocused(),i=JSON.stringify(n.selection);n.enable(),n.focus(),n.clear();var a=Rc(n,e);if(t.Transforms.insertFragment(n,a),o||(n.deselect(),n.blur()),r&&(n.deselect(),n.disable()),n.isFocused())try{n.select(JSON.parse(i));}catch(e){n.select(t.Editor.start(n,[]));}},n},Wc=function(e){var n=e,r=n.insertText;return n.insertFragment,n.setFragmentData=function(e){var r=n.selection;if(r){var o=Gi(t.Range.edges(r),2),i=o[0],a=o[1],s=t.Editor.void(n,{at:i.path}),l=t.Editor.void(n,{at:a.path});if(!t.Range.isCollapsed(r)||s){var u=Hs.toDOMRange(n,r),c=u.cloneContents(),f=c.childNodes[0];if(c.childNodes.forEach((function(e){e.textContent&&\"\"!==e.textContent.trim()&&(f=e);})),l){var d=Gi(l,1)[0],p=u.cloneRange(),h=Hs.toDOMNode(n,d);p.setEndAfter(h),c=p.cloneContents();}if(s&&(f=c.querySelector(\"[data-slate-spacer]\")),Array.from(c.querySelectorAll(\"[data-slate-zero-width]\")).forEach((function(e){var t=\"n\"===e.getAttribute(\"data-slate-zero-width\");e.textContent=t?\"\\n\":\"\";})),Ns(f)){var g=f.ownerDocument.createElement(\"span\");g.style.whiteSpace=\"pre\",g.appendChild(f),c.appendChild(g),f=g;}var v=n.getFragment(),y=JSON.stringify(v),m=window.btoa(encodeURIComponent(y));f.setAttribute(\"data-slate-fragment\",m),e.setData(\"application/x-slate-fragment\",m);var b=c.ownerDocument.createElement(\"div\");return b.appendChild(c),b.setAttribute(\"hidden\",\"true\"),c.ownerDocument.body.appendChild(b),e.setData(\"text/html\",b.innerHTML),e.setData(\"text/plain\",Rs(b)),c.ownerDocument.body.removeChild(b),e}}},n.insertData=function(e){var o,i,a=e.getData(\"application/x-slate-fragment\");if(a){var s=decodeURIComponent(window.atob(a)),l=JSON.parse(s);n.insertFragment(l);}else {var u=e.getData(\"text/plain\"),c=e.getData(\"text/html\");if(c)n.dangerouslyInsertHtml(c);else if(u){var f=u.split(/\\r\\n|\\r|\\n/),d=!1;try{for(var p=qi(f),h=p.next();!h.done;h=p.next()){var g=h.value;d&&t.Transforms.splitNodes(n,{always:!0}),r(g),d=!0;}}catch(e){o={error:e};}finally{try{h&&!h.done&&(i=p.return)&&i.call(p);}finally{if(o)throw o.error}}}else;}},n},Hc=function(e){return null!=e},Vc={object:!0,function:!0,undefined:!0},zc=function(e){if(!function(e){return !!Hc(e)&&hasOwnProperty.call(Vc,typeof e)}(e))return !1;try{return !!e.constructor&&e.constructor.prototype===e}catch(e){return !1}},Uc=/^\\s*class[\\s{/}]/,Kc=Function.prototype.toString,qc=function(e){return !!function(e){if(\"function\"!=typeof e)return !1;if(!hasOwnProperty.call(e,\"length\"))return !1;try{if(\"number\"!=typeof e.length)return !1;if(\"function\"!=typeof e.call)return !1;if(\"function\"!=typeof e.apply)return !1}catch(e){return !1}return !zc(e)}(e)&&!Uc.test(Kc.call(e))},Gc=function(e){return null!=e},Jc=Object.keys,Yc=function(){try{return Object.keys(\"primitive\"),!0}catch(e){return !1}}()?Object.keys:function(e){return Jc(Gc(e)?Object(e):e)},Xc=function(e){if(!Gc(e))throw new TypeError(\"Cannot use null or undefined\");return e},Qc=Math.max,Zc=function(){var e,t=Object.assign;return \"function\"==typeof t&&(t(e={foo:\"raz\"},{bar:\"dwa\"},{trzy:\"trzy\"}),e.foo+e.bar+e.trzy===\"razdwatrzy\")}()?Object.assign:function(e,t){var n,r,o,i=Qc(arguments.length,2);for(e=Object(Xc(e)),o=function(r){try{e[r]=t[r];}catch(e){n||(n=e);}},r=1;r<i;++r)Yc(t=arguments[r]).forEach(o);if(void 0!==n)throw n;return e},ef=Array.prototype.forEach,tf=Object.create,nf=function(e,t){var n;for(n in e)t[n]=e[n];},rf=function(e){var t=tf(null);return ef.call(arguments,(function(e){Gc(e)&&nf(Object(e),t);})),t},of=\"razdwatrzy\",af=String.prototype.indexOf,sf=\"function\"==typeof of.contains&&!0===of.contains(\"dwa\")&&!1===of.contains(\"foo\")?String.prototype.contains:function(e){return af.call(this,e,arguments[1])>-1},lf=T((function(e){var t=e.exports=function(e,t){var n,r,o,i,a;return arguments.length<2||\"string\"!=typeof e?(i=t,t=e,e=null):i=arguments[2],Hc(e)?(n=sf.call(e,\"c\"),r=sf.call(e,\"e\"),o=sf.call(e,\"w\")):(n=o=!0,r=!1),a={value:t,configurable:n,enumerable:r,writable:o},i?Zc(rf(i),a):a};t.gs=function(e,t,n){var r,o,i,a;return \"string\"!=typeof e?(i=n,n=t,t=e,e=null):i=arguments[3],Hc(t)?qc(t)?Hc(n)?qc(n)||(i=n,n=void 0):n=void 0:(i=t,t=n=void 0):t=void 0,Hc(e)?(r=sf.call(e,\"c\"),o=sf.call(e,\"e\")):(r=!0,o=!1),a={get:t,set:n,configurable:r,enumerable:o},i?Zc(rf(i),a):a};})),uf=function(e){if(\"function\"!=typeof e)throw new TypeError(e+\" is not a function\");return e},cf=T((function(e,t){var n,r,o,i,a,s,l,u=Function.prototype.apply,c=Function.prototype.call,f=Object.create,d=Object.defineProperty,p=Object.defineProperties,h=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};n=function(e,t){var n;return uf(t),h.call(this,\"__ee__\")?n=this.__ee__:(n=g.value=f(null),d(this,\"__ee__\",g),g.value=null),n[e]?\"object\"==typeof n[e]?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},r=function(e,t){var r,i;return uf(t),i=this,n.call(this,e,r=function(){o.call(i,e,r),u.call(t,this,arguments);}),r.__eeOnceListener__=t,this},o=function(e,t){var n,r,o,i;if(uf(t),!h.call(this,\"__ee__\"))return this;if(!(n=this.__ee__)[e])return this;if(\"object\"==typeof(r=n[e]))for(i=0;o=r[i];++i)o!==t&&o.__eeOnceListener__!==t||(2===r.length?n[e]=r[i?0:1]:r.splice(i,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},i=function(e){var t,n,r,o,i;if(h.call(this,\"__ee__\")&&(o=this.__ee__[e]))if(\"object\"==typeof o){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(o=o.slice(),t=0;r=o[t];++t)u.call(r,this,i);}else switch(arguments.length){case 1:c.call(o,this);break;case 2:c.call(o,this,arguments[1]);break;case 3:c.call(o,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];u.call(o,this,i);}},a={on:n,once:r,off:o,emit:i},s={on:lf(n),once:lf(r),off:lf(o),emit:lf(i)},l=p({},s),e.exports=t=function(e){return null==e?f(l):p(Object(e),s)},t.methods=a;}));function ff(e){var t=ys.get(e);return null==t&&(t=cf(),ys.set(e,t)),t}var df=new WeakMap;function pf(e,t){var n=df.get(e);null==n&&(n=new Set,df.set(e,n)),n.add(t);}function hf(e){return df.get(e)||new Set}function gf(e){df.set(e,new Set);}function vf(e){var t=Hs.getTextarea(e).$textAreaContainer,n=t.width(),r=t.height(),o=t.offset();return {top:o.top,left:o.left,width:n,height:r}}function yf(e){var t={top:\"0\",left:\"0\"},n=e.selection;if(null==n)return t;var r=vf(e);if(null==r)return t;var o=r.top,i=r.left,a=r.width,s=r.height,l=Hs.toDOMRange(e,n).getClientRects()[0];if(null==l)return t;l.width;var u=l.height,c={},f=l.top-o,d=l.left-i;if(d>a/2){var p=a-d;c.right=p+5+\"px\";}else c.left=d+5+\"px\";if(f>s/2){var h=s-f;c.bottom=h+5+\"px\";}else {var g=f+u;g<0&&(g=0),c.top=g+5+\"px\";}return c}function mf(e,n,r){void 0===r&&(r=\"modal\");var o={top:\"0\",left:\"0\"};if(null==e.selection)return o;var i=t.Element.isElement(n)&&e.isVoid(n),a=t.Element.isElement(n)&&e.isInline(n),s=ds.get(n);if(null==s)return o;var l=s.getBoundingClientRect(),u=l.top,c=l.left,f=l.height,d=l.width;if(i){var p=function(e){var t=[];t.push(e);for(var n=0;t.length>0;){var r=t.pop();if(null==r)break;if(++n>1e4)break;var o=r.nodeName;if(1===r.nodeType){var i=o.toLowerCase();if(Es.includes(i)||\"iframe\"===i||\"video\"===i)return r;var a=r.children||[],s=a.length;if(s)for(var l=s-1;l>=0;l--)t.push(a[l]);}}return null}(s);if(null!=p){var h=p.getBoundingClientRect();u=h.top,f=h.height;}}var g=vf(e);if(null==g)return o;var v=g.top,y=g.left,m=g.width,b=g.height,w={},x=u-v,E=c-y;if(\"bar\"===r)return w.left=E+\"px\",x>40?w.bottom=b-x+5+\"px\":w.top=x+f+5+\"px\",w;if(\"modal\"===r){var S;if(i?a?E>(m-d)/2?w.right=m-E+5+\"px\":w.left=E+d+5+\"px\":w.left=\"20px\":w.left=E+\"px\",i)(S=x)<0&&(S=0),w.top=S+\"px\";else if(x>(b-f)/2)w.bottom=b-x+5+\"px\";else (S=x+f)<0&&(S=0),w.top=S+5+\"px\";return w}throw new Error(\"type '\"+r+\"' is invalid\")}function bf(e,t){Uu((function(){var n=vf(e);if(null!=n){var r,o=n.top,i=n.left,a=n.width,s=n.height,l=t.offset(),u=l.top,c=l.left,f=t.width(),d=t.height(),p=u-o,h=c-i,g=t.attr(\"style\");if(g.indexOf(\"top\")>=0)if((r=p+d-s)>0){var v=t.css(\"top\"),y=parseInt(v.toString())-r;y<0&&(y=0),t.css(\"top\",y+\"px\");}if(g.indexOf(\"bottom\")>=0&&u<0){var m=t.css(\"bottom\"),b=parseInt(m.toString())-Math.abs(u);t.css(\"bottom\",b+\"px\");}if(g.indexOf(\"left\")>=0)if((r=h+f-a)>0){var w=t.css(\"left\"),x=parseInt(w.toString())-r;x<0&&(x=0),t.css(\"left\",x+\"px\");}if(g.indexOf(\"right\")>=0&&c<0){var E=t.css(\"right\"),S=parseInt(E.toString())-Math.abs(c);t.css(\"right\",S+\"px\");}}}));}var wf=qo(\"slice\"),xf=he(\"species\"),Ef=P.Array,Sf=Math.max;_n({target:\"Array\",proto:!0,forced:!wf},{slice:function(e,t){var n,r,o,i=cn(this),a=It(i),s=gn(e,a),l=gn(void 0===t?a:t,a);if(Bt(i)&&(n=i.constructor,(qt(n)&&(n===Ef||Bt(n.prototype))||me(n)&&null===(n=n[xf]))&&(n=void 0),n===Ef||void 0===n))return yl(i,s,l);for(r=new(void 0===n?Ef:n)(Sf(l-s,0)),o=0;s<l;s++,o++)s in i&&Ir(r,o,i[s]);return r.length=o,r}});var kf=dn.f,Of=W(\"\".startsWith),Cf=W(\"\".slice),Tf=Math.min,Nf=Tr(\"startsWith\"),Mf=!Nf&&!!function(){var e=kf(String.prototype,\"startsWith\");return e&&!e.writable}();_n({target:\"String\",proto:!0,forced:!Mf&&!Nf},{startsWith:function(e){var t=er(V(this));Or(e);var n=Ft(Tf(arguments.length>1?arguments[1]:void 0,t.length)),r=er(e);return Of?Of(t,r,n):Cf(t,n,n+r.length)===r}});var Lf=Object.assign,Pf=Object.defineProperty,Rf=W([].concat),Df=!Lf||se((function(){if(ye&&1!==Lf({b:1},Lf(Pf({},\"a\",{enumerable:!0,get:function(){Pf(this,\"b\",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var e={},t={},n=Symbol(),r=\"abcdefghijklmnopqrst\";return e[n]=7,r.split(\"\").forEach((function(e){t[e]=e;})),7!=Lf({},e)[n]||Fn(Lf({},t)).join(\"\")!=r}))?function(e,t){for(var n=U(e),r=arguments.length,o=1,i=kn.f,a=un.f;r>o;)for(var s,l=Rt(arguments[o++]),u=i?Rf(Fn(l),i(l)):Fn(l),c=u.length,f=0;c>f;)s=u[f++],ye&&!Te(a,l,s)||(n[s]=l[s]);return n}:Lf;_n({target:\"Object\",stat:!0,forced:Object.assign!==Df},{assign:Df});var jf=[\"props\",\"attrs\",\"style\",\"dataset\",\"on\",\"hook\"];function Af(e){var t=e.data,n=void 0===t?{}:t,r=e.children,o=void 0===r?[]:r;Object.keys(n).forEach((function(t){var r,o,i=n[t];if(\"key\"!==t){if(!jf.includes(t)){if(t.startsWith(\"data-\")){var a=t.slice(5);return a=w.default(a),function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.dataset&&(n.dataset={});Object.assign(n.dataset,t);}(e,((r={})[a]=i,r)),void delete n[t]}!function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={});Object.assign(n.props,t);}(e,(o={},o[t]=i,o)),delete n[t];}}else e.key=i;})),o.length>0&&o.forEach((function(e){\"string\"!=typeof e&&Af(e);}));}var _f=[];var Ff={};function If(e,t,n){var r=n.isInline(e)?\"span\":\"div\";return s.jsx(r,null,t)}function Bf(e,n){var r,o=Hs.findKey(n,e),i=n.isInline(e),a=t.Editor.isVoid(n,e),l=qu(o.id),u={id:l,key:o.id,\"data-slate-node\":\"element\",\"data-slate-inline\":i},c=e.type,f=e.children,d=void 0===f?[]:f,p=function(e){return Ff[e]||If}(c);r=a?null:d.map((function(t,r){return Vf(t,r,e,n)}));var h=p(e,r,n);if(a){u[\"data-slate-void\"]=!0;var g=i?\"span\":\"div\",v=Gi(t.Node.texts(e),1),y=Gi(v[0],1)[0],m=Vf(y,0,e,n),b=s.jsx(g,{\"data-slate-spacer\":!0,style:{height:\"0\",color:\"transparent\",outline:\"none\",position:\"absolute\"}},m);h=s.jsx(g,{style:{position:\"relative\"}},h,b),ss.set(y,0),ls.set(y,e);}return null==h.data&&(h.data={}),Object.assign(h.data,u),a||i||(h=function(e,t){var n=t;return _f.forEach((function(r){n=r(e,t);})),n}(e,h)),Uu((function(){var t=Ms(l);null!=t&&(fs.set(o,t),ds.set(e,t),cs.set(t,e));})),h}function $f(e,t){return void 0===t&&(t=!1),s.jsx(\"span\",{\"data-slate-string\":!0},t?e+\"\\n\":e)}function Wf(e,t){return void 0===e&&(e=0),void 0===t&&(t=!1),s.jsx(\"span\",{\"data-slate-zero-width\":t?\"n\":\"z\",\"data-slate-length\":e},\"\\ufeff\",t?s.jsx(\"br\",null):null)}function Hf(e,n,r){if(null==e.text)throw new Error(\"Current node is not slate Text \"+JSON.stringify(e));var o=Hs.findKey(r,e),i=r.getConfig().decorate;if(null==i)throw new Error(\"Can not get config.decorate\");var a=Hs.findPath(r,e),l=i([e,a]),u=t.Text.decorations(e,l),c=u.map((function(o,i){var a=function(e,n,r,o,i){void 0===n&&(n=!1);var a=e.text,s=Hs.findPath(i,r),l=t.Path.parent(s);if(t.Editor.isEditor(o))throw new Error(\"Text node \"+JSON.stringify(r)+\" parent is Editor\");return i.isVoid(o)?Wf(t.Node.string(o).length):\"\"!==a||o.children[o.children.length-1]!==r||i.isInline(o)||\"\"!==t.Editor.string(i,l)?\"\"===a?Wf():n&&\"\\n\"===a.slice(-1)?$f(a,!0):$f(a):Wf(0,!0)}(o,i===u.length-1,e,n,r);return a=function(e,t){var n=t;return _f.forEach((function(t){n=t(e,n);})),n}(o,a),s.jsx(\"span\",{\"data-slate-leaf\":!0},a)})),f=function(e){return \"w-e-text-\"+e}(o.id),d=s.jsx(\"span\",{\"data-slate-node\":\"text\",id:f,key:o.id},c);return Uu((function(){var t=Ms(f);null!=t&&(fs.set(o,t),ds.set(e,t),cs.set(t,e));})),d}function Vf(e,n,r,o){return ss.set(e,n),ls.set(e,r),t.Element.isElement(e)?Bf(e,o):Hf(e,r,o)}function zf(e,t){var n,r=e.$scroll,o=function(e){return \"w-e-textarea-\"+e}(e.id),i=t.getConfig(),a=i.readOnly,l=i.autoFocus,u=function(e,t){return void 0===t&&(t=!1),s.h(\"div#\"+e,{props:{contentEditable:!t}})}(o,a),c=t.children||[];u.children=c.map((function(e,n){var r=Vf(e,n,t,t);return Af(r),r}));var f=os.get(e);if(null==f&&(f=!0),f){var d=function(e,t){return y.default('<div\\n        id=\"'+e+'\"\\n        data-slate-editor\\n        data-slate-node=\"value\"\\n        suppressContentEditableWarning\\n        role=\"textarea\"\\n        spellCheck=\"true\"\\n        autoCorrect=\"true\"\\n        autoCapitalize=\"true\"\\n    ></div>')}(o);r.append(d),e.$textArea=d,n=d[0],(h=s.init([s.classModule,s.propsModule,s.styleModule,s.datasetModule,s.eventListenersModule,s.attributesModule]))(n,u),os.set(e,!1),is.set(e,h);}else {var p=as.get(e),h=is.get(e);if(null==p||null==h)return;n=p.elm,h(p,u);}if(null!=n||null!=(n=Ms(o))){if((f?l:t.isFocused())&&n.focus({preventScroll:!0}),f){var g=ks(n);g&&hs.set(t,g);}us.set(t,n),ds.set(t,n),cs.set(n,t),as.set(e,u);}}function Uf(e){return \"object\"==typeof e&&null!=e&&1===e.nodeType}function Kf(e,t){return (!t||\"hidden\"!==e)&&\"visible\"!==e&&\"clip\"!==e}function qf(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var n=getComputedStyle(e,null);return Kf(n.overflowY,t)||Kf(n.overflowX,t)||function(e){var t=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(e){return null}}(e);return !!t&&(t.clientHeight<e.scrollHeight||t.clientWidth<e.scrollWidth)}(e)}return !1}function Gf(e,t,n,r,o,i,a,s){return i<e&&a>t||i>e&&a<t?0:i<=e&&s<=n||a>=t&&s>=n?i-e-r:a>t&&s<n||i<e&&s>n?a-t+o:0}var Jf=function(e,t){var n=window,r=t.scrollMode,o=t.block,i=t.inline,a=t.boundary,s=t.skipOverflowHiddenElements,l=\"function\"==typeof a?a:function(e){return e!==a};if(!Uf(e))throw new TypeError(\"Invalid target\");for(var u=document.scrollingElement||document.documentElement,c=[],f=e;Uf(f)&&l(f);){if((f=f.parentElement)===u){c.push(f);break}null!=f&&f===document.body&&qf(f)&&!qf(document.documentElement)||null!=f&&qf(f,s)&&c.push(f);}for(var d=n.visualViewport?n.visualViewport.width:innerWidth,p=n.visualViewport?n.visualViewport.height:innerHeight,h=window.scrollX||pageXOffset,g=window.scrollY||pageYOffset,v=e.getBoundingClientRect(),y=v.height,m=v.width,b=v.top,w=v.right,x=v.bottom,E=v.left,S=\"start\"===o||\"nearest\"===o?b:\"end\"===o?x:b+y/2,k=\"center\"===i?E+m/2:\"end\"===i?w:E,O=[],C=0;C<c.length;C++){var T=c[C],N=T.getBoundingClientRect(),M=N.height,L=N.width,P=N.top,R=N.right,D=N.bottom,j=N.left;if(\"if-needed\"===r&&b>=0&&E>=0&&x<=p&&w<=d&&b>=P&&x<=D&&E>=j&&w<=R)return O;var A=getComputedStyle(T),_=parseInt(A.borderLeftWidth,10),F=parseInt(A.borderTopWidth,10),I=parseInt(A.borderRightWidth,10),B=parseInt(A.borderBottomWidth,10),$=0,W=0,H=\"offsetWidth\"in T?T.offsetWidth-T.clientWidth-_-I:0,V=\"offsetHeight\"in T?T.offsetHeight-T.clientHeight-F-B:0;if(u===T)$=\"start\"===o?S:\"end\"===o?S-p:\"nearest\"===o?Gf(g,g+p,p,F,B,g+S,g+S+y,y):S-p/2,W=\"start\"===i?k:\"center\"===i?k-d/2:\"end\"===i?k-d:Gf(h,h+d,d,_,I,h+k,h+k+m,m),$=Math.max(0,$+g),W=Math.max(0,W+h);else {$=\"start\"===o?S-P-F:\"end\"===o?S-D+B+V:\"nearest\"===o?Gf(P,D,M,F,B+V,S,S+y,y):S-(P+M/2)+V/2,W=\"start\"===i?k-j-_:\"center\"===i?k-(j+L/2)+H/2:\"end\"===i?k-R+I+H:Gf(j,R,L,_,I+H,k,k+m,m);var z=T.scrollLeft,U=T.scrollTop;S+=U-($=Math.max(0,Math.min(U+$,T.scrollHeight-M+V))),k+=z-(W=Math.max(0,Math.min(z+W,T.scrollWidth-L+H)));}O.push({el:T,top:$,left:W});}return O},Yf=T((function(e,t){t.__esModule=!0,t.default=void 0;var n,r=(n=Jf)&&n.__esModule?n:{default:n};function o(e){return e===Object(e)&&0!==Object.keys(e).length}var i=function(e,t){var n=!e.ownerDocument.documentElement.contains(e);if(o(t)&&\"function\"==typeof t.behavior)return t.behavior(n?[]:(0, r.default)(e,t));if(!n){var i=function(e){return !1===e?{block:\"end\",inline:\"nearest\"}:o(e)?e:{block:\"start\",inline:\"nearest\"}}(t);return function(e,t){void 0===t&&(t=\"auto\");var n=\"scrollBehavior\"in document.body.style;e.forEach((function(e){var r=e.el,o=e.top,i=e.left;r.scroll&&n?r.scroll({top:o,left:i,behavior:t}):(r.scrollTop=o,r.scrollLeft=i);}));}((0, r.default)(e,i),i.behavior)}};t.default=i,e.exports=t.default;})),Xf=C(Yf);function Qf(e,t){return Cs(t)&&Hs.hasDOMNode(e,t,{editable:!0})}function Zf(e,n){if(e.getConfig().readOnly)return !1;var r=ed(e,n)&&Hs.toSlateNode(e,n);return t.Editor.isVoid(e,r)}function ed(e,t){return Cs(t)&&Hs.hasDOMNode(e,t)}function td(e,n,r){void 0===r&&(r=!1);var o=n.selection,i=n.getConfig(),a=Hs.findDocumentOrShadowRoot(n).getSelection();if(a&&(!e.isComposing||r)&&n.isFocused()){var s=\"None\"!==a.type;if(o||s){var l=us.get(n),u=!1;if(l.contains(a.anchorNode)&&l.contains(a.focusNode)&&(u=!0),s&&u&&o){var c=Hs.toSlateRange(n,a,{exactMatch:!0,suppressThrow:!0});if(c&&t.Range.equals(c,o)){var f=!0;if(t.Range.isCollapsed(o)){var d=a.anchorNode,p=a.anchorOffset;if(d===l){var h=l.childNodes,g=void 0;(g=h[p])&&g.matches(\"table\")&&(f=!1),(g=h[p-1])&&g.matches(\"table\")&&(f=!1);}}if(f)return}}if(!o||Hs.hasRange(n,o)){e.isUpdatingSelection=!0;var v=o&&Hs.toDOMRange(n,o);if(v){t.Range.isBackward(o)?a.setBaseAndExtent(v.endContainer,v.endOffset,v.startContainer,v.startOffset):a.setBaseAndExtent(v.startContainer,v.startOffset,v.endContainer,v.endOffset);var y=v.startContainer.parentElement;if(!y.closest(\"[data-slate-spacer]\")){y.getBoundingClientRect=v.getBoundingClientRect.bind(v);var m=document.body;Xf(y,{scrollMode:\"if-needed\",boundary:i.scroll?l.parentElement:m,block:\"end\",behavior:\"smooth\"}),delete y.getBoundingClientRect;}}else a.removeAllRanges();setTimeout((function(){v&&_s&&l.focus(),e.isUpdatingSelection=!1;}));}else n.selection=Hs.toSlateRange(n,a,{exactMatch:!1,suppressThrow:!1});}}}var nd=new WeakMap,rd=new WeakMap;var od={bold:\"mod+b\",compose:[\"down\",\"left\",\"right\",\"up\",\"backspace\",\"enter\"],moveBackward:\"left\",moveForward:\"right\",moveWordBackward:\"ctrl+left\",moveWordForward:\"ctrl+right\",deleteBackward:\"shift?+backspace\",deleteForward:\"shift?+delete\",extendBackward:\"shift+left\",extendForward:\"shift+right\",italic:\"mod+i\",splitBlock:\"shift?+enter\",undo:\"mod+z\",tab:\"tab\",selectAll:\"mod+a\"},id={moveLineBackward:\"opt+up\",moveLineForward:\"opt+down\",moveWordBackward:\"opt+left\",moveWordForward:\"opt+right\",deleteBackward:[\"ctrl+backspace\",\"ctrl+h\"],deleteForward:[\"ctrl+delete\",\"ctrl+d\"],deleteLineBackward:\"cmd+shift?+backspace\",deleteLineForward:[\"cmd+shift?+delete\",\"ctrl+k\"],deleteWordBackward:\"opt+shift?+backspace\",deleteWordForward:\"opt+shift?+delete\",extendLineBackward:\"opt+shift+up\",extendLineForward:\"opt+shift+down\",redo:\"cmd+shift+z\",transposeCharacter:\"ctrl+t\"},ad={deleteWordBackward:\"ctrl+shift?+backspace\",deleteWordForward:\"ctrl+shift?+delete\",redo:[\"ctrl+y\",\"ctrl+shift+z\"]},sd=function(e){var t=od[e],n=id[e],r=ad[e],o=t&&u.isKeyHotkey(t),i=n&&u.isKeyHotkey(n),a=r&&u.isKeyHotkey(r);return function(e){return !(!o||!o(e))||(!!(As&&i&&i(e))||!(As||!a||!a(e)))}},ld={isBold:sd(\"bold\"),isCompose:sd(\"compose\"),isMoveBackward:sd(\"moveBackward\"),isMoveForward:sd(\"moveForward\"),isDeleteBackward:sd(\"deleteBackward\"),isDeleteForward:sd(\"deleteForward\"),isDeleteLineBackward:sd(\"deleteLineBackward\"),isDeleteLineForward:sd(\"deleteLineForward\"),isDeleteWordBackward:sd(\"deleteWordBackward\"),isDeleteWordForward:sd(\"deleteWordForward\"),isExtendBackward:sd(\"extendBackward\"),isExtendForward:sd(\"extendForward\"),isExtendLineBackward:sd(\"extendLineBackward\"),isExtendLineForward:sd(\"extendLineForward\"),isItalic:sd(\"italic\"),isMoveLineBackward:sd(\"moveLineBackward\"),isMoveLineForward:sd(\"moveLineForward\"),isMoveWordBackward:sd(\"moveWordBackward\"),isMoveWordForward:sd(\"moveWordForward\"),isRedo:sd(\"redo\"),isSplitBlock:sd(\"splitBlock\"),isTransposeCharacter:sd(\"transposeCharacter\"),isUndo:sd(\"undo\"),isTab:sd(\"tab\"),isSelectAll:sd(\"selectAll\")};function ud(e){e.preventDefault();}var cd={beforeinput:function(e,n,r){var o=e,i=r.getConfig().readOnly;if(Ws&&!i&&Qf(r,o.target)){var a=r.selection,s=o.inputType,l=o.dataTransfer||o.data||void 0;if(\"insertCompositionText\"!==s&&\"deleteCompositionText\"!==s){if(o.preventDefault(),!s.startsWith(\"delete\")||s.startsWith(\"deleteBy\")){var u=Gi(o.getTargetRanges(),1)[0];if(u){var c=Hs.toSlateRange(r,u,{exactMatch:!1,suppressThrow:!1});a&&t.Range.equals(a,c)||t.Transforms.select(r,c);}}if(a&&t.Range.isExpanded(a)&&s.startsWith(\"delete\")){var f=s.endsWith(\"Backward\")?\"backward\":\"forward\";t.Editor.deleteFragment(r,{direction:f});}else switch(s){case\"deleteByComposition\":case\"deleteByCut\":case\"deleteByDrag\":t.Editor.deleteFragment(r);break;case\"deleteContent\":case\"deleteContentForward\":t.Editor.deleteForward(r);break;case\"deleteContentBackward\":t.Editor.deleteBackward(r);break;case\"deleteEntireSoftLine\":t.Editor.deleteBackward(r,{unit:\"line\"}),t.Editor.deleteForward(r,{unit:\"line\"});break;case\"deleteHardLineBackward\":t.Editor.deleteBackward(r,{unit:\"block\"});break;case\"deleteSoftLineBackward\":t.Editor.deleteBackward(r,{unit:\"line\"});break;case\"deleteHardLineForward\":t.Editor.deleteForward(r,{unit:\"block\"});break;case\"deleteSoftLineForward\":t.Editor.deleteForward(r,{unit:\"line\"});break;case\"deleteWordBackward\":t.Editor.deleteBackward(r,{unit:\"word\"});break;case\"deleteWordForward\":t.Editor.deleteForward(r,{unit:\"word\"});break;case\"insertLineBreak\":case\"insertParagraph\":t.Editor.insertBreak(r);break;case\"insertFromDrop\":case\"insertFromPaste\":case\"insertFromYank\":case\"insertReplacementText\":case\"insertText\":if(\"insertFromPaste\"===s&&!ms.get(r))break;l instanceof DataTransfer?r.insertData(l):\"string\"==typeof l&&t.Editor.insertText(r,l);}}}},blur:function(e,n,r){var o=e,i=n.isUpdatingSelection,a=n.latestElement;if(!r.getConfig().readOnly&&!i&&Qf(r,o.target)){var s=Hs.findDocumentOrShadowRoot(r);if(a!==s.activeElement){var l=o.relatedTarget;if(!(l===Hs.toDOMNode(r,r)||Os(l)&&l.hasAttribute(\"data-slate-spacer\"))){if(null!=l&&Cs(l)&&Hs.hasDOMNode(r,l)){var u=Hs.toSlateNode(r,l);if(t.Element.isElement(u)&&!r.isVoid(u))return}if(Fs){var c=s.getSelection();null==c||c.removeAllRanges();}gs.delete(r);}}}},focus:function(e,t,n){var r=Hs.toDOMNode(n,n),o=Hs.findDocumentOrShadowRoot(n);t.latestElement=o.activeElement,_s&&e.target!==r?r.focus():gs.set(n,!0);},click:function(e,n,r){if(!r.getConfig().readOnly&&ed(r,e.target)&&Cs(e.target)){var o=Hs.toSlateNode(r,e.target),i=Hs.findPath(r,o);if(t.Editor.hasPath(r,i))if(t.Node.get(r,i)===o){var a=t.Editor.start(r,i),s=t.Editor.end(r,i),l=t.Editor.void(r,{at:a}),u=t.Editor.void(r,{at:s});if(l&&u&&t.Path.equals(l[1],u[1])){var c=t.Editor.range(r,a);t.Transforms.select(r,c);}}}},compositionstart:function(e,n,r){if(Qf(r,e.target)){var o=r.selection;if(o&&t.Range.isExpanded(o)&&(t.Editor.deleteFragment(r),Promise.resolve().then((function(){td(n,r,!0);}))),o&&t.Range.isCollapsed(o)){var i=Hs.toDOMRange(r,o).startContainer,a=i.textContent||\"\";nd.set(r,a),rd.set(r,i);}n.isComposing=!0,function(e,t){var n;t.getConfig().placeholder&&t.isEmpty()&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1);}(n,r);}},compositionend:function(e,n,r){var o=e;if(Qf(r,o.target)){n.isComposing=!1;var i=r.selection;if(null!=i){($s||_s)&&Hs.cleanExposedTexNodeInSelectionBlock(r);for(var a=t.Range.isBackward(i)?i.focus:i.anchor,s=Gi(t.Editor.node(r,[a.path[0]]),1)[0],l=0;l<a.path.length;l++){var u=Gi(t.Editor.node(r,a.path.slice(0,l+1)),1)[0];if(t.Element.isElement(u)&&((Fs||_s)&&\"link\"===u.type||\"code\"===u.type)){Hs.setNewKey(s);break}}var c=o.data;if(c){if(r.getConfig().maxLength){var f=Hs.getLeftLengthOfMaxLength(r);if(f<c.length)Hs.toDOMRange(r,i).startContainer.textContent=nd.get(r)||\"\",f>0&&t.Editor.insertText(r,c.slice(0,f)),n.changeViewState();else t.Editor.insertText(r,c);}else t.Editor.insertText(r,c);Fs||setTimeout((function(){var e=r.selection;if(null!=e){var t=rd.get(r);if(null!=t)Hs.toDOMRange(r,e).startContainer!==t&&(t.textContent=nd.get(r)||\"\");}}));}}}},compositionupdate:function(e,t,n){Qf(n,e.target)&&(t.isComposing=!0);},keydown:function(e,n,r){var o=e,i=r.selection;if(!r.getConfig().readOnly&&!n.isComposing&&Qf(r,o.target)){if(function(e,t){var n=Xa.get(e),r=n&&n.getMenus(),o=Za.get(e),i=o&&o.getMenus(),a=Ki(Ki({},r),i);for(var s in a){var l=a[s],c=l.hotkey;if(c&&u.isHotkey(c,t)&&!l.isDisabled(e)){var f=l.getValue(e);l.exec(e,f);}}}(r,o),ld.isTab(o))return ud(o),void r.handleTab();if(ld.isRedo(o))return ud(o),void(\"function\"==typeof r.redo&&r.redo());if(ld.isUndo(o))return ud(o),void(\"function\"==typeof r.undo&&r.undo());if(ld.isMoveLineBackward(o))return ud(o),void t.Transforms.move(r,{unit:\"line\",reverse:!0});if(ld.isMoveLineForward(o))return ud(o),void t.Transforms.move(r,{unit:\"line\"});if(ld.isExtendLineBackward(o))return ud(o),void t.Transforms.move(r,{unit:\"line\",edge:\"focus\",reverse:!0});if(ld.isExtendLineForward(o))return ud(o),void t.Transforms.move(r,{unit:\"line\",edge:\"focus\"});if(ld.isMoveBackward(o))return ud(o),void(i&&t.Range.isCollapsed(i)?t.Transforms.move(r,{reverse:!0}):t.Transforms.collapse(r,{edge:\"start\"}));if(ld.isMoveForward(o))return ud(o),void(i&&t.Range.isCollapsed(i)?t.Transforms.move(r):t.Transforms.collapse(r,{edge:\"end\"}));if(ld.isMoveWordBackward(o))return ud(o),i&&t.Range.isExpanded(i)&&t.Transforms.collapse(r,{edge:\"focus\"}),void t.Transforms.move(r,{unit:\"word\",reverse:!0});if(ld.isMoveWordForward(o))return ud(o),i&&t.Range.isExpanded(i)&&t.Transforms.collapse(r,{edge:\"focus\"}),void t.Transforms.move(r,{unit:\"word\"});if(ld.isSelectAll(o))return ud(o),void r.selectAll();if(Ws){if(($s||Fs)&&i&&(ld.isDeleteBackward(o)||ld.isDeleteForward(o))&&t.Range.isCollapsed(i)){var a=t.Node.parent(r,i.anchor.path);if(t.Element.isElement(a)&&t.Editor.isVoid(r,a)&&t.Editor.isInline(r,a))return o.preventDefault(),void t.Transforms.delete(r,{unit:\"block\"})}}else {if(ld.isBold(o)||ld.isItalic(o)||ld.isTransposeCharacter(o))return void ud(o);if(ld.isSplitBlock(o))return ud(o),void t.Editor.insertBreak(r);if(ld.isDeleteBackward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"backward\"}):t.Editor.deleteBackward(r));if(ld.isDeleteForward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"forward\"}):t.Editor.deleteForward(r));if(ld.isDeleteLineBackward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"backward\"}):t.Editor.deleteBackward(r,{unit:\"line\"}));if(ld.isDeleteLineForward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"forward\"}):t.Editor.deleteForward(r,{unit:\"line\"}));if(ld.isDeleteWordBackward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"backward\"}):t.Editor.deleteBackward(r,{unit:\"word\"}));if(ld.isDeleteWordForward(o))return ud(o),void(i&&t.Range.isExpanded(i)?t.Editor.deleteFragment(r,{direction:\"forward\"}):t.Editor.deleteForward(r,{unit:\"word\"}))}}},keypress:function(e,n,r){if(!Ws&&!r.getConfig().readOnly&&Qf(r,e.target)){e.preventDefault();var o=e.key;t.Editor.insertText(r,o);}},copy:function(e,t,n){var r=e;if(Qf(n,r.target)){r.preventDefault();var o=r.clipboardData;null!=o&&n.setFragmentData(o);}},cut:function(e,n,r){var o=e,i=r.selection;if(!r.getConfig().readOnly&&Qf(r,o.target)){o.preventDefault();var a=o.clipboardData;if(null!=a&&(r.setFragmentData(a),i))if(t.Range.isExpanded(i))t.Editor.deleteFragment(r);else {var s=t.Node.parent(r,i.anchor.path);t.Editor.isVoid(r,s)&&t.Transforms.delete(r);}}},paste:function(e,t,n){ms.set(n,!0);var r=e;if(!n.getConfig().readOnly&&Qf(n,r.target)){var o=n.getConfig().customPaste;if(o)if(!1===o(n,r))return void ms.set(n,!1);if(!Ws||function(e){return e.clipboardData&&\"\"!==e.clipboardData.getData(\"text/plain\")&&1===e.clipboardData.types.length}(r)){r.preventDefault();var i=r.clipboardData;null!=i&&n.insertData(i);}}},dragover:function(e,n,r){if(ed(r,e.target)){var o=Hs.toSlateNode(r,e.target);t.Editor.isVoid(r,o)&&e.preventDefault();}},dragstart:function(e,n,r){var o=e;if(ed(r,o.target)&&!r.getConfig().readOnly){var i=Hs.toSlateNode(r,o.target),a=Hs.findPath(r,i);if(t.Editor.isVoid(r,i)||t.Editor.void(r,{at:a,voids:!0})){var s=t.Editor.range(r,a);t.Transforms.select(r,s);}var l=o.dataTransfer;null!=l&&(n.isDraggingInternally=!0,r.setFragmentData(l));}},dragend:function(e,t,n){var r=e;n.getConfig().readOnly||t.isDraggingInternally&&ed(n,r.target)&&(t.isDraggingInternally=!1);},drop:function(e,n,r){var o=e,i=o.dataTransfer;if(!r.getConfig().readOnly&&ed(r,o.target)&&null!=i&&!(Ws&&Fs&&i.files.length>0)){o.preventDefault();var a=r.selection,s=Hs.findEventRange(r,o);t.Transforms.select(r,s),n.isDraggingInternally&&(a&&t.Transforms.delete(r,{at:a}),n.isDraggingInternally=!1),r.insertData(i),r.isFocused()||r.focus();}}},fd=1,dd=function(){function e(e){var n=this;this.id=fd++,this.$textArea=null,this.$progressBar=y.default('<div class=\"w-e-progress-bar\"></div>'),this.$maxLengthInfo=y.default('<div class=\"w-e-max-length-info\"></div>'),this.isComposing=!1,this.isUpdatingSelection=!1,this.isDraggingInternally=!1,this.latestElement=null,this.showPlaceholder=!1,this.$placeholder=null,this.latestEditorSelection=null,this.onDOMSelectionChange=b.default((function(){var e=n.editorInstance;!function(e,n){var r=e.isComposing,o=e.isUpdatingSelection,i=e.isDraggingInternally;if(!(n.getConfig().readOnly||r||o||i)){var a=Hs.findDocumentOrShadowRoot(n),s=a.activeElement,l=Hs.toDOMNode(n,n),u=a.getSelection();if(s===l?(e.latestElement=s,gs.set(n,!0)):gs.delete(n),!u)return t.Transforms.deselect(n);var c=u.anchorNode,f=u.focusNode,d=Qf(n,c)||Zf(n,c),p=Qf(n,f)||Zf(n,f);if(d&&p){var h=Hs.toSlateRange(n,u,{exactMatch:!1,suppressThrow:!1});t.Transforms.select(n,h);}else t.Transforms.deselect(n);}}(n,e);}),100);var r=y.default(e);if(0===r.length)throw new Error(\"Cannot find textarea DOM by selector '\"+e+\"'\");this.$box=r;var o=y.default('<div class=\"w-e-text-container\"></div>');o.append(this.$progressBar),o.append(this.$maxLengthInfo),r.append(o);var i=y.default('<div class=\"w-e-scroll\"></div>');o.append(i),this.$scroll=i,this.$textAreaContainer=o,Uu((function(){var e=n.editorInstance,t=Hs.getWindow(e);t.document.addEventListener(\"selectionchange\",n.onDOMSelectionChange),e.on(\"destroyed\",(function(){t.document.removeEventListener(\"selectionchange\",n.onDOMSelectionChange);})),o.on(\"click\",(function(){return e.hidePanelOrModal()})),e.on(\"change\",n.changeViewState.bind(n));var r=e.getConfig().onChange;r&&e.on(\"change\",(function(){return r(e)})),n.onFocusAndOnBlur(),e.on(\"change\",n.changeMaxLengthInfo.bind(n)),n.bindEvent();}));}return Object.defineProperty(e.prototype,\"editorInstance\",{get:function(){var e=Ja.get(this);if(null==e)throw new Error(\"Can not get editor instance\");return e},enumerable:!1,configurable:!0}),e.prototype.bindEvent=function(){var e=this,t=this.$textArea,n=this.$scroll,r=this.editorInstance;null!=t&&(m.default(cd,(function(n,o){t.on(o,(function(t){n(t,e,r);}));})),r.getConfig().scroll&&(n.css(\"overflow-y\",\"auto\"),n.on(\"scroll\",b.default((function(){r.emit(\"scroll\");}),100))));},e.prototype.onFocusAndOnBlur=function(){var e=this,t=this.editorInstance,n=t.getConfig(),r=n.onBlur,o=n.onFocus;this.latestEditorSelection=t.selection,t.on(\"change\",(function(){null==e.latestEditorSelection&&null!=t.selection?setTimeout((function(){return o&&o(t)})):null!=e.latestEditorSelection&&null==t.selection&&setTimeout((function(){return r&&r(t)})),e.latestEditorSelection=t.selection;}));},e.prototype.changeMaxLengthInfo=function(){var e=this.editorInstance,t=e.getConfig().maxLength;if(t){var n=t-Hs.getLeftLengthOfMaxLength(e);this.$maxLengthInfo[0].innerHTML=n+\"/\"+t;}},e.prototype.changeProgress=function(e){var t=this.$progressBar;t.css(\"width\",e+\"%\"),e>=100&&setTimeout((function(){t.hide(),t.css(\"width\",\"0\"),t.show();}),1e3);},e.prototype.changeViewState=function(){var e=this,t=this.editorInstance;zf(this,t),function(e,t){var n,r=t.getConfig().placeholder;if(r){var o=t.isEmpty();if(o&&!e.showPlaceholder&&!e.isComposing){if(null==e.$placeholder){var i=y.default('<div class=\"w-e-text-placeholder\">'+r+\"</div>\");e.$textAreaContainer.append(i),e.$placeholder=i;}return e.$placeholder.show(),void(e.showPlaceholder=!0)}!o&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1);}}(this,t),Uu((function(){td(e,t);}));},e.prototype.destroy=function(){this.$textAreaContainer.remove();},e}();Si(\"match\",(function(e,t,n){return [function(t){var n=V(this),r=null==t?void 0:Ae(t,e);return r?Te(r,t,n):new RegExp(t)[e](er(n))},function(e){var r=Oe(this),o=er(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return ji(r,o);var a=r.unicode;r.lastIndex=0;for(var s,l=[],u=0;null!==(s=ji(r,o));){var c=er(s[0]);l[u]=c,\"\"===c&&(r.lastIndex=Oi(o,Ft(r.lastIndex),a)),u++;}return 0===u?null:l}]}));function pd(e){e.removeAttr(\"width\"),e.removeAttr(\"height\"),e.removeAttr(\"fill\"),e.removeAttr(\"class\"),e.removeAttr(\"t\"),e.removeAttr(\"p-id\");var t=e.children();t.length&&pd(t);}function hd(){return y.default('<svg viewBox=\"0 0 1024 1024\"><path d=\"M498.7 655.8l-197.6-268c-8.1-10.9-0.3-26.4 13.3-26.4h395.2c13.6 0 21.4 15.4 13.3 26.4l-197.6 268c-6.6 9-20 9-26.6 0z\"></path></svg>')}function gd(){return y.default('<div class=\"w-e-bar-divider\"></div>')}function vd(e,t,n,r,o){if(void 0===o&&(o=!1),t){if(r){var i=As?\"cmd\":\"ctrl\";r=r.replace(\"mod\",i);}if(o)r&&(e.attr(\"data-tooltip\",r),e.addClass(\"w-e-menu-tooltip-v5\"),e.addClass(\"tooltip-right\"));else {var a=r?n+\"\\n\"+r:n;e.attr(\"data-tooltip\",a),e.addClass(\"w-e-menu-tooltip-v5\");}}}var yd=function(){function e(e,t,n){var r=this;void 0===n&&(n=!1),this.$elem=y.default('<div class=\"w-e-bar-item\"></div>'),this.$button=y.default('<button type=\"button\"></button>'),this.disabled=!1,this.menu=t;var o=t.tag,i=t.width;if(\"button\"!==o)throw new Error(\"Invalid tag '\"+o+\"', expected 'button'\");var a=t.title,s=t.hotkey,l=void 0===s?\"\":s,u=t.iconSvg,c=void 0===u?\"\":u,f=this.$button;if(c){var d=y.default(c);pd(d),f.append(d);}else f.text(a);vd(f,c,a,l,n),n&&c&&f.append(y.default('<span class=\"title\">'+a+\"</span>\")),i&&f.css(\"width\",i+\"px\"),f.attr(\"data-menu-key\",e),this.$elem.append(f),Uu((function(){return r.init()}));}return e.prototype.init=function(){var e=this;this.setActive(),this.setDisabled(),this.$button.on(\"click\",(function(t){t.preventDefault(),Nd(e).hidePanelOrModal(),e.disabled||(e.exec(),e.onButtonClick());}));},e.prototype.exec=function(){var e=Nd(this),t=this.menu,n=t.getValue(e);t.exec(e,n);},e.prototype.setActive=function(){var e=Nd(this),t=this.$button,n=\"active\";this.menu.isActive(e)?t.addClass(n):t.removeClass(n);},e.prototype.setDisabled=function(){var e=Nd(this),t=this.$button,n=this.menu.isDisabled(e);(null==e.selection||e.isDisabled())&&(n=!0),this.menu.alwaysEnable&&(n=!1);var r=\"disabled\";n?t.addClass(r):t.removeClass(r),this.disabled=n;},e.prototype.changeMenuState=function(){this.setActive(),this.setDisabled();},e}(),md=function(e){function t(t,n,r){return void 0===r&&(r=!1),e.call(this,t,n,r)||this}return Ui(t,e),t.prototype.onButtonClick=function(){},t}(yd),bd=function(){function e(e){this.isShow=!1,this.showTime=0,this.record(e);}return e.prototype.record=function(e){var t=ts.get(e);null==t&&(t=new Set,ts.set(e,t)),t.add(this),ns.set(this,e);},e.prototype.renderContent=function(e){var t=this.$elem;t.empty(),t.append(e);var n=this.genSelfElem();n&&t.append(n);},e.prototype.appendTo=function(e){var t=this.$elem;e.append(t);},e.prototype.show=function(){if(!this.isShow){this.showTime=Date.now(),this.$elem.show(),this.isShow=!0;var e=ns.get(this);e&&e.emit(\"modalOrPanelShow\",this);}},e.prototype.hide=function(){if(this.isShow&&!(Date.now()-this.showTime<200)){this.$elem.hide(),this.isShow=!1;var e=ns.get(this);e&&e.emit(\"modalOrPanelHide\");}},e}(),wd=function(e){function t(t){var n=e.call(this,t)||this;return n.type=\"dropPanel\",n.$elem=y.default('<div class=\"w-e-drop-panel\"></div>'),n}return Ui(t,e),t.prototype.genSelfElem=function(){return null},t}(bd),xd=function(e){function t(t,n,r){void 0===r&&(r=!1);var o=e.call(this,t,n,r)||this;if(o.dropPanel=null,o.menu=n,n.showDropPanel){var i=hd();o.$button.append(i);}return o}return Ui(t,e),t.prototype.onButtonClick=function(){this.menu.showDropPanel&&this.handleDropPanel();},t.prototype.handleDropPanel=function(){var e=this.menu;if(null!=e.getPanelContentElem){var t=Nd(this);if(null==this.dropPanel){var n=new wd(t),r=e.getPanelContentElem(t);n.renderContent(r),n.appendTo(this.$elem),n.show(),this.dropPanel=n;}else {var o=this.dropPanel;if(o.isShow)o.hide();else {r=e.getPanelContentElem(t);o.renderContent(r),o.show();}}var i=this.dropPanel;if(i.isShow){var a=this.$elem,s=a.offset().left,l=a.parents(\".w-e-bar\");s-l.offset().left>=l.width()/2?i.$elem.css({left:\"none\",right:\"0\"}):i.$elem.css({left:\"0\",right:\"none\"});}}},t}(yd),Ed=function(e){function t(t,n){void 0===n&&(n=0);var r=e.call(this,t)||this;r.type=\"modal\",r.$elem=y.default('<div class=\"w-e-modal\"></div>'),r.width=0,n&&(r.width=n);var o=r.$elem;return o.on(\"click\",(function(e){return e.stopPropagation()})),o.on(\"keyup\",(function(e){\"Escape\"===e.code&&(r.hide(),t.restoreSelection());})),r}return Ui(t,e),t.prototype.genSelfElem=function(){var e=this,t=y.default('<span class=\"btn-close\"><svg viewBox=\"0 0 1024 1024\"><path d=\"M1024 896.1024l-128 128L512 640 128 1024 0 896 384 512 0 128 128 0 512 384 896.1024 0l128 128L640 512z\"></path></svg></span>'),n=ns.get(this);return t.on(\"click\",(function(){e.hide(),null==n||n.restoreSelection();})),t},t.prototype.setStyle=function(e){var t=this.width,n=this.$elem;n.attr(\"style\",\"\"),t&&n.css(\"width\",t+\"px\"),n.css(e);},t}(bd);var Sd=function(e){function n(t,n,r){void 0===r&&(r=!1);var o=e.call(this,t,n,r)||this;return o.$body=y.default(\"body\"),o.modal=null,o.menu=n,o}return Ui(n,e),n.prototype.onButtonClick=function(){this.menu.showModal&&this.handleModal();},n.prototype.getPosition=function(){var e=Nd(this),n=this.menu.getModalPositionNode(e);return t.Element.isElement(n)?mf(e,n,\"modal\"):yf(e)},n.prototype.handleModal=function(){var e=Nd(this),t=this.menu;if(null==this.modal){var n=new Ed(e,t.modalWidth);this.renderAndShowModal(n,!0),this.modal=n;}else {(n=this.modal).isShow?n.hide():this.renderAndShowModal(n,!1);}},n.prototype.renderAndShowModal=function(e,t){void 0===t&&(t=!1);var n=Nd(this),r=this.menu;if(null!=r.getModalContentElem){var o=Hs.getTextarea(n),i=Hs.getToolbar(n),a=((null==i?void 0:i.getConfig())||{}).modalAppendToBody,s=r.getModalContentElem(n);if(e.renderContent(s),a)e.setStyle({left:\"0\",right:\"0\"});else {var l=this.getPosition();e.setStyle(l);}t&&(a?e.appendTo(this.$body):e.appendTo(o.$textAreaContainer)),e.show(),a||bf(n,e.$elem),setTimeout((function(){n.blur();}));}},n}(yd);var kd=function(e){function t(t,n){var r=e.call(this,t)||this;return r.type=\"selectList\",r.$elem=y.default('<div class=\"w-e-select-list\"></div>'),n&&r.$elem.css(\"width\",n+\"px\"),r.$elem.on(\"click\",(function(e){e.stopPropagation();})),r}return Ui(t,e),t.prototype.renderList=function(e){var t=this.$elem;t.empty();var n=y.default(\"<ul></ul>\");e.forEach((function(e){var t=e.value,r=e.text,o=e.selected,i=e.styleForRenderMenuList,a=y.default('<li data-value=\"'+t+'\"></li>');if(i&&a.css(i),o){var s=y.default('<svg viewBox=\"0 0 1446 1024\"><path d=\"M574.116299 786.736392 1238.811249 48.517862C1272.390222 11.224635 1329.414799 7.827718 1366.75664 41.450462 1403.840015 74.840484 1406.731043 132.084741 1373.10189 169.433699L655.118888 966.834607C653.072421 969.716875 650.835807 972.514337 648.407938 975.210759 615.017957 1012.29409 558.292155 1015.652019 521.195664 982.250188L72.778218 578.493306C35.910826 545.297758 32.859041 488.584019 66.481825 451.242134 99.871807 414.158803 156.597563 410.800834 193.694055 444.202665L574.116299 786.736392Z\"></path></svg>');a.append(s),a.addClass(\"selected\");}a.append(y.default('<span data-value=\"'+t+'\">'+r+\"</span>\")),a.attr(\"title\",r),n.append(a);})),t.append(n);},t.prototype.genSelfElem=function(){return null},t}(bd);var Od=function(){function e(e,t,n){var r=this;void 0===n&&(n=!1),this.$elem=y.default('<div class=\"w-e-bar-item\"></div>'),this.$button=y.default('<button type=\"button\" class=\"select-button\"></button>'),this.disabled=!1,this.selectList=null;var o=t.tag,i=t.title,a=t.width,s=t.iconSvg,l=void 0===s?\"\":s,u=t.hotkey,c=void 0===u?\"\":u;if(\"select\"!==o)throw new Error(\"Invalid tag '\"+o+\"', expected 'select'\");var f=this.$button;a&&f.css(\"width\",a+\"px\"),f.attr(\"data-menu-key\",e),vd(f,l,i,c,n),this.$elem.append(f),this.menu=t,Uu((function(){return r.init()}));}return e.prototype.init=function(){var e=this;this.setSelectedValue(),this.$button.on(\"click\",(function(t){t.preventDefault(),Nd(e).hidePanelOrModal(),e.trigger();}));},e.prototype.trigger=function(){var e=this,t=Nd(this);if(!t.isDisabled()&&!this.disabled){var n=this.menu;if(null==this.selectList){this.selectList=new kd(t,n.selectPanelWidth);var r=this.selectList,o=n.getOptions(t);r.renderList(o),r.appendTo(this.$elem),r.show(),r.$elem.on(\"click\",\"li\",(function(t){var n=t.target;if(null!=n){t.preventDefault();var r=y.default(n).attr(\"data-value\");e.onChange(r);}}));}else {if((r=this.selectList).isShow)r.hide();else {o=n.getOptions(t);r.renderList(o),r.show();}}}},e.prototype.onChange=function(e){var t=Nd(this),n=this.menu;n.exec&&n.exec(t,e);},e.prototype.setSelectedValue=function(){var e=Nd(this),t=this.menu,n=t.getValue(e),r=function(e,t){for(var n=e.length,r=\"\",o=0;o<n;o++){var i=e[o];if(i.value===t){r=i.text;break}}return r}(t.getOptions(e),n.toString()),o=this.$button,i=hd();o.empty(),o.text(r),o.append(i);},e.prototype.setDisabled=function(){var e=Nd(this),t=this.menu.isDisabled(e),n=this.$button;(null==e.selection||e.isDisabled())&&(t=!0);var r=\"disabled\";t?n.addClass(r):n.removeClass(r),this.disabled=t;},e.prototype.changeMenuState=function(){this.setSelectedValue(),this.setDisabled();},e}(),Cd=function(){function e(e){this.$elem=y.default('<div class=\"w-e-bar-item w-e-bar-item-group\"></div>'),this.$container=y.default('<div class=\"w-e-bar-item-menus-container\"></div>'),this.$button=y.default('<button type=\"button\"></button>');var t=e.key,n=e.iconSvg,r=e.title,o=this.$elem,i=this.$button;if(n){var a=y.default(n);pd(a),i.append(a);}else i.text(r);i.attr(\"data-menu-key\",t);var s=hd();i.append(s),o.append(i);var l=this.$container;o.append(l);var u=this.createObserver();this.observe(u);}return e.prototype.appendBarItem=function(e){var t=e.$elem;this.$container.append(t);},e.prototype.observe=function(e){var t=this.$container;e.observe(t[0],{childList:!0,subtree:!0,attributes:!0});},e.prototype.createObserver=function(){var e=this,t=this.$container,n=this.$button,r=new MutationObserver((function(){var o=t.find(\"button\"),i=o.length;if(0!==i){var a=0;o.each((function(e){y.default(e).hasClass(\"disabled\")&&a++;})),r.disconnect(),a===i?n.addClass(\"disabled\"):n.removeClass(\"disabled\"),e.observe(r);}}));return r},e}(),Td=new WeakMap;function Nd(e){var t=es.get(e);if(null==t)throw new Error(\"Can not get editor instance\");return t}function Md(e,t,n){void 0===n&&(n=!1);var r=Td.get(t);if(r)return r;var o=t.tag;if(\"button\"===o){var i=t.showDropPanel,a=t.showModal;r=i?new xd(e,t,n):a?new Sd(e,t,n):new md(e,t,n);}if(\"select\"===o&&(r=new Od(e,t,n)),null==r)throw new Error(\"Invalid tag in menu \"+JSON.stringify(t));return Td.set(t,r),r}function Ld(e,n){var r=e.selection;return null!=r&&(!t.Range.isCollapsed(r)&&(!Hs.getSelectedElems(e).some((function(t){if(e.isVoid(t))return !0;var n=t.type;return !![\"pre\",\"code\",\"table\"].includes(n)||void 0}))&&!!t.Text.isText(n)))}var Pd=function(){function e(){var e=this;this.$elem=y.default('<div class=\"w-e-bar w-e-bar-hidden w-e-hover-bar\"></div>'),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null,this.isShow=!1,this.changeHoverbarState=x.default((function(){var n=e.isShow,r=e.getSelectedNodeAndMenuKeys()||{},o=r.node,i=void 0===o?null:o,a=r.menuKeys,s=void 0===a?[]:a;if((null!=i&&e.changeItemsState(),i&&t.Element.isElement(i))&&(n&&e.isSamePath(i,e.prevSelectedNode)))return;e.hideAndClean(),null!=i&&(e.registerItems(s),e.setPosition(i),e.show()),e.prevSelectedNode=i;}),200),Uu((function(){var t=e.getEditorInstance(),n=e.$elem;n.on(\"mousedown\",(function(e){return e.preventDefault()}),{passive:!1}),Hs.getTextarea(t).$textAreaContainer.append(n),t.on(\"change\",e.changeHoverbarState);var r=e.hideAndClean.bind(e);t.on(\"scroll\",r),t.on(\"fullScreen\",r),t.on(\"unFullScreen\",r);}));}return e.prototype.getMenus=function(){return this.menus},e.prototype.hideAndClean=function(){var e=this.$elem;e.removeClass(\"w-e-bar-show\").addClass(\"w-e-bar-hidden\"),this.hoverbarItems=[],e.empty(),this.isShow=!1;},e.prototype.checkPositionBottom=function(){var e=this.$elem,t=!1,n=window.innerHeight;n&&n>=360&&(n-e[0].getBoundingClientRect().bottom<360&&(t=!0));t?e.addClass(\"w-e-bar-bottom\"):e.removeClass(\"w-e-bar-bottom\");},e.prototype.show=function(){this.$elem.removeClass(\"w-e-bar-hidden\").addClass(\"w-e-bar-show\"),this.isShow=!0,this.checkPositionBottom();},e.prototype.changeItemsState=function(){var e=this;Uu((function(){e.hoverbarItems.forEach((function(e){e.changeMenuState();}));}));},e.prototype.registerItems=function(e){var t=this,n=this.$elem;e.forEach((function(e){if(\"|\"!==e)t.registerSingleItem(e);else {var r=gd();n.append(r);}}));},e.prototype.registerSingleItem=function(e){var t=this.getEditorInstance(),n=this.menus,r=n[e];if(null==r){var o=Us[e];if(null==o)throw new Error(\"Not found menu item factory by key '\"+e+\"'\");if(\"function\"!=typeof o)throw new Error(\"Menu item factory (key='\"+e+\"') is not a function\");r=o(),n[e]=r;}var i=Md(e,r);this.hoverbarItems.push(i),es.set(i,t),this.$elem.append(i.$elem);},e.prototype.setPosition=function(e){var n=this.getEditorInstance(),r=this.$elem;if(r.attr(\"style\",\"\"),t.Element.isElement(e)){var o=mf(n,e,\"bar\");return r.css(o),void bf(n,r)}if(t.Text.isText(e)){o=yf(n);return r.css(o),void bf(n,r)}throw new Error(\"hoverbar.setPosition error, current selected node is not elem nor text\")},e.prototype.getSelectedNodeAndMenuKeys=function(){var e=this.getEditorInstance();if(null==e.selection)return null;var n=this.getHoverbarKeysConf(),r=null,o=[],i=function(i){var a=n[i],s=a.match,l=a.menuKeys,u=void 0===l?[]:l,c=s||function(e,t){return Hs.checkNodeType(t,i)},f=Gi(t.Editor.nodes(e,{match:function(t){return c(e,t)},universal:!0}),1),d=f[0];if(null!=d)return r=d[0],o=u,\"break\"};for(var a in n){if(\"break\"===i(a))break}return null==r||0===o.length?null:{node:r,menuKeys:o}},e.prototype.getEditorInstance=function(){var e=Qa.get(this);if(null==e)throw new Error(\"Can not get editor instance\");return e},e.prototype.getHoverbarKeysConf=function(){var e=this.getEditorInstance().getConfig().hoverbarKeys,t=void 0===e?{}:e,n=t.text;return n&&null==n.match&&(n.match=Ld),t},e.prototype.isSamePath=function(e,n){if(null==e||null==n)return !1;var r=Hs.findPath(null,e),o=Hs.findPath(null,n);return t.Path.equals(r,o)},e.prototype.destroy=function(){this.changeHoverbarState.cancel(),this.$elem.remove(),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null;},e}();function Rd(e,n,r,o){if(ss.set(e,n),ls.set(e,r),t.Element.isElement(e)){var i=e.children;if((void 0===i?[]:i).forEach((function(t,n){return Rd(t,n,e,o)})),t.Editor.isVoid(o,e)){var a=Gi(t.Node.texts(e),1),s=Gi(a[0],1)[0];ss.set(s,0),ls.set(s,e);}}}var Dd=qo(\"splice\"),jd=P.TypeError,Ad=Math.max,_d=Math.min,Fd=9007199254740991,Id=\"Maximum allowed length exceeded\";_n({target:\"Array\",proto:!0,forced:!Dd},{splice:function(e,t){var n,r,o,i,a,s,l=U(this),u=It(l),c=gn(e,u),f=arguments.length;if(0===f?n=r=0:1===f?(n=0,r=u-c):(n=f-2,r=_d(Ad(At(t),0),u-c)),u+n-r>Fd)throw jd(Id);for(o=Yt(l,r),i=0;i<r;i++)(a=c+i)in l&&Ir(o,i,l[a]);if(o.length=r,n<r){for(i=c;i<u-r;i++)s=i+n,(a=i+r)in l?l[s]=l[a]:delete l[s];for(i=u;i>u-r+n;i--)delete l[i-1];}else if(n>r)for(i=u-r;i>c;i--)s=i+n-1,(a=i+r-1)in l?l[s]=l[a]:delete l[s];for(i=0;i<n;i++)l[i+c]=arguments[i+2];return l.length=u-r+n,o}});var Bd=function(){function e(e,t){var n=this;this.$toolbar=y.default('<div class=\"w-e-bar w-e-bar-show w-e-toolbar\"></div>'),this.menus={},this.toolbarItems=[],this.config={},this.changeToolbarState=x.default((function(){n.toolbarItems.forEach((function(e){e.changeMenuState();}));}),200),this.config=t;var r=y.default(e);if(0===r.length)throw new Error(\"Cannot find toolbar DOM by selector '\"+e+\"'\");this.$box=r;var o=this.$toolbar;o.on(\"mousedown\",(function(e){return e.preventDefault()}),{passive:!1}),r.append(o),Uu((function(){n.registerItems(),n.changeToolbarState(),n.getEditorInstance().on(\"change\",n.changeToolbarState);}));}return e.prototype.getMenus=function(){return this.menus},e.prototype.getConfig=function(){return this.config},e.prototype.registerItems=function(){var e=this,t=\"\",n=this.$toolbar,r=this.config,o=r.toolbarKeys,i=void 0===o?[]:o,a=r.insertKeys,s=void 0===a?{index:0,keys:[]}:a,l=r.excludeKeys,u=void 0===l?[]:l,c=E.default(i);s.keys.length>0&&(\"string\"==typeof s.keys&&(s.keys=[s.keys]),s.keys.forEach((function(e,t){c.splice(s.index+t,0,e);})));var f=c.filter((function(e){if(\"string\"==typeof e){if(u.includes(e))return !1}else if(u.includes(e.key))return !1;return !0})),d=f.length;f.forEach((function(r,o){if(\"|\"===r){if(0===o)return;if(o+1===d)return;if(\"|\"===t)return;var i=gd();return n.append(i),void(t=r)}if(\"string\"==typeof r)return e.registerSingleItem(r,e),void(t=r);e.registerGroup(r),t=\"group\";}));},e.prototype.registerGroup=function(e){var t=this,n=this.$toolbar,r=function(e){return new Cd(e)}(e),o=e.menuKeys,i=void 0===o?[]:o,a=this.config.excludeKeys,s=void 0===a?[]:a;i.forEach((function(e){s.includes(e)||t.registerSingleItem(e,r);})),n.append(r.$elem);},e.prototype.registerSingleItem=function(e,t){var n=this.getEditorInstance(),r=t instanceof Cd,o=this.menus,i=o[e];if(null==i){var a=Us[e];if(null==a)throw new Error(\"Not found menu item factory by key '\"+e+\"'\");if(\"function\"!=typeof a)throw new Error(\"Menu item factory (key='\"+e+\"') is not a function\");i=a(),o[e]=i;}else console.warn(\"Duplicated toolbar menu key '\"+e+\"'\\n重复注册了菜单栏 menu '\"+e+\"'\");var s=Md(e,i,r);(this.toolbarItems.push(s),es.set(s,n),r)?t.appendBarItem(s):t.$toolbar.append(s.$elem);},e.prototype.getEditorInstance=function(){var e=Ya.get(this);if(null==e)throw new Error(\"Can not get editor instance\");return e},e.prototype.destroy=function(){this.$toolbar.remove(),this.menus={},this.toolbarItems=[];},e}();var $d=ht.EXISTS,Wd=Ve.f,Hd=Function.prototype,Vd=W(Hd.toString),zd=/function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/,Ud=W(zd.exec);ye&&!$d&&Wd(Hd,\"name\",{configurable:!0,get:function(){try{return Ud(zd,Vd(this))[1]}catch(e){return \"\"}}});var Kd=T((function(e){function t(n){return \"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0;})),qd=T((function(e){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0;})),Gd=T((function(e){e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},r=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach((function(t){qd(e,t,n[t]);}));}return e},e.exports.default=e.exports,e.exports.__esModule=!0;})),Jd=T((function(e){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")},e.exports.default=e.exports,e.exports.__esModule=!0;})),Yd=T((function(e){function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}e.exports=function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e},e.exports.default=e.exports,e.exports.__esModule=!0;})),Xd=T((function(e){e.exports=function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e},e.exports.default=e.exports,e.exports.__esModule=!0;})),Qd=T((function(e){var t=Kd.default;e.exports=function(e,n){if(n&&(\"object\"===t(n)||\"function\"==typeof n))return n;if(void 0!==n)throw new TypeError(\"Derived constructors may only return object or undefined\");return Xd(e)},e.exports.default=e.exports,e.exports.__esModule=!0;})),Zd=T((function(e){function t(n){return e.exports=t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.default=e.exports,e.exports.__esModule=!0,t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0;})),ep=T((function(e){function t(n,r){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.default=e.exports,e.exports.__esModule=!0,t(n,r)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0;})),tp=T((function(e){e.exports=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ep(e,t);},e.exports.default=e.exports,e.exports.__esModule=!0;}));function np(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var rp=np(Kd),op=np(Gd),ip=np(Jd),ap=np(Yd),sp=np(Qd),lp=np(Zd),up=np(Xd),cp=np(tp),fp={type:\"logger\",log:function(e){this.output(\"log\",e);},warn:function(e){this.output(\"warn\",e);},error:function(e){this.output(\"error\",e);},output:function(e,t){console&&console[e]&&console[e].apply(console,t);}},dp=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};ip.default(this,e),this.init(t,n);}return ap.default(e,[{key:\"init\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||\"i18next:\",this.logger=e||fp,this.options=t,this.debug=t.debug;}},{key:\"setDebug\",value:function(e){this.debug=e;}},{key:\"log\",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,\"log\",\"\",!0)}},{key:\"warn\",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,\"warn\",\"\",!0)}},{key:\"error\",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,\"error\",\"\")}},{key:\"deprecate\",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,\"warn\",\"WARNING DEPRECATED: \",!0)}},{key:\"forward\",value:function(e,t,n,r){return r&&!this.debug?null:(\"string\"==typeof e[0]&&(e[0]=\"\".concat(n).concat(this.prefix,\" \").concat(e[0])),this.logger[t](e))}},{key:\"create\",value:function(t){return new e(this.logger,op.default({},{prefix:\"\".concat(this.prefix,\":\").concat(t,\":\")},this.options))}}]),e}(),pp=new dp,hp=function(){function e(){ip.default(this,e),this.observers={};}return ap.default(e,[{key:\"on\",value:function(e,t){var n=this;return e.split(\" \").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t);})),this}},{key:\"off\",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e]);}},{key:\"emit\",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.observers[e]){var o=[].concat(this.observers[e]);o.forEach((function(e){e.apply(void 0,n);}));}if(this.observers[\"*\"]){var i=[].concat(this.observers[\"*\"]);i.forEach((function(t){t.apply(t,[e].concat(n));}));}}}]),e}();function gp(){var e,t,n=new Promise((function(n,r){e=n,t=r;}));return n.resolve=e,n.reject=t,n}function vp(e){return null==e?\"\":\"\"+e}function yp(e,t,n){e.forEach((function(e){t[e]&&(n[e]=t[e]);}));}function mp(e,t,n){function r(e){return e&&e.indexOf(\"###\")>-1?e.replace(/###/g,\".\"):e}function o(){return !e||\"string\"==typeof e}for(var i=\"string\"!=typeof t?[].concat(t):t.split(\".\");i.length>1;){if(o())return {};var a=r(i.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{};}return o()?{}:{obj:e,k:r(i.shift())}}function bp(e,t,n){var r=mp(e,t,Object);r.obj[r.k]=n;}function wp(e,t){var n=mp(e,t),r=n.obj,o=n.k;if(r)return r[o]}function xp(e,t,n){var r=wp(e,n);return void 0!==r?r:wp(t,n)}function Ep(e,t,n){for(var r in t)\"__proto__\"!==r&&\"constructor\"!==r&&(r in e?\"string\"==typeof e[r]||e[r]instanceof String||\"string\"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):Ep(e[r],t[r],n):e[r]=t[r]);return e}function Sp(e){return e.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\"\\\\$&\")}var kp={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"/\":\"&#x2F;\"};function Op(e){return \"string\"==typeof e?e.replace(/[&<>\"'\\/]/g,(function(e){return kp[e]})):e}var Cp=\"undefined\"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf(\"MSIE\")>-1;function Tp(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\".\";if(e){if(e[t])return e[t];for(var r=t.split(n),o=e,i=0;i<r.length;++i){if(!o)return;if(\"string\"==typeof o[r[i]]&&i+1<r.length)return;if(void 0===o[r[i]]){for(var a=2,s=r.slice(i,i+a).join(n),l=o[s];void 0===l&&r.length>i+a;)a++,l=o[s=r.slice(i,i+a).join(n)];if(void 0===l)return;if(\"string\"==typeof l)return l;if(s&&\"string\"==typeof l[s])return l[s];var u=r.slice(i+a).join(n);return u?Tp(l,u,n):void 0}o=o[r[i]];}return o}}var Np=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:[\"translation\"],defaultNS:\"translation\"};return ip.default(this,t),n=sp.default(this,lp.default(t).call(this)),Cp&&hp.call(up.default(n)),n.data=e||{},n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator=\".\"),void 0===n.options.ignoreJSONStructure&&(n.options.ignoreJSONStructure=!0),n}return cp.default(t,e),ap.default(t,[{key:\"addNamespaces\",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e);}},{key:\"removeNamespaces\",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1);}},{key:\"getResource\",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,i=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[e,t];n&&\"string\"!=typeof n&&(a=a.concat(n)),n&&\"string\"==typeof n&&(a=a.concat(o?n.split(o):n)),e.indexOf(\".\")>-1&&(a=e.split(\".\"));var s=wp(this.data,a);return s||!i||\"string\"!=typeof n?s:Tp(this.data&&this.data[e]&&this.data[e][t],n,o)}},{key:\"addResource\",value:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=this.options.keySeparator;void 0===i&&(i=\".\");var a=[e,t];n&&(a=a.concat(i?n.split(i):n)),e.indexOf(\".\")>-1&&(r=t,t=(a=e.split(\".\"))[1]),this.addNamespaces(t),bp(this.data,a,r),o.silent||this.emit(\"added\",e,t,n,r);}},{key:\"addResources\",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in n)\"string\"!=typeof n[o]&&\"[object Array]\"!==Object.prototype.toString.apply(n[o])||this.addResource(e,t,o,n[o],{silent:!0});r.silent||this.emit(\"added\",e,t,n);}},{key:\"addResourceBundle\",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(\".\")>-1&&(r=n,n=t,t=(a=e.split(\".\"))[1]),this.addNamespaces(t);var s=wp(this.data,a)||{};r?Ep(s,n,o):s=op.default({},s,n),bp(this.data,a,s),i.silent||this.emit(\"added\",e,t,n);}},{key:\"removeResourceBundle\",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit(\"removed\",e,t);}},{key:\"hasResourceBundle\",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:\"getResourceBundle\",value:function(e,t){return t||(t=this.options.defaultNS),\"v1\"===this.options.compatibilityAPI?op.default({},{},this.getResource(e,t)):this.getResource(e,t)}},{key:\"getDataByLanguage\",value:function(e){return this.data[e]}},{key:\"toJSON\",value:function(){return this.data}}]),t}(hp),Mp={processors:{},addPostProcessor:function(e){this.processors[e.name]=e;},handle:function(e,t,n,r,o){var i=this;return e.forEach((function(e){i.processors[e]&&(t=i.processors[e].process(t,n,r,o));})),t}},Lp={},Pp=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return ip.default(this,t),n=sp.default(this,lp.default(t).call(this)),Cp&&hp.call(up.default(n)),yp([\"resourceStore\",\"languageUtils\",\"pluralResolver\",\"interpolator\",\"backendConnector\",\"i18nFormat\",\"utils\"],e,up.default(n)),n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator=\".\"),n.logger=pp.create(\"translator\"),n}return cp.default(t,e),ap.default(t,[{key:\"changeLanguage\",value:function(e){e&&(this.language=e);}},{key:\"exists\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return !1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:\"extractFromKey\",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=\":\");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,o=t.ns||this.options.defaultNS;if(n&&e.indexOf(n)>-1){var i=e.match(this.interpolator.nestingRegexp);if(i&&i.length>0)return {key:e,namespaces:o};var a=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(a[0])>-1)&&(o=a.shift()),e=a.join(r);}return \"string\"==typeof o&&(o=[o]),{key:e,namespaces:o}}},{key:\"translate\",value:function(e,n,r){var o=this;if(\"object\"!==rp.default(n)&&this.options.overloadTranslationOptionHandler&&(n=this.options.overloadTranslationOptionHandler(arguments)),n||(n={}),null==e)return \"\";Array.isArray(e)||(e=[String(e)]);var i=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,a=this.extractFromKey(e[e.length-1],n),s=a.key,l=a.namespaces,u=l[l.length-1],c=n.lng||this.language,f=n.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&\"cimode\"===c.toLowerCase()){if(f){var d=n.nsSeparator||this.options.nsSeparator;return u+d+s}return s}var p=this.resolve(e,n),h=p&&p.res,g=p&&p.usedKey||s,v=p&&p.exactUsedKey||s,y=Object.prototype.toString.apply(h),m=[\"[object Number]\",\"[object Function]\",\"[object RegExp]\"],b=void 0!==n.joinArrays?n.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject,x=\"string\"!=typeof h&&\"boolean\"!=typeof h&&\"number\"!=typeof h;if(w&&h&&x&&m.indexOf(y)<0&&(\"string\"!=typeof b||\"[object Array]\"!==y)){if(!n.returnObjects&&!this.options.returnObjects)return this.options.returnedObjectHandler||this.logger.warn(\"accessing an object - but returnObjects options is not enabled!\"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(g,h,op.default({},n,{ns:l})):\"key '\".concat(s,\" (\").concat(this.language,\")' returned an object instead of string.\");if(i){var E=\"[object Array]\"===y,S=E?[]:{},k=E?v:g;for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var C=\"\".concat(k).concat(i).concat(O);S[O]=this.translate(C,op.default({},n,{joinArrays:!1,ns:l})),S[O]===C&&(S[O]=h[O]);}h=S;}}else if(w&&\"string\"==typeof b&&\"[object Array]\"===y)(h=h.join(b))&&(h=this.extendTranslation(h,e,n,r));else {var T=!1,N=!1,M=void 0!==n.count&&\"string\"!=typeof n.count,L=t.hasDefaultValue(n),P=M?this.pluralResolver.getSuffix(c,n.count):\"\",R=n[\"defaultValue\".concat(P)]||n.defaultValue;!this.isValidLookup(h)&&L&&(T=!0,h=R),this.isValidLookup(h)||(N=!0,h=s);var D=n.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,j=D&&N?void 0:h,A=L&&R!==h&&this.options.updateMissing;if(N||T||A){if(this.logger.log(A?\"updateKey\":\"missingKey\",c,u,s,A?R:h),i){var _=this.resolve(s,op.default({},n,{keySeparator:!1}));_&&_.res&&this.logger.warn(\"Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\");}var F=[],I=this.languageUtils.getFallbackCodes(this.options.fallbackLng,n.lng||this.language);if(\"fallback\"===this.options.saveMissingTo&&I&&I[0])for(var B=0;B<I.length;B++)F.push(I[B]);else \"all\"===this.options.saveMissingTo?F=this.languageUtils.toResolveHierarchy(n.lng||this.language):F.push(n.lng||this.language);var $=function(e,t,r){o.options.missingKeyHandler?o.options.missingKeyHandler(e,u,t,A?r:j,A,n):o.backendConnector&&o.backendConnector.saveMissing&&o.backendConnector.saveMissing(e,u,t,A?r:j,A,n),o.emit(\"missingKey\",e,u,t,h);};this.options.saveMissing&&(this.options.saveMissingPlurals&&M?F.forEach((function(e){o.pluralResolver.getSuffixes(e).forEach((function(t){$([e],s+t,n[\"defaultValue\".concat(t)]||R);}));})):$(F,s,R));}h=this.extendTranslation(h,e,n,p,r),N&&h===s&&this.options.appendNamespaceToMissingKey&&(h=\"\".concat(u,\":\").concat(s)),(N||T)&&this.options.parseMissingKeyHandler&&(h=this.options.parseMissingKeyHandler(h));}return h}},{key:\"extendTranslation\",value:function(e,t,n,r,o){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(op.default({},n,{interpolation:op.default({},this.options.interpolation,n.interpolation)}));var a,s=n.interpolation&&n.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;if(s){var l=e.match(this.interpolator.nestingRegexp);a=l&&l.length;}var u=n.replace&&\"string\"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(u=op.default({},this.options.interpolation.defaultVariables,u)),e=this.interpolator.interpolate(e,u,n.lng||this.language,n),s){var c=e.match(this.interpolator.nestingRegexp);a<(c&&c.length)&&(n.nest=!1);}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return o&&o[0]===r[0]&&!n.context?(i.logger.warn(\"It seems you are nesting recursively key: \".concat(r[0],\" in key: \").concat(t[0])),null):i.translate.apply(i,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset();}var f=n.postProcess||this.options.postProcess,d=\"string\"==typeof f?[f]:f;return null!=e&&d&&d.length&&!1!==n.applyPostProcessor&&(e=Mp.handle(d,e,t,this.options&&this.options.postProcessPassResolved?op.default({i18nResolved:r},n):n,this)),e}},{key:\"resolve\",value:function(e){var t,n,r,o,i,a=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return \"string\"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var l=a.extractFromKey(e,s),u=l.key;n=u;var c=l.namespaces;a.options.fallbackNS&&(c=c.concat(a.options.fallbackNS));var f=void 0!==s.count&&\"string\"!=typeof s.count,d=void 0!==s.context&&(\"string\"==typeof s.context||\"number\"==typeof s.context)&&\"\"!==s.context,p=s.lngs?s.lngs:a.languageUtils.toResolveHierarchy(s.lng||a.language,s.fallbackLng);c.forEach((function(e){a.isValidLookup(t)||(i=e,!Lp[\"\".concat(p[0],\"-\").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(i)&&(Lp[\"\".concat(p[0],\"-\").concat(e)]=!0,a.logger.warn('key \"'.concat(n,'\" for languages \"').concat(p.join(\", \"),'\" won\\'t get resolved as namespace \"').concat(i,'\" was not yet loaded'),\"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\")),p.forEach((function(n){if(!a.isValidLookup(t)){o=n;var i,l,c=u,p=[c];if(a.i18nFormat&&a.i18nFormat.addLookupKeys)a.i18nFormat.addLookupKeys(p,u,n,e,s);else f&&(i=a.pluralResolver.getSuffix(n,s.count)),f&&d&&p.push(c+i),d&&p.push(c+=\"\".concat(a.options.contextSeparator).concat(s.context)),f&&p.push(c+=i);for(;l=p.pop();)a.isValidLookup(t)||(r=l,t=a.getResource(n,e,l,s));}})));}));}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:o,usedNS:i}}},{key:\"isValidLookup\",value:function(e){return !(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&\"\"===e)}},{key:\"getResource\",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:\"hasDefaultValue\",value:function(e){var t=\"defaultValue\";for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t===n.substring(0,t.length)&&void 0!==e[n])return !0;return !1}}]),t}(hp);function Rp(e){return e.charAt(0).toUpperCase()+e.slice(1)}var Dp=function(){function e(t){ip.default(this,e),this.options=t,this.whitelist=this.options.supportedLngs||!1,this.supportedLngs=this.options.supportedLngs||!1,this.logger=pp.create(\"languageUtils\");}return ap.default(e,[{key:\"getScriptPartFromCode\",value:function(e){if(!e||e.indexOf(\"-\")<0)return null;var t=e.split(\"-\");return 2===t.length?null:(t.pop(),\"x\"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join(\"-\")))}},{key:\"getLanguagePartFromCode\",value:function(e){if(!e||e.indexOf(\"-\")<0)return e;var t=e.split(\"-\");return this.formatLanguageCode(t[0])}},{key:\"formatLanguageCode\",value:function(e){if(\"string\"==typeof e&&e.indexOf(\"-\")>-1){var t=[\"hans\",\"hant\",\"latn\",\"cyrl\",\"cans\",\"mong\",\"arab\"],n=e.split(\"-\");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Rp(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),\"sgn\"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Rp(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=Rp(n[2].toLowerCase()))),n.join(\"-\")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:\"isWhitelisted\",value:function(e){return this.logger.deprecate(\"languageUtils.isWhitelisted\",'function \"isWhitelisted\" will be renamed to \"isSupportedCode\" in the next major - please make sure to rename it\\'s usage asap.'),this.isSupportedCode(e)}},{key:\"isSupportedCode\",value:function(e){return (\"languageOnly\"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:\"getBestMatchFromCodes\",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r);}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(r))return e}));}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:\"getFallbackCodes\",value:function(e,t){if(!e)return [];if(\"function\"==typeof e&&(e=e(t)),\"string\"==typeof e&&(e=[e]),\"[object Array]\"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:\"toResolveHierarchy\",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),o=[],i=function(e){e&&(n.isSupportedCode(e)?o.push(e):n.logger.warn(\"rejecting language code not found in supportedLngs: \".concat(e)));};return \"string\"==typeof e&&e.indexOf(\"-\")>-1?(\"languageOnly\"!==this.options.load&&i(this.formatLanguageCode(e)),\"languageOnly\"!==this.options.load&&\"currentOnly\"!==this.options.load&&i(this.getScriptPartFromCode(e)),\"currentOnly\"!==this.options.load&&i(this.getLanguagePartFromCode(e))):\"string\"==typeof e&&i(this.formatLanguageCode(e)),r.forEach((function(e){o.indexOf(e)<0&&i(n.formatLanguageCode(e));})),o}}]),e}(),jp=[{lngs:[\"ach\",\"ak\",\"am\",\"arn\",\"br\",\"fil\",\"gun\",\"ln\",\"mfe\",\"mg\",\"mi\",\"oc\",\"pt\",\"pt-BR\",\"tg\",\"tl\",\"ti\",\"tr\",\"uz\",\"wa\"],nr:[1,2],fc:1},{lngs:[\"af\",\"an\",\"ast\",\"az\",\"bg\",\"bn\",\"ca\",\"da\",\"de\",\"dev\",\"el\",\"en\",\"eo\",\"es\",\"et\",\"eu\",\"fi\",\"fo\",\"fur\",\"fy\",\"gl\",\"gu\",\"ha\",\"hi\",\"hu\",\"hy\",\"ia\",\"it\",\"kk\",\"kn\",\"ku\",\"lb\",\"mai\",\"ml\",\"mn\",\"mr\",\"nah\",\"nap\",\"nb\",\"ne\",\"nl\",\"nn\",\"no\",\"nso\",\"pa\",\"pap\",\"pms\",\"ps\",\"pt-PT\",\"rm\",\"sco\",\"se\",\"si\",\"so\",\"son\",\"sq\",\"sv\",\"sw\",\"ta\",\"te\",\"tk\",\"ur\",\"yo\"],nr:[1,2],fc:2},{lngs:[\"ay\",\"bo\",\"cgg\",\"fa\",\"ht\",\"id\",\"ja\",\"jbo\",\"ka\",\"km\",\"ko\",\"ky\",\"lo\",\"ms\",\"sah\",\"su\",\"th\",\"tt\",\"ug\",\"vi\",\"wo\",\"zh\"],nr:[1],fc:3},{lngs:[\"be\",\"bs\",\"cnr\",\"dz\",\"hr\",\"ru\",\"sr\",\"uk\"],nr:[1,2,5],fc:4},{lngs:[\"ar\"],nr:[0,1,2,3,11,100],fc:5},{lngs:[\"cs\",\"sk\"],nr:[1,2,5],fc:6},{lngs:[\"csb\",\"pl\"],nr:[1,2,5],fc:7},{lngs:[\"cy\"],nr:[1,2,3,8],fc:8},{lngs:[\"fr\"],nr:[1,2],fc:9},{lngs:[\"ga\"],nr:[1,2,3,7,11],fc:10},{lngs:[\"gd\"],nr:[1,2,3,20],fc:11},{lngs:[\"is\"],nr:[1,2],fc:12},{lngs:[\"jv\"],nr:[0,1],fc:13},{lngs:[\"kw\"],nr:[1,2,3,4],fc:14},{lngs:[\"lt\"],nr:[1,2,10],fc:15},{lngs:[\"lv\"],nr:[1,2,0],fc:16},{lngs:[\"mk\"],nr:[1,2],fc:17},{lngs:[\"mnk\"],nr:[0,1,2],fc:18},{lngs:[\"mt\"],nr:[1,2,11,20],fc:19},{lngs:[\"or\"],nr:[2,1],fc:2},{lngs:[\"ro\"],nr:[1,2,20],fc:20},{lngs:[\"sl\"],nr:[5,1,2,3],fc:21},{lngs:[\"he\",\"iw\"],nr:[1,2,20,21],fc:22}],Ap={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};function _p(){var e={};return jp.forEach((function(t){t.lngs.forEach((function(n){e[n]={numbers:t.nr,plurals:Ap[t.fc]};}));})),e}var Fp=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};ip.default(this,e),this.languageUtils=t,this.options=n,this.logger=pp.create(\"pluralResolver\"),this.rules=_p();}return ap.default(e,[{key:\"addRule\",value:function(e,t){this.rules[e]=t;}},{key:\"getRule\",value:function(e){return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:\"needsPlural\",value:function(e){var t=this.getRule(e);return t&&t.numbers.length>1}},{key:\"getPluralFormsOfKey\",value:function(e,t){return this.getSuffixes(e).map((function(e){return t+e}))}},{key:\"getSuffixes\",value:function(e){var t=this,n=this.getRule(e);return n?n.numbers.map((function(n){return t.getSuffix(e,n)})):[]}},{key:\"getSuffix\",value:function(e,t){var n=this,r=this.getRule(e);if(r){var o=r.noAbs?r.plurals(t):r.plurals(Math.abs(t)),i=r.numbers[o];this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]&&(2===i?i=\"plural\":1===i&&(i=\"\"));var a=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return \"v1\"===this.options.compatibilityJSON?1===i?\"\":\"number\"==typeof i?\"_plural_\".concat(i.toString()):a():\"v2\"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]?a():this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString()}return this.logger.warn(\"no plural rule found for: \".concat(e)),\"\"}}]),e}(),Ip=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ip.default(this,e),this.logger=pp.create(\"interpolator\"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t);}return ap.default(e,[{key:\"init\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:Op,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?Sp(t.prefix):t.prefixEscaped||\"{{\",this.suffix=t.suffix?Sp(t.suffix):t.suffixEscaped||\"}}\",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||\",\",this.unescapePrefix=t.unescapeSuffix?\"\":t.unescapePrefix||\"-\",this.unescapeSuffix=this.unescapePrefix?\"\":t.unescapeSuffix||\"\",this.nestingPrefix=t.nestingPrefix?Sp(t.nestingPrefix):t.nestingPrefixEscaped||Sp(\"$t(\"),this.nestingSuffix=t.nestingSuffix?Sp(t.nestingSuffix):t.nestingSuffixEscaped||Sp(\")\"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||\",\",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp();}},{key:\"reset\",value:function(){this.options&&this.init(this.options);}},{key:\"resetRegExp\",value:function(){var e=\"\".concat(this.prefix,\"(.+?)\").concat(this.suffix);this.regexp=new RegExp(e,\"g\");var t=\"\".concat(this.prefix).concat(this.unescapePrefix,\"(.+?)\").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,\"g\");var n=\"\".concat(this.nestingPrefix,\"(.+?)\").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,\"g\");}},{key:\"interpolate\",value:function(e,t,n,r){var o,i,a,s=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function u(e){return e.replace(/\\$/g,\"$$$$\")}var c=function(e){if(e.indexOf(s.formatSeparator)<0){var o=xp(t,l,e);return s.alwaysFormat?s.format(o,void 0,n,op.default({},r,t,{interpolationkey:e})):o}var i=e.split(s.formatSeparator),a=i.shift().trim(),u=i.join(s.formatSeparator).trim();return s.format(xp(t,l,a),u,n,op.default({},r,t,{interpolationkey:a}))};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,d=r&&r.interpolation&&r.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;return [{regex:this.regexpUnescape,safeValue:function(e){return u(e)}},{regex:this.regexp,safeValue:function(e){return s.escapeValue?u(s.escape(e)):u(e)}}].forEach((function(t){for(a=0;o=t.regex.exec(e);){if(void 0===(i=c(o[1].trim())))if(\"function\"==typeof f){var n=f(e,o,r);i=\"string\"==typeof n?n:\"\";}else {if(d){i=o[0];continue}s.logger.warn(\"missed to pass in variable \".concat(o[1],\" for interpolating \").concat(e)),i=\"\";}else \"string\"==typeof i||s.useRawValueToEscape||(i=vp(i));var l=t.safeValue(i);if(e=e.replace(o[0],l),d?(t.regex.lastIndex+=l.length,t.regex.lastIndex-=o[0].length):t.regex.lastIndex=0,++a>=s.maxReplaces)break}})),e}},{key:\"nest\",value:function(e,t){var n,r,o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=op.default({},i);function s(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp(\"\".concat(n,\"[ ]*{\"))),o=\"{\".concat(r[1]);e=r[0],o=(o=this.interpolate(o,a)).replace(/'/g,'\"');try{a=JSON.parse(o),t&&(a=op.default({},t,a));}catch(t){return this.logger.warn(\"failed parsing options string in nesting for key \".concat(e),t),\"\".concat(e).concat(n).concat(o)}return delete a.defaultValue,e}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(e);){var l=[],u=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var c=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=c.shift(),l=c,u=!0;}if((r=t(s.call(this,n[1].trim(),a),a))&&n[0]===e&&\"string\"!=typeof r)return r;\"string\"!=typeof r&&(r=vp(r)),r||(this.logger.warn(\"missed to resolve \".concat(n[1],\" for nesting \").concat(e)),r=\"\"),u&&(r=l.reduce((function(e,t){return o.format(e,t,i.lng,op.default({},i,{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0;}return e}}]),e}();var Bp=function(e){function t(e,n,r){var o,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return ip.default(this,t),o=sp.default(this,lp.default(t).call(this)),Cp&&hp.call(up.default(o)),o.backend=e,o.store=n,o.services=r,o.languageUtils=r.languageUtils,o.options=i,o.logger=pp.create(\"backendConnector\"),o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(r,i.backend,i),o}return cp.default(t,e),ap.default(t,[{key:\"queueLoad\",value:function(e,t,n,r){var o=this,i=[],a=[],s=[],l=[];return e.forEach((function(e){var r=!0;t.forEach((function(t){var s=\"\".concat(e,\"|\").concat(t);!n.reload&&o.store.hasResourceBundle(e,t)?o.state[s]=2:o.state[s]<0||(1===o.state[s]?a.indexOf(s)<0&&a.push(s):(o.state[s]=1,r=!1,a.indexOf(s)<0&&a.push(s),i.indexOf(s)<0&&i.push(s),l.indexOf(t)<0&&l.push(t)));})),r||s.push(e);})),(i.length||a.length)&&this.queue.push({pending:a,loaded:{},errors:[],callback:r}),{toLoad:i,pending:a,toLoadLanguages:s,toLoadNamespaces:l}}},{key:\"loaded\",value:function(e,t,n){var r=e.split(\"|\"),o=r[0],i=r[1];t&&this.emit(\"failedLoading\",o,i,t),n&&this.store.addResourceBundle(o,i,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){!function(e,t,n,r){var o=mp(e,t,Object),i=o.obj,a=o.k;i[a]=i[a]||[],r&&(i[a]=i[a].concat(n)),r||i[a].push(n);}(n.loaded,[o],i),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t);}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){a[e].indexOf(t)<0&&a[e].push(t);}));})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback());})),this.emit(\"loaded\",a),this.queue=this.queue.filter((function(e){return !e.done}));}},{key:\"read\",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,a=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(s,l){s&&l&&o<5?setTimeout((function(){r.read.call(r,e,t,n,o+1,2*i,a);}),i):a(s,l);})):a(null,{})}},{key:\"prepareLoading\",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn(\"No backend was added via i18next.use. Will not load resources.\"),o&&o();\"string\"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),\"string\"==typeof t&&(t=[t]);var i=this.queueLoad(e,t,r,o);if(!i.toLoad.length)return i.pending.length||o(),null;i.toLoad.forEach((function(e){n.loadOne(e);}));}},{key:\"load\",value:function(e,t,n){this.prepareLoading(e,t,{},n);}},{key:\"reload\",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n);}},{key:\"loadOne\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",r=e.split(\"|\"),o=r[0],i=r[1];this.read(o,i,\"read\",void 0,void 0,(function(r,a){r&&t.logger.warn(\"\".concat(n,\"loading namespace \").concat(i,\" for language \").concat(o,\" failed\"),r),!r&&a&&t.logger.log(\"\".concat(n,\"loaded namespace \").concat(i,\" for language \").concat(o),a),t.loaded(e,r,a);}));}},{key:\"saveMissing\",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key \"'.concat(n,'\" as the namespace \"').concat(t,'\" was not yet loaded'),\"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\"):null!=n&&\"\"!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,r,null,op.default({},i,{isUpdate:o})),e&&e[0]&&this.store.addResource(e[0],t,n,r));}}]),t}(hp);function $p(){return {debug:!1,initImmediate:!0,ns:[\"translation\"],defaultNS:[\"translation\"],fallbackLng:[\"dev\"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:\"all\",preload:!1,simplifyPluralSuffix:!0,keySeparator:\".\",nsSeparator:\":\",pluralSeparator:\"_\",contextSeparator:\"_\",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:\"fallback\",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if(\"object\"===rp.default(e[1])&&(t=e[1]),\"string\"==typeof e[1]&&(t.defaultValue=e[1]),\"string\"==typeof e[2]&&(t.tDescription=e[2]),\"object\"===rp.default(e[2])||\"object\"===rp.default(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e];}));}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:\"{{\",suffix:\"}}\",formatSeparator:\",\",unescapePrefix:\"-\",nestingPrefix:\"$t(\",nestingSuffix:\")\",nestingOptionsSeparator:\",\",maxReplaces:1e3,skipOnVariables:!1}}}function Wp(e){return \"string\"==typeof e.ns&&(e.ns=[e.ns]),\"string\"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),\"string\"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.whitelist&&(e.whitelist&&e.whitelist.indexOf(\"cimode\")<0&&(e.whitelist=e.whitelist.concat([\"cimode\"])),e.supportedLngs=e.whitelist),e.nonExplicitWhitelist&&(e.nonExplicitSupportedLngs=e.nonExplicitWhitelist),e.supportedLngs&&e.supportedLngs.indexOf(\"cimode\")<0&&(e.supportedLngs=e.supportedLngs.concat([\"cimode\"])),e}function Hp(){}var Vp=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;if(ip.default(this,t),e=sp.default(this,lp.default(t).call(this)),Cp&&hp.call(up.default(e)),e.options=Wp(n),e.services={},e.logger=pp,e.modules={external:[]},r&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,r),sp.default(e,up.default(e));setTimeout((function(){e.init(n,r);}),0);}return e}return cp.default(t,e),ap.default(t,[{key:\"init\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;function r(e){return e?\"function\"==typeof e?new e:e:null}if(\"function\"==typeof t&&(n=t,t={}),t.whitelist&&!t.supportedLngs&&this.logger.deprecate(\"whitelist\",'option \"whitelist\" will be renamed to \"supportedLngs\" in the next major - please make sure to rename this option asap.'),t.nonExplicitWhitelist&&!t.nonExplicitSupportedLngs&&this.logger.deprecate(\"whitelist\",'options \"nonExplicitWhitelist\" will be renamed to \"nonExplicitSupportedLngs\" in the next major - please make sure to rename this option asap.'),this.options=op.default({},$p(),this.options,Wp(t)),this.format=this.options.interpolation.format,n||(n=Hp),!this.options.isClone){this.modules.logger?pp.init(r(this.modules.logger),this.options):pp.init(null,this.options);var o=new Dp(this.options);this.store=new Np(this.options.resources,this.options);var i=this.services;i.logger=pp,i.resourceStore=this.store,i.languageUtils=o,i.pluralResolver=new Fp(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),i.interpolator=new Ip(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new Bp(r(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on(\"*\",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r));})),this.modules.languageDetector&&(i.languageDetector=r(this.modules.languageDetector),i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=r(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new Pp(this.services,this.options),this.translator.on(\"*\",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r));})),this.modules.external.forEach((function(t){t.init&&t.init(e);}));}if(this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var a=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);a.length>0&&\"dev\"!==a[0]&&(this.options.lng=a[0]);}this.services.languageDetector||this.options.lng||this.logger.warn(\"init: no languageDetector is used and no lng is defined\");var s=[\"getResource\",\"hasResourceBundle\",\"getResourceBundle\",\"getDataByLanguage\"];s.forEach((function(t){e[t]=function(){var n;return (n=e.store)[t].apply(n,arguments)};}));var l=[\"addResource\",\"addResources\",\"addResourceBundle\",\"removeResourceBundle\"];l.forEach((function(t){e[t]=function(){var n;return (n=e.store)[t].apply(n,arguments),e};}));var u=gp(),c=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn(\"init: i18next is already initialized. You should call init just once!\"),e.isInitialized=!0,e.options.isClone||e.logger.log(\"initialized\",e.options),e.emit(\"initialized\",e.options),u.resolve(r),n(t,r);};if(e.languages&&\"v1\"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t);};return this.options.resources||!this.options.initImmediate?c():setTimeout(c,0),u}},{key:\"loadResources\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Hp,r=n,o=\"string\"==typeof e?e:this.language;if(\"function\"==typeof e&&(r=e),!this.options.resources||this.options.partialBundledLanguages){if(o&&\"cimode\"===o.toLowerCase())return r();var i=[],a=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){i.indexOf(e)<0&&i.push(e);}));};if(o)a(o);else {var s=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);s.forEach((function(e){return a(e)}));}this.options.preload&&this.options.preload.forEach((function(e){return a(e)})),this.services.backendConnector.load(i,this.options.ns,r);}else r(null);}},{key:\"reloadResources\",value:function(e,t,n){var r=gp();return e||(e=this.languages),t||(t=this.options.ns),n||(n=Hp),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e);})),r}},{key:\"use\",value:function(e){if(!e)throw new Error(\"You are passing an undefined module! Please check the object you are passing to i18next.use()\");if(!e.type)throw new Error(\"You are passing a wrong module! Please check the object you are passing to i18next.use()\");return \"backend\"===e.type&&(this.modules.backend=e),(\"logger\"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),\"languageDetector\"===e.type&&(this.modules.languageDetector=e),\"i18nFormat\"===e.type&&(this.modules.i18nFormat=e),\"postProcessor\"===e.type&&Mp.addPostProcessor(e),\"3rdParty\"===e.type&&this.modules.external.push(e),this}},{key:\"changeLanguage\",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=gp();this.emit(\"languageChanging\",e);var o=function(o){e||o||!n.services.languageDetector||(o=[]);var i=\"string\"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);i&&(n.language||(n.language=i,n.languages=n.services.languageUtils.toResolveHierarchy(i)),n.translator.language||n.translator.changeLanguage(i),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(i)),n.loadResources(i,(function(e){!function(e,o){o?(n.language=o,n.languages=n.services.languageUtils.toResolveHierarchy(o),n.translator.changeLanguage(o),n.isLanguageChangingTo=void 0,n.emit(\"languageChanged\",o),n.logger.log(\"languageChanged\",o)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}));}(e,i);}));};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(e):o(this.services.languageDetector.detect()),r}},{key:\"getFixedT\",value:function(e,t,n){var r=this,o=function e(t,o){var i;if(\"object\"!==rp.default(o)){for(var a=arguments.length,s=new Array(a>2?a-2:0),l=2;l<a;l++)s[l-2]=arguments[l];i=r.options.overloadTranslationOptionHandler([t,o].concat(s));}else i=op.default({},o);i.lng=i.lng||e.lng,i.lngs=i.lngs||e.lngs,i.ns=i.ns||e.ns;var u=r.options.keySeparator||\".\",c=n?\"\".concat(n).concat(u).concat(t):t;return r.t(c,i)};return \"string\"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=n,o}},{key:\"t\",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:\"exists\",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:\"setDefaultNamespace\",value:function(e){this.options.defaultNS=e;}},{key:\"hasLoadedNamespace\",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn(\"hasLoadedNamespace: i18next was not initialized\",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn(\"hasLoadedNamespace: i18n.languages were undefined or empty\",this.languages),!1;var r=this.languages[0],o=!!this.options&&this.options.fallbackLng,i=this.languages[this.languages.length-1];if(\"cimode\"===r.toLowerCase())return !0;var a=function(e,n){var r=t.services.backendConnector.state[\"\".concat(e,\"|\").concat(n)];return -1===r||2===r};if(n.precheck){var s=n.precheck(this,a);if(void 0!==s)return s}return !!this.hasResourceBundle(r,e)||(!this.services.backendConnector.backend||!(!a(r,e)||o&&!a(i,e)))}},{key:\"loadNamespaces\",value:function(e,t){var n=this,r=gp();return this.options.ns?(\"string\"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e);})),this.loadResources((function(e){r.resolve(),t&&t(e);})),r):(t&&t(),Promise.resolve())}},{key:\"loadLanguages\",value:function(e,t){var n=gp();\"string\"==typeof e&&(e=[e]);var r=this.options.preload||[],o=e.filter((function(e){return r.indexOf(e)<0}));return o.length?(this.options.preload=r.concat(o),this.loadResources((function(e){n.resolve(),t&&t(e);})),n):(t&&t(),Promise.resolve())}},{key:\"dir\",value:function(e){if(e||(e=this.languages&&this.languages.length>0?this.languages[0]:this.language),!e)return \"rtl\";return [\"ar\",\"shu\",\"sqr\",\"ssh\",\"xaa\",\"yhd\",\"yud\",\"aao\",\"abh\",\"abv\",\"acm\",\"acq\",\"acw\",\"acx\",\"acy\",\"adf\",\"ads\",\"aeb\",\"aec\",\"afb\",\"ajp\",\"apc\",\"apd\",\"arb\",\"arq\",\"ars\",\"ary\",\"arz\",\"auz\",\"avl\",\"ayh\",\"ayl\",\"ayn\",\"ayp\",\"bbz\",\"pga\",\"he\",\"iw\",\"ps\",\"pbt\",\"pbu\",\"pst\",\"prp\",\"prd\",\"ug\",\"ur\",\"ydd\",\"yds\",\"yih\",\"ji\",\"yi\",\"hbo\",\"men\",\"xmn\",\"fa\",\"jpr\",\"peo\",\"pes\",\"prs\",\"dv\",\"sam\"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>=0?\"rtl\":\"ltr\"}},{key:\"createInstance\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new t(e,n)}},{key:\"cloneInstance\",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Hp,o=op.default({},this.options,n,{isClone:!0}),i=new t(o),a=[\"store\",\"services\",\"language\"];return a.forEach((function(t){i[t]=e[t];})),i.services=op.default({},this.services),i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i.translator=new Pp(i.services,i.options),i.translator.on(\"*\",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit.apply(i,[e].concat(n));})),i.init(o,r),i.translator.options=i.options,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}},{key:\"toJSON\",value:function(){return {options:this.options,store:this.store,language:this.language,languages:this.languages}}}]),t}(hp),zp=new Vp,Up=\"translation\";zp.init({lng:\"zh-CN\",resources:{}});var Kp=zp.t.bind(zp);e.DomEditor=Hs,e.ELEM_TO_HTML_CONF=ol,e.PARSE_ELEM_HTML_CONF=Zu,e.PARSE_STYLE_HTML_FN_LIST=Qu,e.PRE_PARSE_HTML_CONF_LIST=Xu,e.RENDER_ELEM_CONF=Ff,e.RENDER_STYLE_HANDLER_LIST=_f,e.STYLE_TO_HTML_FN_LIST=rl,e.TEXT_TAGS=Yu,e.Toolbar=Bd,e.coreCreateEditor=function(e){var n=e.selector,r=void 0===n?\"\":n,o=e.config,i=void 0===o?{}:o,a=e.content,s=e.html,l=e.plugins,u=void 0===l?[]:l,c=Qn(function(e){var n=e,r=n.insertText,o=n.insertNode,i=n.insertFragment,a=n.dangerouslyInsertHtml;return n.insertText=function(e){if(n.getConfig().maxLength){var t=Hs.getLeftLengthOfMaxLength(n);t<=0||(t<e.length?r(e.slice(0,t)):r(e));}else r(e);},n.insertNode=function(e){if(n.getConfig().maxLength){var r=Hs.getLeftLengthOfMaxLength(n);r<=0||r<t.Node.string(e).length||o(e);}else o(e);},n.insertFragment=function(e){if(n.getConfig().maxLength)if(1!==e.length)e.forEach((function(e){n.insertNode(e);}));else {var r=e[0];if(Hs.getLeftLengthOfMaxLength(n)<t.Node.string(r).length)return;i(e);}else i(e);},n.dangerouslyInsertHtml=function(e,t){if(void 0===e&&(e=\"\"),void 0===t&&(t=!1),e)if(n.getConfig().maxLength){var r=Hs.getLeftLengthOfMaxLength(n);if(!(r<=0)){var o=document.createElement(\"div\");o.innerHTML=e;var i=Array.from(o.childNodes).reduce((function(e,t){var n=t.nodeType,r=t.nodeName;return t?n===Ss.TEXT_NODE?e+(t.textContent||\"\"):n===Ss.ELEMENT_NODE?Ic.has(r.toLowerCase())?e:e+(t.textContent||\"\"):e:e}),\"\");r<i.length||a(e,t);}}else a(e,t);},n}(function(e){var t=e;return t.on=function(e,n){var r=ff(t);if(r.on(e,n),\"destroyed\"===e&&pf(t,n),\"destroyed\"!==e){var o=function(){return r.off(e,n)};r.on(\"destroyed\",o),pf(t,o);}},t.once=function(e,n){ff(t).once(e,n);},t.off=function(e,n){ff(t).off(e,n);},t.emit=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=ff(t);(o.emit.apply(o,Ji([e],Gi(n))),\"destroyed\"===e)&&(hf(t).forEach((function(e){return o.off(\"destroyed\",e)})),gf(t));},t}(function(e){var n=e;return n.select=function(e){t.Transforms.select(n,e);},n.deselect=function(){var r=n.selection,o=Hs.findDocumentOrShadowRoot(n).getSelection();o&&o.rangeCount>0&&o.removeAllRanges(),r&&t.Transforms.deselect(e);},n.move=function(n,r){void 0===r&&(r=!1),n&&(n<0||t.Transforms.move(e,{distance:n,unit:\"character\",reverse:r}));},n.moveReverse=function(e){n.move(e,!0);},n.restoreSelection=function(){var e=vs.get(n);null!=e&&(n.focus(),t.Transforms.select(n,e));},n.getSelectionPosition=function(){return yf(n)},n.getNodePosition=function(e){return mf(n,e)},n.isSelectedAll=function(){var e=n.selection;if(null==e)return !1;var r=Gi(t.Range.edges(e),2),o=r[0],i=r[1],a=Gi(t.Editor.edges(n,[]),2),s=a[0],l=a[1];return !(!t.Point.equals(o,s)||!t.Point.equals(i,l))},n.selectAll=function(){var e=t.Editor.start(n,[]),r=t.Editor.end(n,[]);t.Transforms.select(n,{anchor:e,focus:r});},n}($c(function(e){var t=e;return t.getAllMenuKeys=function(){var e=[];for(var t in Us)e.push(t);return e},t.getConfig=function(){var e=rs.get(t);if(null==e)throw new Error(\"Can not get editor config\");return e},t.getMenuConfig=function(e){var n=t.getConfig().MENU_CONF;return (void 0===n?{}:n)[e]||{}},t.alert=function(e,n){void 0===n&&(n=\"info\");var r=t.getConfig().customAlert;r&&r(e,n);},t}(function(e){var n=e;return n.id=\"wangEditor-\"+Vs++,n.isDestroyed=!1,n.isFullScreen=!1,n.focus=function(e){if(Hs.toDOMNode(n,n).focus({preventScroll:!0}),gs.set(n,!0),e){var r=t.Editor.end(n,[]);t.Transforms.select(n,r);}else {var o=vs.get(n);o?t.Transforms.select(n,o):t.Transforms.select(n,t.Editor.start(n,[]));}},n.isFocused=function(){return !!gs.get(n)},n.blur=function(){Hs.toDOMNode(n,n).blur(),t.Transforms.deselect(n),gs.set(n,!1);},n.updateView=function(){Hs.getTextarea(n).changeViewState();var e=Hs.getToolbar(n);e&&e.changeToolbarState();var t=Hs.getHoverbar(n);t&&t.changeHoverbarState();},n.destroy=function(){if(!n.isDestroyed){var e=Hs.getTextarea(n);e.destroy(),Ga.delete(n),Ja.delete(e);var t=Hs.getToolbar(n);t&&(t.destroy(),Xa.delete(n),Ya.delete(t));var r=Hs.getHoverbar(n);r&&(r.destroy(),Za.delete(n),Qa.delete(r)),n.isDestroyed=!0,n.emit(\"destroyed\");}},n.scrollToElem=function(e){if(!n.getConfig().scroll){var t=\"编辑器禁用了 scroll ，编辑器内容无法滚动，请自行实现该功能\";return t+=\"\\nYou has disabled editor scroll, please do this yourself\",void console.warn(t)}var r=y.default(\"#\"+e);if(0!==r.length){var o=r[0];if(!Hs.hasDOMNode(n,o))return t=\"Element (found by id is '\"+e+\"') is not in editor DOM\",t+=\"\\n 通过 id '\"+e+\"' 找到的 element 不在 editor DOM 之内\",void console.error(t,o);var i=Hs.getTextarea(n),a=i.$textAreaContainer,s=i.$scroll,l=r.offset().top,u=a.offset().top;s[0].scrollBy({top:l-u,behavior:\"smooth\"});}},n.showProgressBar=function(e){e<1||Hs.getTextarea(n).changeProgress(e);},n.hidePanelOrModal=function(){var e=ts.get(n);null!=e&&e.forEach((function(e){return e.hide()}));},n.enable=function(){n.getConfig().readOnly=!1,n.updateView();},n.disable=function(){n.getConfig().readOnly=!0,n.updateView();},n.isDisabled=function(){return n.getConfig().readOnly},n.toDOMNode=function(e){return Hs.toDOMNode(n,e)},n.fullScreen=function(){if(!n.isFullScreen){var e=null,t=Hs.getToolbar(n);t&&(e=t.$box);var r=Hs.getTextarea(n).$box.parent();if(e&&e.parent()[0]!==r[0])throw new Error(\"Can not set full screen, cause toolbar DOM parent is not equal to textarea DOM parent\\n不能设置全屏，因为 toolbar DOM 父节点和 textarea DOM 父节点不一致\");r.addClass(\"w-e-full-screen-container\");var o=r.css(\"z-index\");r.attr(\"data-z-index\",o.toString()),n.isFullScreen=!0,n.emit(\"fullScreen\");}},n.unFullScreen=function(){if(n.isFullScreen){var e=Hs.getTextarea(n).$box.parent();setTimeout((function(){e.removeClass(\"w-e-full-screen-container\"),n.isFullScreen=!1,n.emit(\"unFullScreen\");}),200);}},n.getEditableContainer=function(){return Hs.getTextarea(n).$textAreaContainer[0]},n}(Wc(t.createEditor()))))))));if(r&&function(e,t){return Pc(e,\"data-w-e-textarea\",t)}(c,r))throw new Error(\"Repeated create editor by selector '\"+r+\"'\");var f=function(e){void 0===e&&(e={});var t=E.default(zs),n={},r=e.MENU_CONF,o=void 0===r?{}:r;return m.default(t,(function(e,t){n[t]=Ki(Ki({},e),o[t]||{});})),delete e.MENU_CONF,Ki({scroll:!0,readOnly:!1,autoFocus:!0,decorate:function(){return []},maxLength:0,MENU_CONF:n,hoverbarKeys:{},customAlert:function(e,t){window.alert(t+\":\\n\"+e);}},e)}(i);rs.set(c,f);var d=f.hoverbarKeys,p=void 0===d?{}:d;if(u.forEach((function(e){c=e(c);})),null!=s&&(c.children=Rc(c,s)),a&&a.length&&(c.children=a),0===c.children.length&&(c.children=[{type:\"paragraph\",children:[{text:\"\"}]}]),Hs.normalizeContent(c),r){var h=new dd(r);Ga.set(c,h),Ja.set(h,c),h.changeViewState(),Uu((function(){var e=h.$scroll;if(null!=e&&e.height()<300){console.warn(\"编辑区域高度 < 300px 这可能会导致 modal hoverbar 定位异常\\nTextarea height < 300px . This may be cause modal and hoverbar position error\",e);}}));var g=void 0;Object.keys(p).length>0&&(g=new Pd,Qa.set(g,c),Za.set(c,g)),c.on(\"change\",(function(){c.hidePanelOrModal();})),c.on(\"scroll\",(function(){c.hidePanelOrModal();}));}else c.children.forEach((function(e,t){return Rd(e,t,c,c)}));var v=f.onCreated,b=f.onDestroyed;return v&&c.on(\"created\",(function(){return v(c)})),b&&c.on(\"destroyed\",(function(){return b(c)})),Uu((function(){return c.emit(\"created\")})),c},e.coreCreateToolbar=function(e,t){if(null==e)throw new Error(\"Cannot create toolbar, because editor is null\");var n=t.selector,r=t.config,o=void 0===r?{}:r;if(function(e,t){return Pc(e,\"data-w-e-toolbar\",t)}(e,n))throw new Error(\"Repeated create toolbar by selector '\"+n+\"'\");var i=Ki({toolbarKeys:[],excludeKeys:[],insertKeys:{index:0,keys:[]},modalAppendToBody:!1},o||{}),a=new Bd(n,i);return Ya.set(a,e),Xa.set(e,a),a},e.createUploader=function(e){var t=e.server,n=void 0===t?\"\":t,r=e.fieldName,o=void 0===r?\"\":r,i=e.maxFileSize,a=void 0===i?10485760:i,s=e.maxNumberOfFiles,l=void 0===s?100:s,u=e.meta,c=void 0===u?{}:u,f=e.metaWithUrl,d=void 0!==f&&f,p=e.headers,h=void 0===p?{}:p,g=e.withCredentials,v=void 0!==g&&g,y=e.timeout,b=void 0===y?1e4:y,w=e.onBeforeUpload,x=void 0===w?function(e){return e}:w,E=e.onSuccess,O=void 0===E?function(e,t){}:E,C=e.onError,T=void 0===C?function(e,t,n){console.error(e.name+\" upload error\",t,n);}:C,N=e.onProgress,M=void 0===N?function(e){}:N;if(!n)throw new Error(\"Cannot get upload server address\\n没有配置上传地址\");if(!o)throw new Error(\"Cannot get fieldName\\n没有配置 fieldName\");var L=n;d&&(L=function(e,t){var n=Gi(e.split(\"#\"),2),r=n[0],o=n[1],i=[];m.default(t,(function(e,t){i.push(t+\"=\"+e);}));var a=i.join(\"&\");return r=r.indexOf(\"?\")>0?r+\"&\"+a:r+\"?\"+a,o?r+\"#\"+o:r}(L,c));var P=new S.default({onBeforeUpload:x,restrictions:{maxFileSize:a,maxNumberOfFiles:l},meta:c}).use(k.default,{endpoint:L,headers:h,formData:!0,fieldName:o,bundle:!0,withCredentials:v,timeout:b});return P.on(\"upload-success\",(function(e,t){var n=t.body,r=void 0===n?{}:n;try{O(e,r);}catch(e){console.error(\"wangEditor upload file - onSuccess error\",e);}P.removeFile(e.id);})),P.on(\"progress\",(function(e){e<1||M(e);})),P.on(\"upload-error\",(function(e,t,n){try{T(e,t,n);}catch(e){console.error(\"wangEditor upload file - onError error\",e);}P.removeFile(e.id);})),P.on(\"restriction-failed\",(function(e,t){try{T(e,t);}catch(e){console.error(\"wangEditor upload file - onError error\",e);}P.removeFile(e.id);})),P},e.genModalButtonElems=function(e,t){var n=y.default('<div class=\"button-container\"></div>'),r=y.default('<button type=\"button\" id=\"'+e+'\">'+t+\"</button>\");return n.append(r),[n[0],r[0]]},e.genModalInputElems=function(e,t,n){var r=y.default('<label class=\"babel-container\"></label>');r.append(\"<span>\"+e+\"</span>\");var o=y.default('<input type=\"text\" id=\"'+t+'\" placeholder=\"'+(n||\"\")+'\">');return r.append(o),[r[0],o[0]]},e.genModalTextareaElems=function(e,t,n){var r=y.default('<label class=\"babel-container\"></label>');r.append(\"<span>\"+e+\"</span>\");var o=y.default('<textarea type=\"text\" id=\"'+t+'\" placeholder=\"'+(n||\"\")+'\"></textarea>');return r.append(o),[r[0],o[0]]},e.i18nAddResources=function(e,t){zp.addResourceBundle(e,Up,t,!0,!0);},e.i18nChangeLanguage=function(e){zp.changeLanguage(e);},e.i18nGetResources=function(e){return zp.getResourceBundle(e,Up)},e.registerElemToHtmlConf=function(e){var t=e.type,n=e.elemToHtml;ol[t||\"\"]=n;},e.registerMenu=function(e,t){var n=e.key,r=e.factory,o=e.config,i=Ki(Ki({},o),t||{});if(null!=Us[n])throw new Error(\"Duplicated key '\"+n+\"' in menu items\");Us[n]=r,function(e,t){null!=t&&(zs[e]=t);}(n,i);},e.registerParseElemHtmlConf=function(e){var t=e.selector,n=e.parseElemHtml;Zu[t]=n;},e.registerParseStyleHtmlHandler=function(e){Qu.push(e);},e.registerPreParseHtmlConf=function(e){Xu.push(e);},e.registerRenderElemConf=function(e){var t=e.type,n=e.renderElem;Ff[t||\"\"]=n;},e.registerStyleHandler=function(e){_f.push(e);},e.registerStyleToHtmlHandler=function(e){rl.push(e);},e.t=Kp,Object.defineProperty(e,\"__esModule\",{value:!0});}));\n\n  });\n\n  /**\r\n   * @description i18n en\r\n   * @author wangfupeng\r\n   */\r\n  var enResources = {\r\n      editor: {\r\n          more: 'More',\r\n          justify: 'Justify',\r\n          indent: 'Indent',\r\n          image: 'Image',\r\n          video: 'Video',\r\n      },\r\n  };\n\n  /**\r\n   * @description i18n zh-CN\r\n   * @author wangfupeng\r\n   */\r\n  var zhResources = {\r\n      editor: {\r\n          more: '更多',\r\n          justify: '对齐',\r\n          indent: '缩进',\r\n          image: '图片',\r\n          video: '视频',\r\n      },\r\n  };\n\n  /**\r\n   * @description i18n entry\r\n   * @author wangfupeng\r\n   */\r\n  dist$6.i18nAddResources('en', enResources);\r\n  dist$6.i18nAddResources('zh-CN', zhResources);\n\n  var dist$5 = createCommonjsModule$1(function (module, exports) {\n  !function(t,e){e(exports,dist$6,require$$2,require$$2$1,require$$1,require$$4,lodash_throttle);}(commonjsGlobal,(function(t,e,n,r,o,i,u){function a(t){return t&&\"object\"==typeof t&&\"default\"in t?t:{default:t}}var c=a(o),l=a(u);e.i18nAddResources(\"en\",{common:{ok:\"OK\",delete:\"Delete\",enter:\"Enter\"},blockQuote:{title:\"Quote\"},codeBlock:{title:\"Code block\"},color:{color:\"Font color\",bgColor:\"Back color\",default:\"Default color\",clear:\"Clear back color\"},divider:{title:\"Divider\"},emotion:{title:\"Emotion\"},fontSize:{title:\"Font size\",default:\"Default\"},fontFamily:{title:\"Font family\",default:\"Default\"},fullScreen:{title:\"Full screen\"},header:{title:\"Header\",text:\"Text\"},image:{netImage:\"Net image\",delete:\"Delete image\",edit:\"Edit image\",viewLink:\"View link\",src:\"Image src\",desc:\"Description\",link:\"Image link\"},indent:{decrease:\"Decrease\",increase:\"Increase\"},justify:{left:\"Left\",right:\"Right\",center:\"Center\",justify:\"Justify\"},lineHeight:{title:\"Line height\",default:\"Default\"},link:{insert:\"Insert link\",text:\"Link text\",url:\"Link source\",unLink:\"Unlink\",edit:\"Edit link\",view:\"View link\"},textStyle:{bold:\"Bold\",clear:\"Clear styles\",code:\"Inline code\",italic:\"Italic\",sub:\"Sub\",sup:\"Sup\",through:\"Through\",underline:\"Underline\"},undo:{undo:\"undo\",redo:\"Redo\"},todo:{todo:\"Todo\"}}),e.i18nAddResources(\"zh-CN\",{common:{ok:\"确定\",delete:\"删除\",enter:\"回车\"},blockQuote:{title:\"引用\"},codeBlock:{title:\"代码块\"},color:{color:\"文字颜色\",bgColor:\"背景色\",default:\"默认颜色\",clear:\"清除背景色\"},divider:{title:\"分割线\"},emotion:{title:\"表情\"},fontSize:{title:\"字号\",default:\"默认字号\"},fontFamily:{title:\"字体\",default:\"默认字体\"},fullScreen:{title:\"全屏\"},header:{title:\"标题\",text:\"正文\"},image:{netImage:\"网络图片\",delete:\"删除图片\",edit:\"编辑图片\",viewLink:\"查看链接\",src:\"图片地址\",desc:\"图片描述\",link:\"图片链接\"},indent:{decrease:\"减少缩进\",increase:\"增加缩进\"},justify:{left:\"左对齐\",right:\"右对齐\",center:\"居中对齐\",justify:\"两端对齐\"},lineHeight:{title:\"行高\",default:\"默认行高\"},link:{insert:\"插入链接\",text:\"链接文本\",url:\"链接地址\",unLink:\"取消链接\",edit:\"修改链接\",view:\"查看链接\"},textStyle:{bold:\"粗体\",clear:\"清除格式\",code:\"行内代码\",italic:\"斜体\",sub:\"下标\",sup:\"上标\",through:\"删除线\",underline:\"下划线\"},undo:{undo:\"撤销\",redo:\"重做\"},todo:{todo:\"待办\"}});var s={type:\"paragraph\",renderElem:function(t,e,r){return n.jsx(\"p\",null,e)}};var f={type:\"paragraph\",elemToHtml:function(t,e){return \"\"===e?\"<p><br></p>\":\"<p>\"+e+\"</p>\"}},d=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function p(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\"default\")?t.default:t}function h(t){var e={exports:{}};return t(e,e.exports),e.exports}var v,g,m=function(t){return t&&t.Math==Math&&t},y=m(\"object\"==typeof globalThis&&globalThis)||m(\"object\"==typeof window&&window)||m(\"object\"==typeof self&&self)||m(\"object\"==typeof d&&d)||function(){return this}()||Function(\"return this\")(),b=function(t){try{return !!t()}catch(t){return !0}},x=!b((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),w=Function.prototype.call,E=w.bind?w.bind(w):function(){return w.apply(w,arguments)},S={}.propertyIsEnumerable,k=Object.getOwnPropertyDescriptor,T=k&&!S.call({1:2},1)?function(t){var e=k(this,t);return !!e&&e.enumerable}:S,M={f:T},I=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},N=Function.prototype,H=N.bind,O=N.call,j=H&&H.bind(O),D=H?function(t){return t&&j(O,t)}:function(t){return t&&function(){return O.apply(t,arguments)}},L=D({}.toString),z=D(\"\".slice),A=function(t){return z(L(t),8,-1)},P=y.Object,C=D(\"\".split),V=b((function(){return !P(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==A(t)?C(t,\"\"):P(t)}:P,B=y.TypeError,R=function(t){if(null==t)throw B(\"Can't call method on \"+t);return t},F=function(t){return V(R(t))},_=function(t){return \"function\"==typeof t},q=function(t){return \"object\"==typeof t?null!==t:_(t)},$=function(t){return _(t)?t:void 0},W=function(t,e){return arguments.length<2?$(y[t]):y[t]&&y[t][e]},G=D({}.isPrototypeOf),U=W(\"navigator\",\"userAgent\")||\"\",X=y.process,Y=y.Deno,J=X&&X.versions||Y&&Y.version,K=J&&J.v8;K&&(g=(v=K.split(\".\"))[0]>0&&v[0]<4?1:+(v[0]+v[1])),!g&&U&&(!(v=U.match(/Edge\\/(\\d+)/))||v[1]>=74)&&(v=U.match(/Chrome\\/(\\d+)/))&&(g=+v[1]);var Q=g,Z=!!Object.getOwnPropertySymbols&&!b((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&Q&&Q<41})),tt=Z&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,et=y.Object,nt=tt?function(t){return \"symbol\"==typeof t}:function(t){var e=W(\"Symbol\");return _(e)&&G(e.prototype,et(t))},rt=y.String,ot=function(t){try{return rt(t)}catch(t){return \"Object\"}},it=y.TypeError,ut=function(t){if(_(t))return t;throw it(ot(t)+\" is not a function\")},at=function(t,e){var n=t[e];return null==n?void 0:ut(n)},ct=y.TypeError,lt=Object.defineProperty,st=function(t,e){try{lt(y,t,{value:e,configurable:!0,writable:!0});}catch(n){y[t]=e;}return e},ft=\"__core-js_shared__\",dt=y[ft]||st(ft,{}),pt=h((function(t){(t.exports=function(t,e){return dt[t]||(dt[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),ht=y.Object,vt=function(t){return ht(R(t))},gt=D({}.hasOwnProperty),mt=Object.hasOwn||function(t,e){return gt(vt(t),e)},yt=0,bt=Math.random(),xt=D(1..toString),wt=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+xt(++yt+bt,36)},Et=pt(\"wks\"),St=y.Symbol,kt=St&&St.for,Tt=tt?St:St&&St.withoutSetter||wt,Mt=function(t){if(!mt(Et,t)||!Z&&\"string\"!=typeof Et[t]){var e=\"Symbol.\"+t;Z&&mt(St,t)?Et[t]=St[t]:Et[t]=tt&&kt?kt(e):Tt(e);}return Et[t]},It=y.TypeError,Nt=Mt(\"toPrimitive\"),Ht=function(t,e){if(!q(t)||nt(t))return t;var n,r=at(t,Nt);if(r){if(void 0===e&&(e=\"default\"),n=E(r,t,e),!q(n)||nt(n))return n;throw It(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var n,r;if(\"string\"===e&&_(n=t.toString)&&!q(r=E(n,t)))return r;if(_(n=t.valueOf)&&!q(r=E(n,t)))return r;if(\"string\"!==e&&_(n=t.toString)&&!q(r=E(n,t)))return r;throw ct(\"Can't convert object to primitive value\")}(t,e)},Ot=function(t){var e=Ht(t,\"string\");return nt(e)?e:e+\"\"},jt=y.document,Dt=q(jt)&&q(jt.createElement),Lt=function(t){return Dt?jt.createElement(t):{}},zt=!x&&!b((function(){return 7!=Object.defineProperty(Lt(\"div\"),\"a\",{get:function(){return 7}}).a})),At=Object.getOwnPropertyDescriptor,Pt={f:x?At:function(t,e){if(t=F(t),e=Ot(e),zt)try{return At(t,e)}catch(t){}if(mt(t,e))return I(!E(M.f,t,e),t[e])}},Ct=y.String,Vt=y.TypeError,Bt=function(t){if(q(t))return t;throw Vt(Ct(t)+\" is not an object\")},Rt=y.TypeError,Ft=Object.defineProperty,_t={f:x?Ft:function(t,e,n){if(Bt(t),e=Ot(e),Bt(n),zt)try{return Ft(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw Rt(\"Accessors not supported\");return \"value\"in n&&(t[e]=n.value),t}},qt=x?function(t,e,n){return _t.f(t,e,I(1,n))}:function(t,e,n){return t[e]=n,t},$t=D(Function.toString);_(dt.inspectSource)||(dt.inspectSource=function(t){return $t(t)});var Wt,Gt,Ut,Xt=dt.inspectSource,Yt=y.WeakMap,Jt=_(Yt)&&/native code/.test(Xt(Yt)),Kt=pt(\"keys\"),Qt=function(t){return Kt[t]||(Kt[t]=wt(t))},Zt={},te=\"Object already initialized\",ee=y.TypeError,ne=y.WeakMap;if(Jt||dt.state){var re=dt.state||(dt.state=new ne),oe=D(re.get),ie=D(re.has),ue=D(re.set);Wt=function(t,e){if(ie(re,t))throw new ee(te);return e.facade=t,ue(re,t,e),e},Gt=function(t){return oe(re,t)||{}},Ut=function(t){return ie(re,t)};}else {var ae=Qt(\"state\");Zt[ae]=!0,Wt=function(t,e){if(mt(t,ae))throw new ee(te);return e.facade=t,qt(t,ae,e),e},Gt=function(t){return mt(t,ae)?t[ae]:{}},Ut=function(t){return mt(t,ae)};}var ce={set:Wt,get:Gt,has:Ut,enforce:function(t){return Ut(t)?Gt(t):Wt(t,{})},getterFor:function(t){return function(e){var n;if(!q(e)||(n=Gt(e)).type!==t)throw ee(\"Incompatible receiver, \"+t+\" required\");return n}}},le=Function.prototype,se=x&&Object.getOwnPropertyDescriptor,fe=mt(le,\"name\"),de={EXISTS:fe,PROPER:fe&&\"something\"===function(){}.name,CONFIGURABLE:fe&&(!x||x&&se(le,\"name\").configurable)},pe=h((function(t){var e=de.CONFIGURABLE,n=ce.get,r=ce.enforce,o=String(String).split(\"String\");(t.exports=function(t,n,i,u){var a,c=!!u&&!!u.unsafe,l=!!u&&!!u.enumerable,s=!!u&&!!u.noTargetGet,f=u&&void 0!==u.name?u.name:n;_(i)&&(\"Symbol(\"===String(f).slice(0,7)&&(f=\"[\"+String(f).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!mt(i,\"name\")||e&&i.name!==f)&&qt(i,\"name\",f),(a=r(i)).source||(a.source=o.join(\"string\"==typeof f?f:\"\"))),t!==y?(c?!s&&t[n]&&(l=!0):delete t[n],l?t[n]=i:qt(t,n,i)):l?t[n]=i:st(n,i);})(Function.prototype,\"toString\",(function(){return _(this)&&n(this).source||Xt(this)}));})),he=Math.ceil,ve=Math.floor,ge=function(t){var e=+t;return e!=e||0===e?0:(e>0?ve:he)(e)},me=Math.max,ye=Math.min,be=function(t,e){var n=ge(t);return n<0?me(n+e,0):ye(n,e)},xe=Math.min,we=function(t){return t>0?xe(ge(t),9007199254740991):0},Ee=function(t){return we(t.length)},Se=function(t){return function(e,n,r){var o,i=F(e),u=Ee(i),a=be(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return !0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return !t&&-1}},ke={includes:Se(!0),indexOf:Se(!1)},Te=ke.indexOf,Me=D([].push),Ie=function(t,e){var n,r=F(t),o=0,i=[];for(n in r)!mt(Zt,n)&&mt(r,n)&&Me(i,n);for(;e.length>o;)mt(r,n=e[o++])&&(~Te(i,n)||Me(i,n));return i},Ne=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],He=Ne.concat(\"length\",\"prototype\"),Oe={f:Object.getOwnPropertyNames||function(t){return Ie(t,He)}},je={f:Object.getOwnPropertySymbols},De=D([].concat),Le=W(\"Reflect\",\"ownKeys\")||function(t){var e=Oe.f(Bt(t)),n=je.f;return n?De(e,n(t)):e},ze=function(t,e){for(var n=Le(e),r=_t.f,o=Pt.f,i=0;i<n.length;i++){var u=n[i];mt(t,u)||r(t,u,o(e,u));}},Ae=/#|\\.prototype\\./,Pe=function(t,e){var n=Ve[Ce(t)];return n==Re||n!=Be&&(_(e)?b(e):!!e)},Ce=Pe.normalize=function(t){return String(t).replace(Ae,\".\").toLowerCase()},Ve=Pe.data={},Be=Pe.NATIVE=\"N\",Re=Pe.POLYFILL=\"P\",Fe=Pe,_e=Pt.f,qe=function(t,e){var n,r,o,i,u,a=t.target,c=t.global,l=t.stat;if(n=c?y:l?y[a]||st(a,{}):(y[a]||{}).prototype)for(r in e){if(i=e[r],o=t.noTargetGet?(u=_e(n,r))&&u.value:n[r],!Fe(c?r:a+(l?\".\":\"#\")+r,t.forced)&&void 0!==o){if(typeof i==typeof o)continue;ze(i,o);}(t.sham||o&&o.sham)&&qt(i,\"sham\",!0),pe(n,r,i,t);}},$e=D(D.bind),We=Array.isArray||function(t){return \"Array\"==A(t)},Ge={};Ge[Mt(\"toStringTag\")]=\"z\";var Ue=\"[object z]\"===String(Ge),Xe=Mt(\"toStringTag\"),Ye=y.Object,Je=\"Arguments\"==A(function(){return arguments}()),Ke=Ue?A:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Ye(t),Xe))?n:Je?A(e):\"Object\"==(r=A(e))&&_(e.callee)?\"Arguments\":r},Qe=function(){},Ze=[],tn=W(\"Reflect\",\"construct\"),en=/^\\s*(?:class|function)\\b/,nn=D(en.exec),rn=!en.exec(Qe),on=function(t){if(!_(t))return !1;try{return tn(Qe,Ze,t),!0}catch(t){return !1}},un=!tn||b((function(){var t;return on(on.call)||!on(Object)||!on((function(){t=!0;}))||t}))?function(t){if(!_(t))return !1;switch(Ke(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return rn||!!nn(en,Xt(t))}:on,an=Mt(\"species\"),cn=y.Array,ln=function(t,e){return new(function(t){var e;return We(t)&&(e=t.constructor,(un(e)&&(e===cn||We(e.prototype))||q(e)&&null===(e=e[an]))&&(e=void 0)),void 0===e?cn:e}(t))(0===e?0:e)},sn=D([].push),fn=function(t){var e=1==t,n=2==t,r=3==t,o=4==t,i=6==t,u=7==t,a=5==t||i;return function(c,l,s,f){for(var d,p,h=vt(c),v=V(h),g=function(t,e){return ut(t),void 0===e?t:$e?$e(t,e):function(){return t.apply(e,arguments)}}(l,s),m=Ee(v),y=0,b=f||ln,x=e?b(c,m):n||u?b(c,0):void 0;m>y;y++)if((a||y in v)&&(p=g(d=v[y],y,h),t))if(e)x[y]=p;else if(p)switch(t){case 3:return !0;case 5:return d;case 6:return y;case 2:sn(x,d);}else switch(t){case 4:return !1;case 7:sn(x,d);}return i?-1:r||o?o:x}},dn={forEach:fn(0),map:fn(1),filter:fn(2),some:fn(3),every:fn(4),find:fn(5),findIndex:fn(6),filterReject:fn(7)},pn=Mt(\"species\"),hn=function(t){return Q>=51||!b((function(){var e=[];return (e.constructor={})[pn]=function(){return {foo:1}},1!==e[t](Boolean).foo}))},vn=dn.filter;qe({target:\"Array\",proto:!0,forced:!hn(\"filter\")},{filter:function(t){return vn(this,t,arguments.length>1?arguments[1]:void 0)}});var gn=Ue?{}.toString:function(){return \"[object \"+Ke(this)+\"]\"};Ue||pe(Object.prototype,\"toString\",gn,{unsafe:!0});var mn,yn=y.String,bn=function(t){if(\"Symbol\"===Ke(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return yn(t)},xn=function(){var t=Bt(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e},wn=y.RegExp,En=b((function(){var t=wn(\"a\",\"y\");return t.lastIndex=2,null!=t.exec(\"abcd\")})),Sn=En||b((function(){return !wn(\"a\",\"y\").sticky})),kn={BROKEN_CARET:En||b((function(){var t=wn(\"^r\",\"gy\");return t.lastIndex=2,null!=t.exec(\"str\")})),MISSED_STICKY:Sn,UNSUPPORTED_Y:En},Tn=Object.keys||function(t){return Ie(t,Ne)},Mn=x?Object.defineProperties:function(t,e){Bt(t);for(var n,r=F(e),o=Tn(e),i=o.length,u=0;i>u;)_t.f(t,n=o[u++],r[n]);return t},In=W(\"document\",\"documentElement\"),Nn=Qt(\"IE_PROTO\"),Hn=function(){},On=function(t){return \"<script>\"+t+\"</\"+\"script>\"},jn=function(t){t.write(On(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},Dn=function(){try{mn=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;Dn=\"undefined\"!=typeof document?document.domain&&mn?jn(mn):((e=Lt(\"iframe\")).style.display=\"none\",In.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(On(\"document.F=Object\")),t.close(),t.F):jn(mn);for(var n=Ne.length;n--;)delete Dn.prototype[Ne[n]];return Dn()};Zt[Nn]=!0;var Ln,zn,An=Object.create||function(t,e){var n;return null!==t?(Hn.prototype=Bt(t),n=new Hn,Hn.prototype=null,n[Nn]=t):n=Dn(),void 0===e?n:Mn(n,e)},Pn=y.RegExp,Cn=b((function(){var t=Pn(\".\",\"s\");return !(t.dotAll&&t.exec(\"\\n\")&&\"s\"===t.flags)})),Vn=y.RegExp,Bn=b((function(){var t=Vn(\"(?<a>b)\",\"g\");return \"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")})),Rn=ce.get,Fn=pt(\"native-string-replace\",String.prototype.replace),_n=RegExp.prototype.exec,qn=_n,$n=D(\"\".charAt),Wn=D(\"\".indexOf),Gn=D(\"\".replace),Un=D(\"\".slice),Xn=(zn=/b*/g,E(_n,Ln=/a/,\"a\"),E(_n,zn,\"a\"),0!==Ln.lastIndex||0!==zn.lastIndex),Yn=kn.BROKEN_CARET,Jn=void 0!==/()??/.exec(\"\")[1];(Xn||Jn||Yn||Cn||Bn)&&(qn=function(t){var e,n,r,o,i,u,a,c=this,l=Rn(c),s=bn(t),f=l.raw;if(f)return f.lastIndex=c.lastIndex,e=E(qn,f,s),c.lastIndex=f.lastIndex,e;var d=l.groups,p=Yn&&c.sticky,h=E(xn,c),v=c.source,g=0,m=s;if(p&&(h=Gn(h,\"y\",\"\"),-1===Wn(h,\"g\")&&(h+=\"g\"),m=Un(s,c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&\"\\n\"!==$n(s,c.lastIndex-1))&&(v=\"(?: \"+v+\")\",m=\" \"+m,g++),n=new RegExp(\"^(?:\"+v+\")\",h)),Jn&&(n=new RegExp(\"^\"+v+\"$(?!\\\\s)\",h)),Xn&&(r=c.lastIndex),o=E(_n,p?n:c,m),p?o?(o.input=Un(o.input,g),o[0]=Un(o[0],g),o.index=c.lastIndex,c.lastIndex+=o[0].length):c.lastIndex=0:Xn&&o&&(c.lastIndex=c.global?o.index+o[0].length:r),Jn&&o&&o.length>1&&E(Fn,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&d)for(o.groups=u=An(null),i=0;i<d.length;i++)u[(a=d[i])[0]]=o[a[1]];return o});var Kn=qn;qe({target:\"RegExp\",proto:!0,forced:/./.exec!==Kn},{exec:Kn});var Qn=Function.prototype,Zn=Qn.apply,tr=Qn.bind,er=Qn.call,nr=\"object\"==typeof Reflect&&Reflect.apply||(tr?er.bind(Zn):function(){return er.apply(Zn,arguments)}),rr=Mt(\"species\"),or=RegExp.prototype,ir=function(t,e,n,r){var o=Mt(t),i=!b((function(){var e={};return e[o]=function(){return 7},7!=\"\"[t](e)})),u=i&&!b((function(){var e=!1,n=/a/;return \"split\"===t&&((n={}).constructor={},n.constructor[rr]=function(){return n},n.flags=\"\",n[o]=/./[o]),n.exec=function(){return e=!0,null},n[o](\"\"),!e}));if(!i||!u||n){var a=D(/./[o]),c=e(o,\"\"[t],(function(t,e,n,r,o){var u=D(t),c=e.exec;return c===Kn||c===or.exec?i&&!o?{done:!0,value:a(e,n,r)}:{done:!0,value:u(n,e,r)}:{done:!1}}));pe(String.prototype,t,c[0]),pe(or,o,c[1]);}r&&qt(or[o],\"sham\",!0);},ur=D(\"\".charAt),ar=D(\"\".charCodeAt),cr=D(\"\".slice),lr=function(t){return function(e,n){var r,o,i=bn(R(e)),u=ge(n),a=i.length;return u<0||u>=a?t?\"\":void 0:(r=ar(i,u))<55296||r>56319||u+1===a||(o=ar(i,u+1))<56320||o>57343?t?ur(i,u):r:t?cr(i,u,u+2):o-56320+(r-55296<<10)+65536}},sr={codeAt:lr(!1),charAt:lr(!0)}.charAt,fr=function(t,e,n){return e+(n?sr(t,e).length:1)},dr=Math.floor,pr=D(\"\".charAt),hr=D(\"\".replace),vr=D(\"\".slice),gr=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,mr=/\\$([$&'`]|\\d{1,2})/g,yr=function(t,e,n,r,o,i){var u=n+t.length,a=r.length,c=mr;return void 0!==o&&(o=vt(o),c=gr),hr(i,c,(function(i,c){var l;switch(pr(c,0)){case\"$\":return \"$\";case\"&\":return t;case\"`\":return vr(e,0,n);case\"'\":return vr(e,u);case\"<\":l=o[vr(c,1,-1)];break;default:var s=+c;if(0===s)return i;if(s>a){var f=dr(s/10);return 0===f?i:f<=a?void 0===r[f-1]?pr(c,1):r[f-1]+pr(c,1):i}l=r[s-1];}return void 0===l?\"\":l}))},br=y.TypeError,xr=function(t,e){var n=t.exec;if(_(n)){var r=E(n,t,e);return null!==r&&Bt(r),r}if(\"RegExp\"===A(t))return E(Kn,t,e);throw br(\"RegExp#exec called on incompatible receiver\")},wr=Mt(\"replace\"),Er=Math.max,Sr=Math.min,kr=D([].concat),Tr=D([].push),Mr=D(\"\".indexOf),Ir=D(\"\".slice),Nr=\"$0\"===\"a\".replace(/./,\"$0\"),Hr=!!/./[wr]&&\"\"===/./[wr](\"a\",\"$0\");ir(\"replace\",(function(t,e,n){var r=Hr?\"$\":\"$0\";return [function(t,n){var r=R(this),o=null==t?void 0:at(t,wr);return o?E(o,t,r,n):E(e,bn(r),t,n)},function(t,o){var i=Bt(this),u=bn(t);if(\"string\"==typeof o&&-1===Mr(o,r)&&-1===Mr(o,\"$<\")){var a=n(e,i,u,o);if(a.done)return a.value}var c=_(o);c||(o=bn(o));var l=i.global;if(l){var s=i.unicode;i.lastIndex=0;}for(var f=[];;){var d=xr(i,u);if(null===d)break;if(Tr(f,d),!l)break;\"\"===bn(d[0])&&(i.lastIndex=fr(u,we(i.lastIndex),s));}for(var p,h=\"\",v=0,g=0;g<f.length;g++){for(var m=bn((d=f[g])[0]),y=Er(Sr(ge(d.index),u.length),0),b=[],x=1;x<d.length;x++)Tr(b,void 0===(p=d[x])?p:String(p));var w=d.groups;if(c){var E=kr([m],b,y,u);void 0!==w&&Tr(E,w);var S=bn(nr(o,void 0,E));}else S=yr(m,u,y,b,w,o);y>=v&&(h+=Ir(u,v,y)+S,v=y+m.length);}return h+Ir(u,v)}]}),!!b((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")}))||!Nr||Hr);var Or=Mt(\"unscopables\"),jr=Array.prototype;null==jr[Or]&&_t.f(jr,Or,{configurable:!0,value:An(null)});var Dr=function(t){jr[Or][t]=!0;},Lr=dn.find,zr=\"find\",Ar=!0;zr in[]&&Array(1).find((function(){Ar=!1;})),qe({target:\"Array\",proto:!0,forced:Ar},{find:function(t){return Lr(this,t,arguments.length>1?arguments[1]:void 0)}}),Dr(zr);var Pr=Mt(\"match\"),Cr=function(t){var e;return q(t)&&(void 0!==(e=t[Pr])?!!e:\"RegExp\"==A(t))},Vr=y.TypeError,Br=Mt(\"species\"),Rr=function(t,e){var n,r=Bt(t).constructor;return void 0===r||null==(n=Bt(r)[Br])?e:function(t){if(un(t))return t;throw Vr(ot(t)+\" is not a constructor\")}(n)},Fr=function(t,e,n){var r=Ot(e);r in t?_t.f(t,r,I(0,n)):t[r]=n;},_r=y.Array,qr=Math.max,$r=function(t,e,n){for(var r=Ee(t),o=be(e,r),i=be(void 0===n?r:n,r),u=_r(qr(i-o,0)),a=0;o<i;o++,a++)Fr(u,a,t[o]);return u.length=a,u},Wr=kn.UNSUPPORTED_Y,Gr=4294967295,Ur=Math.min,Xr=[].push,Yr=D(/./.exec),Jr=D(Xr),Kr=D(\"\".slice),Qr=!b((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n=\"ab\".split(t);return 2!==n.length||\"a\"!==n[0]||\"b\"!==n[1]}));ir(\"split\",(function(t,e,n){var r;return r=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(t,n){var r=bn(R(this)),o=void 0===n?Gr:n>>>0;if(0===o)return [];if(void 0===t)return [r];if(!Cr(t))return E(e,r,t,o);for(var i,u,a,c=[],l=(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.unicode?\"u\":\"\")+(t.sticky?\"y\":\"\"),s=0,f=new RegExp(t.source,l+\"g\");(i=E(Kn,f,r))&&!((u=f.lastIndex)>s&&(Jr(c,Kr(r,s,i.index)),i.length>1&&i.index<r.length&&nr(Xr,c,$r(i,1)),a=i[0].length,s=u,c.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return s===r.length?!a&&Yr(f,\"\")||Jr(c,\"\"):Jr(c,Kr(r,s)),c.length>o?$r(c,0,o):c}:\"0\".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:E(e,this,t,n)}:e,[function(e,n){var o=R(this),i=null==e?void 0:at(e,t);return i?E(i,e,o,n):E(r,bn(o),e,n)},function(t,o){var i=Bt(this),u=bn(t),a=n(r,i,u,o,r!==e);if(a.done)return a.value;var c=Rr(i,RegExp),l=i.unicode,s=(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(Wr?\"g\":\"y\"),f=new c(Wr?\"^(?:\"+i.source+\")\":i,s),d=void 0===o?Gr:o>>>0;if(0===d)return [];if(0===u.length)return null===xr(f,u)?[u]:[];for(var p=0,h=0,v=[];h<u.length;){f.lastIndex=Wr?0:h;var g,m=xr(f,Wr?Kr(u,h):u);if(null===m||(g=Ur(we(f.lastIndex+(Wr?h:0)),u.length))===p)h=fr(u,h,l);else {if(Jr(v,Kr(u,p,h)),v.length===d)return v;for(var y=1;y<=m.length-1;y++)if(Jr(v,m[y]),v.length===d)return v;h=p=g;}}return Jr(v,Kr(u,p)),v}]}),!Qr,Wr);var Zr,to=\"\\t\\n\\v\\f\\r                　\\u2028\\u2029\\ufeff\",eo=D(\"\".replace),no=\"[\"+to+\"]\",ro=RegExp(\"^\"+no+no+\"*\"),oo=RegExp(no+no+\"*$\"),io=function(t){return function(e){var n=bn(R(e));return 1&t&&(n=eo(n,ro,\"\")),2&t&&(n=eo(n,oo,\"\")),n}},uo={start:io(1),end:io(2),trim:io(3)},ao=de.PROPER,co=uo.trim;function lo(t){return 0===c.default(\"<div>\"+t+\"</div>\").children().filter((function(t){return \"BR\"!==t.tagName})).length}function so(t){return 0===t.length?\"\":t[0].outerHTML}function fo(t){return t.length?t[0].tagName.toLowerCase():\"\"}function po(t,e){for(var n=\"\",r=(t.attr(\"style\")||\"\").split(\";\"),o=r.length,i=0;i<o;i++){var u=r[i];if(u){var a=u.split(\":\");a[0].trim()===e&&(n=a[1].trim());}}return n}qe({target:\"String\",proto:!0,forced:(Zr=\"trim\",b((function(){return !!to[Zr]()||\"​᠎\"!==\"​᠎\"[Zr]()||ao&&to[Zr].name!==Zr})))},{trim:function(){return co(this)}}),qe({global:!0},{globalThis:y}),o.css&&(c.default.fn.css=o.css),o.append&&(c.default.fn.append=o.append),o.prepend&&(c.default.fn.prepend=o.prepend),o.addClass&&(c.default.fn.addClass=o.addClass),o.removeClass&&(c.default.fn.removeClass=o.removeClass),o.hasClass&&(c.default.fn.hasClass=o.hasClass),o.on&&(c.default.fn.on=o.on),o.off&&(c.default.fn.off=o.off),o.focus&&(c.default.fn.focus=o.focus),o.attr&&(c.default.fn.attr=o.attr),o.removeAttr&&(c.default.fn.removeAttr=o.removeAttr),o.hide&&(c.default.fn.hide=o.hide),o.show&&(c.default.fn.show=o.show),o.parents&&(c.default.fn.parents=o.parents),o.dataset&&(c.default.fn.dataset=o.dataset),o.val&&(c.default.fn.val=o.val),o.text&&(c.default.fn.text=o.text),o.html&&(c.default.fn.html=o.html),o.children&&(c.default.fn.children=o.children),o.remove&&(c.default.fn.remove=o.remove),o.find&&(c.default.fn.find=o.find),o.width&&(c.default.fn.width=o.width),o.height&&(c.default.fn.height=o.height),o.filter&&(c.default.fn.filter=o.filter),o.empty&&(c.default.fn.empty=o.empty);var ho=function(t,e){return ho=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e;}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);},ho(t,e)};\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */function vo(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Class extends value \"+String(e)+\" is not a constructor or null\");function n(){this.constructor=t;}ho(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n);}var go=function(){return go=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},go.apply(this,arguments)};function mo(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t));}catch(t){i(t);}}function a(t){try{c(r.throw(t));}catch(t){i(t);}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e);}))).then(u,a);}c((r=r.apply(t,e||[])).next());}))}function yo(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],r=0;}finally{n=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function bo(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return {next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function xo(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value);}catch(t){o={error:t};}finally{try{r&&!r.done&&(n=i.return)&&n.call(i);}finally{if(o)throw o.error}}return u}function wo(t){var e=xo(r.Editor.nodes(t,{match:function(e){return t.children[0]===e},mode:\"highest\"}),1),n=e[0];if(null==n)return !1;var o=n[0];if(!r.Element.isElement(o))return !1;if(\"paragraph\"===o.type)return !1;if(\"\"!==r.Node.string(o))return !1;var i=o.children,u=void 0===i?[]:i;return !!r.Text.isText(u[0])&&(r.Transforms.setNodes(t,{type:\"paragraph\"}),!0)}var Eo={renderElems:[s],elemsToHtml:[f],parseElemsHtml:[{selector:\"p:not([data-w-e-type])\",parseElemHtml:function(t,e,n){var o=c.default(t);return 0===(e=e.filter((function(t){return !!r.Text.isText(t)||!!n.isInline(t)}))).length&&(e=[{text:o.text().replace(/\\s+/gm,\" \")}]),{type:\"paragraph\",children:e}}}],editorPlugin:function(t){var e=t.deleteBackward,n=t.deleteForward;t.insertText,t.insertBreak;var r=t;return r.deleteBackward=function(t){wo(r)||e(t);},r.deleteForward=function(t){wo(r)||n(t);},r}},So=/\"/g,ko=D(\"\".replace),To=function(t,e,n,r){var o=bn(R(t)),i=\"<\"+e;return \"\"!==n&&(i+=\" \"+n+'=\"'+ko(bn(r),So,\"&quot;\")+'\"'),i+\">\"+o+\"</\"+e+\">\"},Mo=function(t){return b((function(){var e=\"\"[t]('\"');return e!==e.toLowerCase()||e.split('\"').length>3}))};function Io(t,e){var n=e,r=t,o=r.bold,i=r.italic,u=r.underline;return o&&(n=\"<strong>\"+n+\"</strong>\"),r.code&&(n=\"<code>\"+n+\"</code>\"),i&&(n=\"<em>\"+n+\"</em>\"),u&&(n=\"<u>\"+n+\"</u>\"),r.through&&(n=\"<s>\"+n+\"</s>\"),r.sub&&(n=\"<sub>\"+n+\"</sub>\"),r.sup&&(n=\"<sup>\"+n+\"</sup>\"),n}function No(t,e){return 0!==t.length&&(!!t[0].matches(e)||t.find(e).length>0)}qe({target:\"String\",proto:!0,forced:Mo(\"bold\")},{bold:function(){return To(this,\"b\",\"\",\"\")}}),qe({target:\"String\",proto:!0,forced:Mo(\"italics\")},{italics:function(){return To(this,\"i\",\"\",\"\")}}),qe({target:\"String\",proto:!0,forced:Mo(\"sub\")},{sub:function(){return To(this,\"sub\",\"\",\"\")}}),qe({target:\"String\",proto:!0,forced:Mo(\"sup\")},{sup:function(){return To(this,\"sup\",\"\",\"\")}});var Ho={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Oo=Lt(\"span\").classList,jo=Oo&&Oo.constructor&&Oo.constructor.prototype,Do=jo===Object.prototype?void 0:jo,Lo=function(t,e){var n=[][t];return !!n&&b((function(){n.call(null,e||function(){throw 1},1);}))},zo=dn.forEach,Ao=Lo(\"forEach\")?[].forEach:function(t){return zo(this,t,arguments.length>1?arguments[1]:void 0)},Po=function(t){if(t&&t.forEach!==Ao)try{qt(t,\"forEach\",Ao);}catch(e){t.forEach=Ao;}};for(var Co in Ho)Ho[Co]&&Po(y[Co]&&y[Co].prototype);function Vo(t,n){return null==t.selection||!!xo(r.Editor.nodes(t,{match:function(n){return \"pre\"===e.DomEditor.getNodeType(n)||!!r.Editor.isVoid(t,n)},universal:!0}),1)[0]}function Bo(t,e){Object.keys(e).forEach((function(e){\"text\"!==e&&r.Editor.removeMark(t,e);}));}Po(Do),qe({target:\"Object\",stat:!0,forced:b((function(){Tn(1);}))},{keys:function(t){return Tn(vt(t))}});var Ro=function(){function t(){this.marksNeedToRemove=[],this.tag=\"button\";}return t.prototype.getValue=function(t){var e=this.mark,n=r.Editor.marks(t);return n?n[e]:!!xo(r.Editor.nodes(t,{match:function(t){return !0===t[e]}}),1)[0]},t.prototype.isActive=function(t){return !!this.getValue(t)},t.prototype.isDisabled=function(t){return Vo(t,this.mark)},t.prototype.exec=function(t,e){var n=this.mark,r=this.marksNeedToRemove;e?t.removeMark(n):(t.addMark(n,!0),r&&r.forEach((function(e){return t.removeMark(e)})));},t}(),Fo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M707.872 484.64A254.88 254.88 0 0 0 768 320c0-141.152-114.848-256-256-256H192v896h384c141.152 0 256-114.848 256-256a256.096 256.096 0 0 0-124.128-219.36zM384 192h101.504c55.968 0 101.504 57.408 101.504 128s-45.536 128-101.504 128H384V192z m159.008 640H384v-256h159.008c58.464 0 106.016 57.408 106.016 128s-47.552 128-106.016 128z\"></path></svg>',_o='<svg viewBox=\"0 0 1024 1024\"><path d=\"M704 64l128 0 0 416c0 159.072-143.264 288-320 288s-320-128.928-320-288l0-416 128 0 0 416c0 40.16 18.24 78.688 51.36 108.512 36.896 33.216 86.848 51.488 140.64 51.488s103.744-18.304 140.64-51.488c33.12-29.792 51.36-68.352 51.36-108.512l0-416zM192 832l640 0 0 128-640 0z\"></path></svg>',qo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M896 64v64h-128L448 896h128v64H128v-64h128L576 128h-128V64z\"></path></svg>',$o='<svg viewBox=\"0 0 1024 1024\"><path d=\"M1024 512v64h-234.496c27.52 38.496 42.496 82.688 42.496 128 0 70.88-36.672 139.04-100.576 186.976C672.064 935.488 594.144 960 512 960s-160.064-24.512-219.424-69.024C228.64 843.04 192 774.88 192 704h128c0 69.376 87.936 128 192 128s192-58.624 192-128-87.936-128-192-128H0v-64h299.52a385.984 385.984 0 0 1-6.944-5.024C228.64 459.04 192 390.88 192 320s36.672-139.04 100.576-186.976C351.936 88.512 429.856 64 512 64s160.064 24.512 219.424 69.024C795.328 180.96 832 249.12 832 320h-128c0-69.376-87.936-128-192-128s-192 58.624-192 128 87.936 128 192 128c78.976 0 154.048 22.688 212.48 64H1024z\"></path></svg>',Wo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M576 736l96 96 320-320L672 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224z\"></path></svg>',Go='<svg viewBox=\"0 0 1024 1024\"><path d=\"M864 0a160 160 0 0 1 128 256l-64 64-224-224 64-64c26.752-20.096 59.968-32 96-32zM64 736l-64 288 288-64 592-592-224-224L64 736z m651.584-372.416l-448 448-55.168-55.168 448-448 55.168 55.168z\"></path></svg>',Uo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M924.402464 1023.068211H0.679665V99.345412h461.861399v98.909208H99.596867v725.896389h725.896389V561.206811h98.909208z\" p-id=\"10909\"></path><path d=\"M930.805104 22.977336l69.965436 69.965436-453.492405 453.492404-69.965435-69.901489z\" p-id=\"10910\"></path><path d=\"M1022.464381 304.030081h-98.917201V99.345412H709.230573V0.428211h313.233808z\"></path></svg>',Xo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M64 864h896v96H64zM360.58 576h302.85l81.53 224h102.16L579.24 64H444.77L176.89 800h102.16l81.53-224zM512 159.96L628.49 480H395.52L512 159.96z\"></path></svg>',Yo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M510.030769 315.076923l84.676923 196.923077h-177.230769l76.8-196.923077h15.753846zM945.230769 157.538462v708.923076c0 43.323077-35.446154 78.769231-78.769231 78.769231H157.538462c-43.323077 0-78.769231-35.446154-78.769231-78.769231V157.538462c0-43.323077 35.446154-78.769231 78.769231-78.769231h708.923076c43.323077 0 78.769231 35.446154 78.769231 78.769231z m-108.307692 643.938461L600.615385 216.615385c-5.907692-11.815385-15.753846-19.692308-29.538462-19.692308h-139.815385c-11.815385 0-23.630769 7.876923-27.56923 19.692308l-216.615385 584.861538c-3.938462 11.815385 3.938462 25.6 17.723077 25.6h80.738462c11.815385 0 23.630769-9.846154 27.56923-21.661538l63.015385-175.261539h263.876923l68.923077 175.261539c3.938462 11.815385 15.753846 21.661538 27.569231 21.661538h80.738461c13.784615 0 23.630769-13.784615 19.692308-25.6z\"></path></svg>',Jo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M64 512h384v128h-128V1024h-128V640h-128z m896-256H708.2496v768h-136.4992V256H320V128h640z\"></path></svg>',Ko='<svg viewBox=\"0 0 1024 1024\"><path d=\"M956.788364 152.110545h-24.110546l23.924364 9.029819 0.186182 121.018181h-65.070546l-86.574545-130.048H566.551273v650.14691l130.048 64.977454v65.163636h-390.050909v-65.163636l129.954909-64.977454V152.110545H198.283636L111.429818 282.065455H46.545455V69.259636C46.545455 33.792 82.664727 22.062545 98.955636 22.062545h812.683637c23.738182 0 45.056 15.173818 45.056 41.053091V169.425455v-17.221819z\"></path></svg>',Qo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m256-512v384l-256-192z\"></path></svg>',Zo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z\"></path></svg>',ti='<svg viewBox=\"0 0 1024 1024\"><path d=\"M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z\"></path></svg>',ei='<svg viewBox=\"0 0 1024 1024\"><path d=\"M972.8 793.6v102.4H256v-102.4h716.8z m0-230.4v102.4H51.2v-102.4h921.6z m0-230.4v102.4H256v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z\"></path></svg>',ni='<svg viewBox=\"0 0 1024 1024\"><path d=\"M870.4 793.6v102.4H153.6v-102.4h716.8z m102.4-230.4v102.4H51.2v-102.4h921.6z m-102.4-230.4v102.4H153.6v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z\"></path></svg>',ri='<svg viewBox=\"0 0 1024 1024\"><path d=\"M0 64h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z\"></path></svg>',oi='<svg viewBox=\"0 0 1024 1024\"><path d=\"M768 206.016v50.016h128v64h-192V174.016l128-60V64h-128V0h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z\"></path></svg>',ii='<svg viewBox=\"0 0 1024 1024\"><path d=\"M768 910.016v50.016h128v64h-192v-146.016l128-60V768h-128v-64h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z\"></path></svg>',ui=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"bold\",n.title=e.t(\"textStyle.bold\"),n.iconSvg=Fo,n.hotkey=\"mod+b\",n}return vo(n,t),n}(Ro),ai=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"code\",n.title=e.t(\"textStyle.code\"),n.iconSvg=Wo,n.hotkey=\"mod+e\",n}return vo(n,t),n}(Ro),ci=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"italic\",n.title=e.t(\"textStyle.italic\"),n.iconSvg=qo,n.hotkey=\"mod+i\",n}return vo(n,t),n}(Ro),li=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"through\",n.title=e.t(\"textStyle.through\"),n.iconSvg=$o,n.hotkey=\"mod+shift+x\",n}return vo(n,t),n}(Ro),si=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"underline\",n.title=e.t(\"textStyle.underline\"),n.iconSvg=_o,n.hotkey=\"mod+u\",n}return vo(n,t),n}(Ro),fi=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"sub\",n.marksNeedToRemove=[\"sup\"],n.title=e.t(\"textStyle.sub\"),n.iconSvg=ii,n.hotkey=\"\",n}return vo(n,t),n}(Ro),di=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.mark=\"sup\",n.marksNeedToRemove=[\"sub\"],n.title=e.t(\"textStyle.sup\"),n.iconSvg=oi,n.hotkey=\"\",n}return vo(n,t),n}(Ro),pi=function(){function t(){this.title=e.t(\"textStyle.clear\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M969.382408 288.738615l-319.401123-270.852152a67.074236 67.074236 0 0 0-96.459139 5.74922l-505.931379 574.922021a68.35184 68.35184 0 0 0-17.886463 47.910169 74.101061 74.101061 0 0 0 24.274486 47.910168l156.50655 132.232065h373.060512L975.131628 383.281347a67.074236 67.074236 0 0 0-5.74922-96.459139z m-440.134747 433.746725H264.144729l-90.071117-78.572676c-5.74922-5.74922-12.137243-12.137243-12.137243-17.886463a36.411728 36.411728 0 0 1 5.749221-24.274485l210.804741-240.828447 265.102932 228.691204z m-439.495945 180.781036h843.218964a60.047411 60.047411 0 1 1 0 120.733624H89.751716a60.047411 60.047411 0 1 1 0-120.733624z m0 0\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return Vo(t)},t.prototype.exec=function(t,e){var n,o,i=r.Editor.nodes(t,{match:function(t){return r.Text.isText(t)},universal:!0});try{for(var u=bo(i),a=u.next();!a.done;a=u.next()){Bo(t,a.value[0]);}}catch(t){n={error:t};}finally{try{a&&!a.done&&(o=u.return)&&o.call(u);}finally{if(n)throw n.error}}},t}(),hi={renderStyle:function(t,e){var r=t,o=r.bold,i=r.italic,u=r.underline,a=r.code,c=r.through,l=r.sub,s=r.sup,f=e;return o&&(f=n.jsx(\"strong\",null,f)),a&&(f=n.jsx(\"code\",null,f)),i&&(f=n.jsx(\"em\",null,f)),u&&(f=n.jsx(\"u\",null,f)),c&&(f=n.jsx(\"s\",null,f)),l&&(f=n.jsx(\"sub\",null,f)),s&&(f=n.jsx(\"sup\",null,f)),f},menus:[{key:\"bold\",factory:function(){return new ui}},{key:\"underline\",factory:function(){return new si}},{key:\"italic\",factory:function(){return new ci}},{key:\"through\",factory:function(){return new li}},{key:\"code\",factory:function(){return new ai}},{key:\"sub\",factory:function(){return new fi}},{key:\"sup\",factory:function(){return new di}},{key:\"clearStyle\",factory:function(){return new pi}}],styleToHtml:function(t,e){if(!r.Text.isText(t))return e;if(lo(e))return Io(t,e);var n=c.default(e);if(\"br\"===fo(n))return Io(t,\"<br>\");var o=n.html();return o=Io(t,o),n.html(o),so(n)},parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Text.isText(e))return e;var i=e;return No(o,\"b,strong\")&&(i.bold=!0),No(o,\"i,em\")&&(i.italic=!0),No(o,\"u\")&&(i.underline=!0),No(o,\"s,strike\")&&(i.through=!0),No(o,\"sub\")&&(i.sub=!0),No(o,\"sup\")&&(i.sup=!0),No(o,\"code\")&&(i.code=!0),i}};function vi(t){return function(e,r,o){var i=\"h\"+t;return n.jsx(i,null,r)}}var gi={type:\"header1\",renderElem:vi(1)},mi={type:\"header2\",renderElem:vi(2)},yi={type:\"header3\",renderElem:vi(3)},bi={type:\"header4\",renderElem:vi(4)},xi={type:\"header5\",renderElem:vi(5)},wi=de.PROPER,Ei=\"toString\",Si=RegExp.prototype,ki=Si.toString,Ti=D(xn),Mi=b((function(){return \"/a/b\"!=ki.call({source:\"a\",flags:\"b\"})})),Ii=wi&&ki.name!=Ei;(Mi||Ii)&&pe(RegExp.prototype,Ei,(function(){var t=Bt(this),e=bn(t.source),n=t.flags;return \"/\"+e+\"/\"+bn(void 0===n&&G(Si,t)&&!(\"flags\"in Si)?Ti(t):n)}),{unsafe:!0});var Ni,Hi=y.TypeError,Oi=function(t){if(Cr(t))throw Hi(\"The method doesn't accept regular expressions\");return t},ji=Mt(\"match\"),Di=function(t){var e=/./;try{\"/./\"[t](e);}catch(n){try{return e[ji]=!1,\"/./\"[t](e)}catch(t){}}return !1},Li=Pt.f,zi=D(\"\".startsWith),Ai=D(\"\".slice),Pi=Math.min,Ci=Di(\"startsWith\");function Vi(t){var n=xo(r.Editor.nodes(t,{match:function(t){return e.DomEditor.getNodeType(t).startsWith(\"header\")},universal:!0}),1),o=n[0];if(null==o)return \"paragraph\";var i=xo(o,1)[0];return e.DomEditor.getNodeType(i)}function Bi(t){return null==t.selection||!xo(r.Editor.nodes(t,{match:function(t){var n=e.DomEditor.getNodeType(t);return \"paragraph\"===n||!!n.startsWith(\"header\")},universal:!0,mode:\"highest\"}),1)[0]}function Ri(t,e){e&&r.Transforms.setNodes(t,{type:e});}qe({target:\"String\",proto:!0,forced:!!(Ci||(Ni=Li(String.prototype,\"startsWith\"),!Ni||Ni.writable))&&!Ci},{startsWith:function(t){var e=bn(R(this));Oi(t);var n=we(Pi(arguments.length>1?arguments[1]:void 0,e.length)),r=bn(t);return zi?zi(e,r,n):Ai(e,n,n+r.length)===r}});var Fi=function(){function t(){this.title=e.t(\"header.title\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M960 960c-51.2 0-102.4-3.2-153.6-3.2-51.2 0-99.2 3.2-150.4 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 57.6-28.8 86.4-48 19.2-12.8 19.2-60.8 19.2-80v-224-19.2c-9.6-3.2-19.2-3.2-28.8-3.2H320c-9.6 0-19.2 0-28.8 3.2V780.8c0 22.4 0 80 22.4 92.8 28.8 19.2 96-6.4 96 44.8 0 16-9.6 41.6-28.8 41.6-54.4 0-105.6-3.2-160-3.2-48 0-96 3.2-147.2 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 51.2-28.8 80-48 19.2-12.8 19.2-60.8 19.2-83.2V294.4c0-28.8 3.2-115.2-22.4-131.2-25.6-16-86.4 9.6-86.4-41.6 0-16 6.4-41.6 28.8-41.6 51.2 0 105.6 3.2 156.8 3.2 48 0 96-3.2 144-3.2 19.2 0 28.8 22.4 28.8 41.6 0 48-57.6 25.6-83.2 41.6-19.2 12.8-19.2 73.6-19.2 92.8v201.6c6.4 3.2 16 3.2 22.4 3.2h400c6.4 0 12.8 0 22.4-3.2V256c0-22.4 0-80-19.2-92.8-28.8-16-86.4 6.4-86.4-41.6 0-16 9.6-41.6 28.8-41.6 51.2 0 99.2 3.2 150.4 3.2 48 0 99.2-3.2 147.2-3.2 19.2 0 28.8 22.4 28.8 41.6 0 51.2-57.6 25.6-86.4 41.6-19.2 12.8-19.2 70.4-19.2 92.8v537.6c0 19.2 0 67.2 19.2 80 28.8 19.2 89.6-6.4 89.6 44.8 0 19.2-6.4 41.6-28.8 41.6z\"></path></svg>',this.tag=\"select\",this.width=60;}return t.prototype.getOptions=function(t){var n=[{value:\"header1\",text:\"H1\",styleForRenderMenuList:{\"font-size\":\"32px\",\"font-weight\":\"bold\"}},{value:\"header2\",text:\"H2\",styleForRenderMenuList:{\"font-size\":\"24px\",\"font-weight\":\"bold\"}},{value:\"header3\",text:\"H3\",styleForRenderMenuList:{\"font-size\":\"18px\",\"font-weight\":\"bold\"}},{value:\"header4\",text:\"H4\",styleForRenderMenuList:{\"font-size\":\"16px\",\"font-weight\":\"bold\"}},{value:\"header5\",text:\"H5\",styleForRenderMenuList:{\"font-size\":\"13px\",\"font-weight\":\"bold\"}},{value:\"paragraph\",text:e.t(\"header.text\")}],r=this.getValue(t).toString();return n.forEach((function(t){t.value===r?t.selected=!0:delete t.selected;})),n},t.prototype.isActive=function(t){return !1},t.prototype.getValue=function(t){return Vi(t)},t.prototype.isDisabled=function(t){return Bi(t)},t.prototype.exec=function(t,e){Ri(t,e.toString());},t}(),_i=function(){function t(){this.tag=\"button\";}return t.prototype.getValue=function(t){return Vi(t)},t.prototype.isActive=function(t){return this.getValue(t)===this.type},t.prototype.isDisabled=function(t){return Bi(t)},t.prototype.exec=function(t,e){var n=this.type;Ri(t,e===n?\"paragraph\":n);},t}(),qi=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"H1\",e.type=\"header1\",e}return vo(e,t),e}(_i),$i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"H2\",e.type=\"header2\",e}return vo(e,t),e}(_i),Wi=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"H3\",e.type=\"header3\",e}return vo(e,t),e}(_i),Gi=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"H4\",e.type=\"header4\",e}return vo(e,t),e}(_i),Ui=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"H5\",e.type=\"header5\",e}return vo(e,t),e}(_i),Xi={key:\"headerSelect\",factory:function(){return new Fi}},Yi={key:\"header1\",factory:function(){return new qi}},Ji={key:\"header2\",factory:function(){return new $i}},Ki={key:\"header3\",factory:function(){return new Wi}},Qi={key:\"header4\",factory:function(){return new Gi}},Zi={key:\"header5\",factory:function(){return new Ui}};function tu(t){return function(e,n){return \"<h\"+t+\">\"+n+\"</h\"+t+\">\"}}function eu(t){return function(e,n,o){var i=c.default(e);return 0===(n=n.filter((function(t){return !!r.Text.isText(t)||!!o.isInline(t)}))).length&&(n=[{text:i.text().replace(/\\s+/gm,\" \")}]),{type:\"header\"+t,children:n}}}var nu={renderElems:[gi,mi,yi,bi,xi],elemsToHtml:[{type:\"header1\",elemToHtml:tu(1)},{type:\"header2\",elemToHtml:tu(2)},{type:\"header3\",elemToHtml:tu(3)},{type:\"header4\",elemToHtml:tu(4)},{type:\"header5\",elemToHtml:tu(5)}],parseElemsHtml:[{selector:\"h1:not([data-w-e-type])\",parseElemHtml:eu(1)},{selector:\"h2:not([data-w-e-type])\",parseElemHtml:eu(2)},{selector:\"h3:not([data-w-e-type])\",parseElemHtml:eu(3)},{selector:\"h4:not([data-w-e-type])\",parseElemHtml:eu(4)},{selector:\"h5:not([data-w-e-type])\",parseElemHtml:eu(5)}],menus:[Xi,Yi,Ji,Ki,Qi,Zi],editorPlugin:function(t){var n=t.insertBreak;t.insertNode;var o=t;return o.insertBreak=function(){var i=xo(r.Editor.nodes(o,{match:function(t){return e.DomEditor.getNodeType(t).startsWith(\"header\")},universal:!0}),1)[0];if(i)if(e.DomEditor.isSelectionAtLineEnd(t,i[1])){r.Transforms.insertNodes(o,{type:\"paragraph\",children:[{text:\"\"}]},{mode:\"highest\"});}else n();else n();},o}},ru=Object.assign,ou=Object.defineProperty,iu=D([].concat),uu=!ru||b((function(){if(x&&1!==ru({b:1},ru(ou({},\"a\",{enumerable:!0,get:function(){ou(this,\"b\",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var t={},e={},n=Symbol(),r=\"abcdefghijklmnopqrst\";return t[n]=7,r.split(\"\").forEach((function(t){e[t]=t;})),7!=ru({},t)[n]||Tn(ru({},e)).join(\"\")!=r}))?function(t,e){for(var n=vt(t),r=arguments.length,o=1,i=je.f,u=M.f;r>o;)for(var a,c=V(arguments[o++]),l=i?iu(Tn(c),i(c)):Tn(c),s=l.length,f=0;s>f;)a=l[f++],x&&!E(u,c,a)||(n[a]=c[a]);return n}:ru;function au(t,e){null==t.data&&(t.data={});var n=t.data;null==n.style&&(n.style={}),Object.assign(n.style,e);}qe({target:\"Object\",stat:!0,forced:Object.assign!==uu},{assign:uu});var cu={selector:\"font\",preParseHtml:function(t){var e=c.default(t);if(\"font\"!==fo(e))return t;var n=e.attr(\"color\")||\"\";return n&&(e.removeAttr(\"color\"),e.css(\"color\",n)),e[0]}};var lu=function(){function t(){this.tag=\"button\",this.showDropPanel=!0,this.$content=null;}return t.prototype.exec=function(t,e){},t.prototype.getValue=function(t){var e=this.mark,n=r.Editor.marks(t);return n&&n[e]?n[e]:\"\"},t.prototype.isActive=function(t){return !!this.getValue(t)},t.prototype.isDisabled=function(t){return null==t.selection||!!xo(r.Editor.nodes(t,{match:function(n){return \"pre\"===e.DomEditor.getNodeType(n)||!!r.Editor.isVoid(t,n)},universal:!0}),1)[0]},t.prototype.getPanelContentElem=function(t){var n=this.mark;if(null==this.$content){var o=c.default('<ul class=\"w-e-panel-content-color\"></ul>');o.on(\"click\",\"li\",(function(e){var o=e.target;if(null!=o&&(e.preventDefault(),null!=t.selection)){var i=c.default(o).attr(\"data-value\");\"0\"===i?r.Editor.removeMark(t,n):r.Editor.addMark(t,n,i);}})),this.$content=o;}var i=this.$content;if(null==i)return document.createElement(\"ul\");i.empty();var u=this.getValue(t),a=t.getMenuConfig(n).colors;(void 0===a?[]:a).forEach((function(t){var e=c.default('<div class=\"color-block\" data-value=\"'+t+'\"></div>');e.css(\"background-color\",t);var n=c.default('<li data-value=\"'+t+'\"></li>');u===t&&n.addClass(\"active\"),n.append(e),i.append(n);}));var l=\"\";\"color\"===n&&(l=e.t(\"color.default\")),\"bgColor\"===n&&(l=e.t(\"color.clear\"));var s=c.default('\\n      <li data-value=\"0\" class=\"clear\">\\n        <svg viewBox=\"0 0 1024 1024\"><path d=\"M236.8 128L896 787.2V128H236.8z m614.4 704L192 172.8V832h659.2zM192 64h704c38.4 0 64 25.6 64 64v704c0 38.4-25.6 64-64 64H192c-38.4 0-64-25.6-64-64V128c0-38.4 25.6-64 64-64z\"></path></svg>\\n        '+l+\"\\n      </li>\\n    \");return i.prepend(s),i[0]},t}(),su=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"color.color\"),n.iconSvg=Xo,n.mark=\"color\",n}return vo(n,t),n}(lu),fu=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"color.bgColor\"),n.iconSvg=Yo,n.mark=\"bgColor\",n}return vo(n,t),n}(lu),du=[\"rgb(0, 0, 0)\",\"rgb(38, 38, 38)\",\"rgb(89, 89, 89)\",\"rgb(140, 140, 140)\",\"rgb(191, 191, 191)\",\"rgb(217, 217, 217)\",\"rgb(233, 233, 233)\",\"rgb(245, 245, 245)\",\"rgb(250, 250, 250)\",\"rgb(255, 255, 255)\",\"rgb(225, 60, 57)\",\"rgb(231, 95, 51)\",\"rgb(235, 144, 58)\",\"rgb(245, 219, 77)\",\"rgb(114, 192, 64)\",\"rgb(89, 191, 192)\",\"rgb(66, 144, 247)\",\"rgb(54, 88, 226)\",\"rgb(106, 57, 201)\",\"rgb(216, 68, 147)\",\"rgb(251, 233, 230)\",\"rgb(252, 237, 225)\",\"rgb(252, 239, 212)\",\"rgb(252, 251, 207)\",\"rgb(231, 246, 213)\",\"rgb(218, 244, 240)\",\"rgb(217, 237, 250)\",\"rgb(224, 232, 250)\",\"rgb(237, 225, 248)\",\"rgb(246, 226, 234)\",\"rgb(255, 163, 158)\",\"rgb(255, 187, 150)\",\"rgb(255, 213, 145)\",\"rgb(255, 251, 143)\",\"rgb(183, 235, 143)\",\"rgb(135, 232, 222)\",\"rgb(145, 213, 255)\",\"rgb(173, 198, 255)\",\"rgb(211, 173, 247)\",\"rgb(255, 173, 210)\",\"rgb(255, 77, 79)\",\"rgb(255, 122, 69)\",\"rgb(255, 169, 64)\",\"rgb(255, 236, 61)\",\"rgb(115, 209, 61)\",\"rgb(54, 207, 201)\",\"rgb(64, 169, 255)\",\"rgb(89, 126, 247)\",\"rgb(146, 84, 222)\",\"rgb(247, 89, 171)\",\"rgb(207, 19, 34)\",\"rgb(212, 56, 13)\",\"rgb(212, 107, 8)\",\"rgb(212, 177, 6)\",\"rgb(56, 158, 13)\",\"rgb(8, 151, 156)\",\"rgb(9, 109, 217)\",\"rgb(29, 57, 196)\",\"rgb(83, 29, 171)\",\"rgb(196, 29, 127)\",\"rgb(130, 0, 20)\",\"rgb(135, 20, 0)\",\"rgb(135, 56, 0)\",\"rgb(97, 71, 0)\",\"rgb(19, 82, 0)\",\"rgb(0, 71, 79)\",\"rgb(0, 58, 140)\",\"rgb(6, 17, 120)\",\"rgb(34, 7, 94)\",\"rgb(120, 6, 80)\"];var pu={renderStyle:function(t,e){var n=t,r=n.color,o=n.bgColor,i=e;return r&&au(i,{color:r}),o&&au(i,{backgroundColor:o}),i},styleToHtml:function(t,e){if(!r.Text.isText(t))return e;var n,o=t,i=o.color,u=o.bgColor;return i||u?((lo(e)||\"span\"!==fo(n=c.default(e)))&&(n=c.default(\"<span>\"+e+\"</span>\")),i&&n.css(\"color\",i),u&&n.css(\"background-color\",u),so(n)):e},preParseHtml:[cu],parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Text.isText(e))return e;var i=e,u=po(o,\"color\");u&&(i.color=u);var a=po(o,\"background-color\");return a||(a=po(o,\"background\")),a&&(i.bgColor=a),i},menus:[{key:\"color\",factory:function(){return new su},config:{colors:du}},{key:\"bgColor\",factory:function(){return new fu},config:{colors:du}}]},hu=function(t){if(\"string\"!=typeof t)return !1;var e=t.match(vu);if(!e)return !1;var n=e[1];if(!n)return !1;if(gu.test(n)||mu.test(n))return !0;return !1},vu=/^(?:\\w+:)?\\/\\/(\\S+)$/,gu=/^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/,mu=/^[^\\s\\.]+\\.\\S{2,}$/;var yu=ke.includes;function bu(t){return void 0===t&&(t=\"r\"),t+\"-\"+i.nanoid()}function xu(t){return t.replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")}function wu(t,e,n,r){return mo(this,void 0,void 0,(function(){var o,i;return yo(this,(function(u){switch(u.label){case 0:return (o=e.getMenuConfig(t).checkLink)?[4,o(n,r)]:[3,2];case 1:if(\"string\"==typeof(i=u.sent()))return e.alert(i,\"error\"),[2,!1];if(null==i)return [2,!1];u.label=2;case 2:return [2,!0]}}))}))}function Eu(t,e,n){return mo(this,void 0,void 0,(function(){var r;return yo(this,(function(o){switch(o.label){case 0:return (r=e.getMenuConfig(t).parseLinkUrl)?[4,r(n)]:[3,2];case 1:return [2,o.sent()];case 2:return [2,n]}}))}))}function Su(t){return null==t.selection||!!e.DomEditor.getSelectedElems(t).some((function(e){var n=e.type;return !!t.isVoid(e)||(!![\"pre\",\"code\",\"link\"].includes(n)||void 0)}))}function ku(t,e){return {type:\"link\",url:xu(t),children:e?[{text:e}]:[]}}function Tu(t,e,n){return mo(this,void 0,void 0,(function(){var o,i,u;return yo(this,(function(a){switch(a.label){case 0:return n?(e||(e=n),t.restoreSelection(),Su(t)?[2]:[4,wu(\"insertLink\",t,e,n)]):[2];case 1:return a.sent()?[4,Eu(\"insertLink\",t,n)]:[2];case 2:return o=a.sent(),null==(i=t.selection)?[2]:(r.Range.isCollapsed(i)?(t.insertText(\" \"),u=ku(o,e),r.Transforms.insertNodes(t,u),t.insertFragment([{text:\" \"}])):r.Editor.string(t,i)!==e?(t.deleteFragment(),u=ku(o,e),r.Transforms.insertNodes(t,u)):(u=ku(o),r.Transforms.wrapNodes(t,u,{split:!0}),r.Transforms.collapse(t,{edge:\"end\"})),[2])}}))}))}qe({target:\"Array\",proto:!0},{includes:function(t){return yu(this,t,arguments.length>1?arguments[1]:void 0)}}),Dr(\"includes\");var Mu={type:\"link\",renderElem:function(t,e,r){var o=t,i=o.url,u=o.target,a=void 0===u?\"_blank\":u;return n.jsx(\"a\",{href:i,target:a},e)}};var Iu={type:\"link\",elemToHtml:function(t,e){var n=t,r=n.url,o=n.target;return '<a href=\"'+r+'\" target=\"'+(void 0===o?\"_blank\":o)+'\">'+e+\"</a>\"}};var Nu={selector:\"a:not([data-w-e-type])\",parseElemHtml:function(t,e,n){var o=c.default(t);return 0===(e=e.filter((function(t){return !!r.Text.isText(t)||!!n.isInline(t)}))).length&&(e=[{text:o.text().replace(/\\s+/gm,\" \")}]),{type:\"link\",url:o.attr(\"href\")||\"\",target:o.attr(\"target\")||\"\",children:e}}};function Hu(){return bu(\"w-e-insert-link\")}var Ou=function(){function t(){this.title=e.t(\"link.insert\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M440.224 635.776a51.84 51.84 0 0 1-36.768-15.232c-95.136-95.136-95.136-249.92 0-345.056l192-192C641.536 37.408 702.816 12.032 768 12.032s126.432 25.376 172.544 71.456c95.136 95.136 95.136 249.92 0 345.056l-87.776 87.776a51.968 51.968 0 1 1-73.536-73.536l87.776-87.776a140.16 140.16 0 0 0 0-197.984c-26.432-26.432-61.6-40.992-99.008-40.992s-72.544 14.56-99.008 40.992l-192 192a140.16 140.16 0 0 0 0 197.984 51.968 51.968 0 0 1-36.768 88.768z\"></path><path d=\"M256 1012a242.4 242.4 0 0 1-172.544-71.456c-95.136-95.136-95.136-249.92 0-345.056l87.776-87.776a51.968 51.968 0 1 1 73.536 73.536l-87.776 87.776a140.16 140.16 0 0 0 0 197.984c26.432 26.432 61.6 40.992 99.008 40.992s72.544-14.56 99.008-40.992l192-192a140.16 140.16 0 0 0 0-197.984 51.968 51.968 0 1 1 73.536-73.536c95.136 95.136 95.136 249.92 0 345.056l-192 192A242.4 242.4 0 0 1 256 1012z\"></path></svg>',this.tag=\"button\",this.showModal=!0,this.modalWidth=300,this.$content=null,this.textInputId=Hu(),this.urlInputId=Hu(),this.buttonId=Hu();}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.exec=function(t,e){},t.prototype.isDisabled=function(t){return Su(t)},t.prototype.getModalPositionNode=function(t){return null},t.prototype.getModalContentElem=function(t){var n=t.selection,o=this,i=o.textInputId,u=o.urlInputId,a=o.buttonId,l=xo(e.genModalInputElems(e.t(\"link.text\"),i),2),s=l[0],f=l[1],d=c.default(f),p=xo(e.genModalInputElems(e.t(\"link.url\"),u),2),h=p[0],v=p[1],g=c.default(v),m=xo(e.genModalButtonElems(a,e.t(\"common.ok\")),1)[0];if(null==this.$content){var y=c.default(\"<div></div>\");y.on(\"click\",\"#\"+a,(function(e){e.preventDefault();var n=y.find(\"#\"+i).val(),r=y.find(\"#\"+u).val();Tu(t,n,r),t.hidePanelOrModal();})),this.$content=y;}var b=this.$content;if(b.empty(),b.append(s),b.append(h),b.append(m),null==n||r.Range.isCollapsed(n))d.val(\"\");else {var x=r.Editor.string(t,n);d.val(x);}return g.val(\"\"),setTimeout((function(){d.focus();})),b[0]},t}();function ju(){return bu(\"w-e-update-link\")}var Du=function(){function t(){this.title=e.t(\"link.edit\"),this.iconSvg=Go,this.tag=\"button\",this.showModal=!0,this.modalWidth=300,this.$content=null,this.urlInputId=ju(),this.buttonId=ju();}return t.prototype.getSelectedLinkElem=function(t){var n=e.DomEditor.getSelectedNodeByType(t,\"link\");return null==n?null:n},t.prototype.getValue=function(t){var e=this.getSelectedLinkElem(t);return e&&e.url||\"\"},t.prototype.isActive=function(t){return !1},t.prototype.exec=function(t,e){},t.prototype.isDisabled=function(t){return null==t.selection||null==this.getSelectedLinkElem(t)},t.prototype.getModalPositionNode=function(t){return e.DomEditor.getSelectedNodeByType(t,\"link\")},t.prototype.getModalContentElem=function(t){var n=this.urlInputId,o=this.buttonId,i=xo(e.genModalInputElems(e.t(\"link.url\"),n),2),u=i[0],a=i[1],l=c.default(a),s=xo(e.genModalButtonElems(o,e.t(\"common.ok\")),1)[0];if(null==this.$content){var f=c.default(\"<div></div>\");f.on(\"click\",\"button\",(function(o){o.preventDefault(),t.restoreSelection();var i=e.DomEditor.getSelectedNodeByType(t,\"link\"),u=i?r.Node.string(i):\"\",a=f.find(\"#\"+n).val();!function(t,n,o){mo(this,void 0,void 0,(function(){var i,u;return yo(this,(function(a){switch(a.label){case 0:return o?[4,wu(\"editLink\",t,n,o)]:[2];case 1:return a.sent()?[4,Eu(\"editLink\",t,o)]:[2];case 2:return i=a.sent(),u={url:xu(i)},r.Transforms.setNodes(t,u,{match:function(t){return e.DomEditor.checkNodeType(t,\"link\")}}),[2]}}))}));}(t,u,a),t.hidePanelOrModal();})),this.$content=f;}var d=this.$content;d.empty(),d.append(u),d.append(s);var p=this.getValue(t);return l.val(p),setTimeout((function(){l.focus();})),d[0]},t}(),Lu=function(){function t(){this.title=e.t(\"link.unLink\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M608.16328 811.815036c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.347563 89.347564c-118.525421 118.523421-311.38448 118.531421-429.919901 0-118.527421-118.529421-118.527421-311.39048 0-429.917901l89.349564-89.349563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.195613 79.195613c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.349563 89.347564c-56.143726 56.145726-56.143726 147.49928 0 203.645005 56.143726 56.143726 147.49928 56.145726 203.647005 0l89.347564-89.347563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.193613 79.195613z m-113.135447-520.429459c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.347564-89.347564c56.143726-56.149726 147.49928-56.145726 203.647006 0 56.143726 56.145726 56.143726 147.49928 0 203.645006l-89.349564 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.195613 79.195613c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.349564-89.349563c118.529421-118.529421 118.529421-311.38848 0-429.917901-118.531421-118.527421-311.38848-118.527421-429.919901 0l-89.347563 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.193613 79.195613z m469.653707 718.556492l45.253779-45.253779c18.745908-18.745908 18.745908-49.13776 0-67.881669L127.195629 14.062931c-18.745908-18.745908-49.13776-18.745908-67.881669 0L14.058181 59.31871c-18.745908 18.745908-18.745908 49.13776 0 67.881669l882.74169 882.74169c18.745908 18.743908 49.13776 18.743908 67.881669 0z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||null==e.DomEditor.getSelectedNodeByType(t,\"link\")},t.prototype.exec=function(t,n){this.isDisabled(t)||r.Transforms.unwrapNodes(t,{match:function(t){return e.DomEditor.checkNodeType(t,\"link\")}});},t}(),zu=function(){function t(){this.title=e.t(\"link.view\"),this.iconSvg=Uo,this.tag=\"button\";}return t.prototype.getSelectedLinkElem=function(t){var n=e.DomEditor.getSelectedNodeByType(t,\"link\");return null==n?null:n},t.prototype.getValue=function(t){var e=this.getSelectedLinkElem(t);return e&&e.url||\"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||null==this.getSelectedLinkElem(t)},t.prototype.exec=function(t,e){if(!this.isDisabled(t)){if(!e||\"string\"!=typeof e)throw new Error(\"View link failed, link url is '\"+e+\"'\");window.open(e,\"_blank\");}},t}();var Au={checkLink:function(t,e){return !0},parseLinkUrl:function(t){return t}},Pu={renderElems:[Mu],elemsToHtml:[Iu],parseElemsHtml:[Nu],menus:[{key:\"insertLink\",factory:function(){return new Ou},config:Au},{key:\"editLink\",factory:function(){return new Du},config:Au},{key:\"unLink\",factory:function(){return new Lu}},{key:\"viewLink\",factory:function(){return new zu}}],editorPlugin:function(t){var n=t.isInline,o=t.insertData,i=t.normalizeNode;t.insertNode,t.insertText;var u=t;return u.isInline=function(t){return \"link\"===t.type||n(t)},u.insertData=function(t){var e=t.getData(\"text/plain\");if(hu(e)){if(!Su(u)){var n=u.selection;if(null!=n){var i=r.Editor.string(u,n);Tu(u,i,e);}}}else o(t);},u.normalizeNode=function(t){var n=xo(t,2),o=n[0],a=n[1];return \"link\"!==e.DomEditor.getNodeType(o)?i([o,a]):\"\"===r.Node.string(o)?r.Transforms.removeNodes(u,{at:a}):i([o,a])},u}};var Cu=D(1..valueOf),Vu=y.RangeError,Bu=y.RangeError,Ru=y.String,Fu=Math.floor,_u=D((function(t){var e=bn(R(this)),n=\"\",r=ge(t);if(r<0||r==1/0)throw Vu(\"Wrong number of repetitions\");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n})),qu=D(\"\".slice),$u=D(1..toFixed),Wu=function(t,e,n){return 0===e?n:e%2==1?Wu(t,e-1,n*t):Wu(t*t,e/2,n)},Gu=function(t,e,n){for(var r=-1,o=n;++r<6;)o+=e*t[r],t[r]=o%1e7,o=Fu(o/1e7);},Uu=function(t,e){for(var n=6,r=0;--n>=0;)r+=t[n],t[n]=Fu(r/e),r=r%e*1e7;},Xu=function(t){for(var e=6,n=\"\";--e>=0;)if(\"\"!==n||0===e||0!==t[e]){var r=Ru(t[e]);n=\"\"===n?r:n+_u(\"0\",7-r.length)+r;}return n};function Yu(t,n){return \"w-e-image-container-\"+e.DomEditor.findKey(t,n).id}function Ju(t,o,i,u){var a=c.default(\"body\"),s=Yu(t,o),f=u.width,d=u.height,p=0,h=0,v=0,g=!1,m=null;function y(n){m=function(){var t=c.default(\"#\"+s);if(0===t.length)throw new Error(\"Cannot find image container elem\");return t}(),p=n;var r=m.find(\"img\");if(0===r.length)throw new Error(\"Cannot find image elem\");h=r.width(),v=r.height(),a.on(\"mousemove\",b),a.on(\"mouseup\",x);var o=e.DomEditor.getHoverbar(t);o&&o.hideAndClean();}var b=l.default((function(t){t.preventDefault();var e=t.clientX,n=h+(g?p-e:e-p),r=v*(n/h);null!=m&&(n<=15||r<=15||(m.css(\"width\",n+\"px\"),m.css(\"height\",r+\"px\")));}),100);function x(n){if(a.off(\"mousemove\",b),null!=m){var i=m.width().toFixed(2),u=m.height().toFixed(2),c={style:go(go({},o.style),{width:i+\"px\",height:u+\"px\"})};r.Transforms.setNodes(t,c,{at:e.DomEditor.findPath(t,o)}),a.off(\"mouseup\",x);}}var w={};return f&&(w.width=f),d&&(w.height=d),n.jsx(\"div\",{id:s,style:w,className:\"w-e-image-container w-e-selected-image-container\",on:{mousedown:function(t){var e=c.default(t.target);e.hasClass(\"w-e-image-dragger\")&&(t.preventDefault(),(e.hasClass(\"left-top\")||e.hasClass(\"left-bottom\"))&&(g=!0),y(t.clientX));}}},i,n.jsx(\"div\",{className:\"w-e-image-dragger left-top\"}),n.jsx(\"div\",{className:\"w-e-image-dragger right-top\"}),n.jsx(\"div\",{className:\"w-e-image-dragger left-bottom\"}),n.jsx(\"div\",{className:\"w-e-image-dragger right-bottom\"}))}qe({target:\"Number\",proto:!0,forced:b((function(){return \"0.000\"!==$u(8e-5,3)||\"1\"!==$u(.9,0)||\"1.25\"!==$u(1.255,2)||\"1000000000000000128\"!==$u(0xde0b6b3a7640080,0)}))||!b((function(){$u({});}))},{toFixed:function(t){var e,n,r,o,i=Cu(this),u=ge(t),a=[0,0,0,0,0,0],c=\"\",l=\"0\";if(u<0||u>20)throw Bu(\"Incorrect fraction digits\");if(i!=i)return \"NaN\";if(i<=-1e21||i>=1e21)return Ru(i);if(i<0&&(c=\"-\",i=-i),i>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(i*Wu(2,69,1))-69)<0?i*Wu(2,-e,1):i/Wu(2,e,1),n*=4503599627370496,(e=52-e)>0){for(Gu(a,0,n),r=u;r>=7;)Gu(a,1e7,0),r-=7;for(Gu(a,Wu(10,r,1),0),r=e-1;r>=23;)Uu(a,1<<23),r-=23;Uu(a,1<<r),Gu(a,1,1),Uu(a,2),l=Xu(a);}else Gu(a,0,n),Gu(a,1<<-e,0),l=Xu(a)+_u(\"0\",u);return l=u>0?c+((o=l.length)<=u?\"0.\"+_u(\"0\",u-o)+l:qu(l,0,o-u)+\".\"+qu(l,o-u)):c+l}});var Ku={type:\"image\",renderElem:function(t,r,o){var i=t,u=i.src,a=i.alt,c=void 0===a?\"\":a,l=i.href,s=void 0===l?\"\":l,f=i.style,d=void 0===f?{}:f,p=d.width,h=void 0===p?\"\":p,v=d.height,g=void 0===v?\"\":v,m=e.DomEditor.isNodeSelected(o,t),y={};h&&(y.width=\"100%\"),g&&(y.height=\"100%\");var b=n.jsx(\"img\",{style:y,src:u,alt:c,\"data-href\":s}),x=o.isDisabled();return m&&!x?Ju(o,t,b,{width:h,height:g}):function(t,e,r,o){var i=o.width,u=o.height,a={};i&&(a.width=i),u&&(a.height=u);var c=Yu(t,e);return n.jsx(\"div\",{id:c,style:a,className:\"w-e-image-container\"},r)}(o,t,b,{width:h,height:g})}};var Qu={type:\"image\",elemToHtml:function(t,e){var n=t,r=n.src,o=n.alt,i=void 0===o?\"\":o,u=n.href,a=void 0===u?\"\":u,c=n.style,l=void 0===c?{}:c,s=l.width,f=void 0===s?\"\":s,d=l.height,p=void 0===d?\"\":d,h=\"\";return f&&(h+=\"width: \"+f+\";\"),p&&(h+=\"height: \"+p+\";\"),'<img src=\"'+r+'\" alt=\"'+i+'\" data-href=\"'+a+'\" style=\"'+h+'\"/>'}};var Zu={selector:\"img:not([data-w-e-type])\",parseElemHtml:function(t,e,n){var r=c.default(t),o=r.attr(\"data-href\")||\"\";return o=decodeURIComponent(o),{type:\"image\",src:r.attr(\"src\")||\"\",alt:r.attr(\"alt\")||\"\",href:o,style:{width:po(r,\"width\"),height:po(r,\"height\")},children:[{text:\"\"}]}}};function ta(t,e,n,r,o){return void 0===r&&(r=\"\"),void 0===o&&(o=\"\"),mo(this,void 0,void 0,(function(){var i,u;return yo(this,(function(a){switch(a.label){case 0:return (i=e.getMenuConfig(t).checkImage)?[4,i(n,r,o)]:[3,2];case 1:if(\"string\"==typeof(u=a.sent()))return e.alert(u,\"error\"),[2,!1];if(null==u)return [2,!1];a.label=2;case 2:return [2,!0]}}))}))}function ea(t,e,n){return mo(this,void 0,void 0,(function(){var r;return yo(this,(function(o){switch(o.label){case 0:return (r=e.getMenuConfig(t).parseImageSrc)?[4,r(n)]:[3,2];case 1:return [2,o.sent()];case 2:return [2,n]}}))}))}function na(t,n,o,i){return void 0===o&&(o=\"\"),void 0===i&&(i=\"\"),mo(this,void 0,void 0,(function(){var u,a,c;return yo(this,(function(l){switch(l.label){case 0:return [4,ta(\"insertImage\",t,n,o,i)];case 1:return l.sent()?[4,ea(\"insertImage\",t,n)]:[2];case 2:return u=l.sent(),a={type:\"image\",src:xu(u),href:i,alt:o,style:{},children:[{text:\"\"}]},null===t.selection&&t.restoreSelection(),e.DomEditor.getSelectedNodeByType(t,\"image\")&&t.move(1),oa(t)?[2]:(r.Transforms.insertNodes(t,a),(c=t.getMenuConfig(\"insertImage\").onInsertedImage)&&c(a),[2])}}))}))}function ra(t,n,o,i,u){return void 0===o&&(o=\"\"),void 0===i&&(i=\"\"),void 0===u&&(u={}),mo(this,void 0,void 0,(function(){var a,c,l,s,f,d;return yo(this,(function(p){switch(p.label){case 0:return [4,ta(\"editImage\",t,n,o,i)];case 1:return p.sent()?[4,ea(\"editImage\",t,n)]:[2];case 2:return a=p.sent(),null==(c=e.DomEditor.getSelectedNodeByType(t,\"image\"))?[2]:(l=c.style,s={src:a,alt:o,href:i,style:go(go({},void 0===l?{}:l),u)},r.Transforms.setNodes(t,s,{match:function(t){return e.DomEditor.checkNodeType(t,\"image\")}}),f=e.DomEditor.getSelectedNodeByType(t,\"image\"),(d=t.getMenuConfig(\"editImage\").onUpdatedImage)&&d(f),[2])}}))}))}function oa(t){var n=t.selection;return null==n||(!r.Range.isCollapsed(n)||!!xo(r.Editor.nodes(t,{match:function(n){var o=e.DomEditor.getNodeType(n);return \"code\"===o||(\"pre\"===o||(\"link\"===o||(\"list-item\"===o||(!!o.startsWith(\"header\")||(\"blockquote\"===o||!!r.Editor.isVoid(t,n))))))},universal:!0}),1)[0])}function ia(){return bu(\"w-e-insert-image\")}var ua=function(){function t(){this.title=e.t(\"image.netImage\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z\"></path></svg>',this.tag=\"button\",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=ia(),this.altInputId=ia(),this.hrefInputId=ia(),this.buttonId=ia();}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.exec=function(t,e){},t.prototype.isDisabled=function(t){return oa(t)},t.prototype.getModalPositionNode=function(t){return null},t.prototype.getModalContentElem=function(t){var n=this,r=this,o=r.srcInputId,i=r.altInputId,u=r.hrefInputId,a=r.buttonId,l=xo(e.genModalInputElems(e.t(\"image.src\"),o),2),s=l[0],f=l[1],d=c.default(f),p=xo(e.genModalInputElems(e.t(\"image.desc\"),i),2),h=p[0],v=p[1],g=c.default(v),m=xo(e.genModalInputElems(e.t(\"image.link\"),u),2),y=m[0],b=m[1],x=c.default(b),w=xo(e.genModalButtonElems(a,e.t(\"common.ok\")),1)[0];if(null==this.$content){var E=c.default(\"<div></div>\");E.on(\"click\",\"#\"+a,(function(e){e.preventDefault();var r=E.find(\"#\"+o).val().trim(),a=E.find(\"#\"+i).val().trim(),c=E.find(\"#\"+u).val().trim();n.insertImage(t,r,a,c),t.hidePanelOrModal();})),this.$content=E;}var S=this.$content;return S.empty(),S.append(s),S.append(h),S.append(y),S.append(w),d.val(\"\"),g.val(\"\"),x.val(\"\"),setTimeout((function(){d.focus();})),S[0]},t.prototype.insertImage=function(t,e,n,r){void 0===n&&(n=\"\"),void 0===r&&(r=\"\"),e&&(t.restoreSelection(),this.isDisabled(t)||na(t,e,n,r));},t}(),aa=function(){function t(){this.title=e.t(\"image.delete\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z\" p-id=\"9577\"></path><path d=\"M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||null==e.DomEditor.getSelectedNodeByType(t,\"image\")},t.prototype.exec=function(t,n){this.isDisabled(t)||r.Transforms.removeNodes(t,{match:function(t){return e.DomEditor.checkNodeType(t,\"image\")}});},t}();function ca(){return bu(\"w-e-edit-image\")}var la=function(){function t(){this.title=e.t(\"image.edit\"),this.iconSvg=Go,this.tag=\"button\",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=ca(),this.altInputId=ca(),this.hrefInputId=ca(),this.buttonId=ca();}return t.prototype.getValue=function(t){return \"\"},t.prototype.getImageNode=function(t){return e.DomEditor.getSelectedNodeByType(t,\"image\")},t.prototype.isActive=function(t){return !1},t.prototype.exec=function(t,e){},t.prototype.isDisabled=function(t){var n=t.selection;return null==n||(!r.Range.isCollapsed(n)||null==e.DomEditor.getSelectedNodeByType(t,\"image\"))},t.prototype.getModalPositionNode=function(t){return this.getImageNode(t)},t.prototype.getModalContentElem=function(t){var n=this,r=this,o=r.srcInputId,i=r.altInputId,u=r.hrefInputId,a=r.buttonId,l=this.getImageNode(t);if(null==l)throw new Error(\"Not found selected image node\");var s=xo(e.genModalInputElems(e.t(\"image.src\"),o),2),f=s[0],d=s[1],p=c.default(d),h=xo(e.genModalInputElems(e.t(\"image.desc\"),i),2),v=h[0],g=h[1],m=c.default(g),y=xo(e.genModalInputElems(e.t(\"image.link\"),u),2),b=y[0],x=y[1],w=c.default(x),E=xo(e.genModalButtonElems(a,e.t(\"common.ok\")),1)[0];if(null==this.$content){var S=c.default(\"<div></div>\");S.on(\"click\",\"#\"+a,(function(e){e.preventDefault();var r=S.find(\"#\"+o).val(),a=S.find(\"#\"+i).val(),c=S.find(\"#\"+u).val();n.updateImage(t,r,a,c),t.hidePanelOrModal();})),this.$content=S;}var k=this.$content;k.empty(),k.append(f),k.append(v),k.append(b),k.append(E);var T=l,M=T.src,I=T.alt,N=void 0===I?\"\":I,H=T.href,O=void 0===H?\"\":H;return p.val(M),m.val(N),w.val(O),setTimeout((function(){p.focus();})),k[0]},t.prototype.updateImage=function(t,e,n,r,o){void 0===n&&(n=\"\"),void 0===r&&(r=\"\"),void 0===o&&(o={}),e&&(t.restoreSelection(),this.isDisabled(t)||ra(t,e,n,r,o));},t}(),sa=function(){function t(){this.title=e.t(\"image.viewLink\"),this.iconSvg=Uo,this.tag=\"button\";}return t.prototype.getValue=function(t){var n=e.DomEditor.getSelectedNodeByType(t,\"image\");return n&&n.href||\"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||!this.getValue(t)},t.prototype.exec=function(t,e){if(!this.isDisabled(t)){if(!e||\"string\"!=typeof e)throw new Error(\"View image link failed, image.href is '\"+e+\"'\");window.open(e,\"_blank\");}},t}(),fa=function(){function t(){this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.getSelectedNode=function(t){return e.DomEditor.getSelectedNodeByType(t,\"image\")},t.prototype.isDisabled=function(t){return null==t.selection||null==this.getSelectedNode(t)},t.prototype.exec=function(t,n){if(!this.isDisabled(t)){var o=this.getSelectedNode(t);if(null!=o){var i=e.DomEditor.getHoverbar(t);i&&i.hideAndClean();var u=o.style,a={style:go(go({},void 0===u?{}:u),{width:this.value,height:\"\"})};r.Transforms.setNodes(t,a,{match:function(t){return e.DomEditor.checkNodeType(t,\"image\")}});}}},t}(),da=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"30%\",e.value=\"30%\",e}return vo(e,t),e}(fa),pa=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"50%\",e.value=\"50%\",e}return vo(e,t),e}(fa),ha=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.title=\"100%\",e.value=\"100%\",e}return vo(e,t),e}(fa);var va={onInsertedImage:function(t){},onUpdatedImage:function(t){},checkImage:function(t,e,n){return !0},parseImageSrc:function(t){return t}},ga={renderElems:[Ku],elemsToHtml:[Qu],parseElemsHtml:[Zu],menus:[{key:\"insertImage\",factory:function(){return new ua},config:va},{key:\"deleteImage\",factory:function(){return new aa}},{key:\"editImage\",factory:function(){return new la},config:va},{key:\"viewImageLink\",factory:function(){return new sa}},{key:\"imageWidth30\",factory:function(){return new da}},{key:\"imageWidth50\",factory:function(){return new pa}},{key:\"imageWidth100\",factory:function(){return new ha}}],editorPlugin:function(t){var e=t.isInline,n=t.isVoid;t.insertNode;var r=t;return r.isInline=function(t){return \"image\"===t.type||e(t)},r.isVoid=function(t){return \"image\"===t.type||n(t)},r}};var ma={type:\"todo\",renderElem:function(t,o,i){var u=!1;i.isDisabled()&&(u=!0);var a=t.checked,c=n.jsx(\"div\",{style:{margin:\"5px 0\"}},n.jsx(\"span\",{contentEditable:!1,style:{marginRight:\"0.5em\"}},n.jsx(\"input\",{type:\"checkbox\",checked:a,disabled:u,on:{change:function(n){var o=e.DomEditor.findPath(i,t),u={checked:n.target.checked};r.Transforms.setNodes(i,u,{at:o});}}})),n.jsx(\"span\",null,o));return c}};var ya=function(){function t(){this.title=e.t(\"todo.todo\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M278.755556 403.911111l-79.644445 79.644445L455.111111 739.555556l568.888889-568.888889-79.644444-79.644445L455.111111 580.266667l-176.355555-176.355556zM910.222222 910.222222H113.777778V113.777778h568.888889V0H113.777778C51.2 0 0 51.2 0 113.777778v796.444444c0 62.577778 51.2 113.777778 113.777778 113.777778h796.444444c62.577778 0 113.777778-51.2 113.777778-113.777778V455.111111h-113.777778v455.111111z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !!e.DomEditor.getSelectedNodeByType(t,\"todo\")},t.prototype.isDisabled=function(t){return null==t.selection||!!e.DomEditor.getSelectedElems(t).some((function(e){if(r.Editor.isVoid(t,e)&&r.Editor.isBlock(t,e))return !0;var n=e.type;return !![\"pre\",\"table\",\"list-item\"].includes(n)||void 0}))},t.prototype.exec=function(t,e){var n=this.isActive(t);r.Transforms.setNodes(t,{type:n?\"paragraph\":\"todo\"});},t}();var ba={renderElems:[ma],elemsToHtml:[{type:\"todo\",elemToHtml:function(t,e){return '<div data-w-e-type=\"todo\"><input type=\"checkbox\" disabled '+(t.checked?\"checked\":\"\")+\">\"+e+\"</div>\"}}],preParseHtml:[{selector:\"ul.w-e-todo\",preParseHtml:function(t){var e=c.default(t).find(\"li\"),n=c.default('<div data-w-e-type=\"todo\"></div>'),r=e.find(\"input[type]\");return n.append(r),e.children()[0].remove(),n[0].innerHTML=n[0].innerHTML+e[0].innerHTML,n[0]}}],parseElemsHtml:[{selector:'div[data-w-e-type=\"todo\"]',parseElemHtml:function(t,e,n){var o=c.default(t);0===(e=e.filter((function(t){return !!r.Text.isText(t)||!!n.isInline(t)}))).length&&(e=[{text:o.text().replace(/\\s+/gm,\" \")}]);var i=!1;return null!=o.find('input[type=\"checkbox\"]').attr(\"checked\")&&(i=!0),{type:\"todo\",checked:i,children:e}}}],menus:[{key:\"todo\",factory:function(){return new ya}}],editorPlugin:function(t){var n=t.deleteBackward,o=t;return o.deleteBackward=function(o){var i=t.selection;if(i&&r.Range.isCollapsed(i)){var u=e.DomEditor.getSelectedNodeByType(t,\"todo\");if(u&&0===r.Node.string(u).length)return void r.Transforms.setNodes(t,{type:\"paragraph\"},{mode:\"highest\"})}n(o);},o}};var xa={type:\"blockquote\",renderElem:function(t,e,r){return n.jsx(\"blockquote\",null,e)}};var wa={type:\"blockquote\",elemToHtml:function(t,e){return \"<blockquote>\"+e+\"</blockquote>\"}};var Ea={selector:\"blockquote:not([data-w-e-type])\",parseElemHtml:function(t,e,n){var o=c.default(t);return 0===(e=e.filter((function(t){return !!r.Text.isText(t)||!!n.isInline(t)}))).length&&(e=[{text:o.text().replace(/\\s+/gm,\" \")}]),{type:\"blockquote\",children:e}}},Sa=function(){function t(){this.title=e.t(\"blockQuote.title\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M894.6 907.1H605.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C752.7 180.4 711.3 315.8 711.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z m-472 0H133.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C280.7 180.4 239.3 315.8 239.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !!e.DomEditor.getSelectedNodeByType(t,\"blockquote\")},t.prototype.isDisabled=function(t){return null==t.selection||!xo(r.Editor.nodes(t,{match:function(t){var n=e.DomEditor.getNodeType(t);return \"paragraph\"===n||\"blockquote\"===n},universal:!0,mode:\"highest\"}),1)[0]},t.prototype.exec=function(t,e){if(!this.isDisabled(t)){var n=this.isActive(t)?\"paragraph\":\"blockquote\";r.Transforms.setNodes(t,{type:n},{mode:\"highest\"});}},t}(),ka={key:\"blockquote\",factory:function(){return new Sa}},Ta=D([].slice),Ma=hn(\"slice\"),Ia=Mt(\"species\"),Na=y.Array,Ha=Math.max;qe({target:\"Array\",proto:!0,forced:!Ma},{slice:function(t,e){var n,r,o,i=F(this),u=Ee(i),a=be(t,u),c=be(void 0===e?u:e,u);if(We(i)&&(n=i.constructor,(un(n)&&(n===Na||We(n.prototype))||q(n)&&null===(n=n[Ia]))&&(n=void 0),n===Na||void 0===n))return Ta(i,a,c);for(r=new(void 0===n?Na:n)(Ha(c-a,0)),o=0;a<c;a++,o++)a in i&&Fr(r,o,i[a]);return r.length=o,r}});var Oa={renderElems:[xa],elemsToHtml:[wa],parseElemsHtml:[Ea],menus:[ka],editorPlugin:function(t){var n=t.insertBreak,o=t.insertText,i=t;return i.insertBreak=function(){var u=i.selection;if(null==u)return n();var a=xo(r.Editor.nodes(t,{match:function(t){return e.DomEditor.checkNodeType(t,\"blockquote\")},universal:!0}),1)[0];if(!a)return n();var c=a[0],l=e.DomEditor.findPath(t,c),s=r.Editor.end(t,l);if(r.Point.equals(s,u.focus)){var f=r.Node.string(c);if(f&&\"\\n\"===f.slice(-1)){t.deleteBackward(\"character\");return void r.Transforms.insertNodes(i,{type:\"paragraph\",children:[{text:\"\"}]},{mode:\"highest\"})}}o(\"\\n\");},i}},ja=function(){function t(){this.title=e.t(\"emotion.title\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M512 1024C230.4 1024 0 793.6 0 512S230.4 0 512 0s512 230.4 512 512-230.4 512-512 512z m0-102.4c226.742857 0 409.6-182.857143 409.6-409.6S738.742857 102.4 512 102.4 102.4 285.257143 102.4 512s182.857143 409.6 409.6 409.6z m-204.8-358.4h409.6c0 113.371429-91.428571 204.8-204.8 204.8s-204.8-91.428571-204.8-204.8z m0-102.4c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8 76.8 32.914286 76.8 76.8-32.914286 76.8-76.8 76.8z m409.6 0c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8c43.885714 0 76.8 32.914286 76.8 76.8s-32.914286 76.8-76.8 76.8z\"></path></svg>',this.tag=\"button\",this.showDropPanel=!0,this.$content=null;}return t.prototype.exec=function(t,e){},t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||!!xo(r.Editor.nodes(t,{match:function(n){return \"pre\"===e.DomEditor.getNodeType(n)||!!r.Editor.isVoid(t,n)},universal:!0}),1)[0]},t.prototype.getPanelContentElem=function(t){if(null==this.$content){var e=c.default('<ul class=\"w-e-panel-content-emotion\"></ul>');e.on(\"click\",\"li\",(function(e){var n=e.target;if(null!=n){e.preventDefault();var r=c.default(n).text();t.insertText(r);}})),this.$content=e;}var n=this.$content;if(null==n)return document.createElement(\"ul\");n.empty();var r=t.getMenuConfig(\"emotion\").emotions;return (void 0===r?[]:r).forEach((function(t){var e=c.default(\"<li>\"+t+\"</li>\");n.append(e);})),n[0]},t}();var Da={menus:[{key:\"emotion\",factory:function(){return new ja},config:{emotions:\"😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😛 😝 😜 🤓 😎 😏 😒 😞 😔 😟 😕 🙁 😣 😖 😫 😩 😢 😭 😤 😠 😡 😳 😱 😨 🤗 🤔 😶 😑 😬 🙄 😯 😴 😷 🤑 😈 🤡 💩 👻 💀 👀 👣 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🖕 ✍️ 🙏\".split(\" \")}}]};var La={1:\"12px\",2:\"14px\",3:\"16px\",4:\"19px\",5:\"24px\",6:\"32px\",7:\"48px\"};var za={selector:\"font\",preParseHtml:function(t){var e=c.default(t);if(\"font\"!==fo(e))return t;var n=e.attr(\"size\")||\"\";n&&(e.removeAttr(\"size\"),e.css(\"font-size\",La[n]));var r=e.attr(\"face\")||\"\";return r&&(e.removeAttr(\"face\"),e.css(\"font-family\",r)),e[0]}},Aa=D(\"\".indexOf);qe({target:\"String\",proto:!0,forced:!Di(\"includes\")},{includes:function(t){return !!~Aa(bn(R(this)),bn(Oi(t)),arguments.length>1?arguments[1]:void 0)}});var Pa,Ca,Va=function(t){return t&&t.Math==Math&&t},Ba=Va(\"object\"==typeof globalThis&&globalThis)||Va(\"object\"==typeof window&&window)||Va(\"object\"==typeof self&&self)||Va(\"object\"==typeof d&&d)||function(){return this}()||Function(\"return this\")(),Ra=Function.prototype,Fa=Ra.apply,_a=Ra.bind,qa=Ra.call,$a=\"object\"==typeof Reflect&&Reflect.apply||(_a?qa.bind(Fa):function(){return qa.apply(Fa,arguments)}),Wa=Function.prototype,Ga=Wa.bind,Ua=Wa.call,Xa=Ga&&Ga.bind(Ua),Ya=Ga?function(t){return t&&Xa(Ua,t)}:function(t){return t&&function(){return Ua.apply(t,arguments)}},Ja=function(t){return \"function\"==typeof t},Ka=function(t){try{return !!t()}catch(t){return !0}},Qa=!Ka((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),Za=Function.prototype.call,tc=Za.bind?Za.bind(Za):function(){return Za.apply(Za,arguments)},ec={}.propertyIsEnumerable,nc=Object.getOwnPropertyDescriptor,rc=nc&&!ec.call({1:2},1)?function(t){var e=nc(this,t);return !!e&&e.enumerable}:ec,oc={f:rc},ic=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},uc=Ya({}.toString),ac=Ya(\"\".slice),cc=function(t){return ac(uc(t),8,-1)},lc=Ba.Object,sc=Ya(\"\".split),fc=Ka((function(){return !lc(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==cc(t)?sc(t,\"\"):lc(t)}:lc,dc=Ba.TypeError,pc=function(t){if(null==t)throw dc(\"Can't call method on \"+t);return t},hc=function(t){return fc(pc(t))},vc=function(t){return \"object\"==typeof t?null!==t:Ja(t)},gc={},mc=function(t){return Ja(t)?t:void 0},yc=function(t,e){return arguments.length<2?mc(gc[t])||mc(Ba[t]):gc[t]&&gc[t][e]||Ba[t]&&Ba[t][e]},bc=Ya({}.isPrototypeOf),xc=yc(\"navigator\",\"userAgent\")||\"\",wc=Ba.process,Ec=Ba.Deno,Sc=wc&&wc.versions||Ec&&Ec.version,kc=Sc&&Sc.v8;kc&&(Ca=(Pa=kc.split(\".\"))[0]>0&&Pa[0]<4?1:+(Pa[0]+Pa[1])),!Ca&&xc&&(!(Pa=xc.match(/Edge\\/(\\d+)/))||Pa[1]>=74)&&(Pa=xc.match(/Chrome\\/(\\d+)/))&&(Ca=+Pa[1]);var Tc=Ca,Mc=!!Object.getOwnPropertySymbols&&!Ka((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&Tc&&Tc<41})),Ic=Mc&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,Nc=Ba.Object,Hc=Ic?function(t){return \"symbol\"==typeof t}:function(t){var e=yc(\"Symbol\");return Ja(e)&&bc(e.prototype,Nc(t))},Oc=Ba.String,jc=Ba.TypeError,Dc=function(t){if(Ja(t))return t;throw jc(function(t){try{return Oc(t)}catch(t){return \"Object\"}}(t)+\" is not a function\")},Lc=Ba.TypeError,zc=Object.defineProperty,Ac=\"__core-js_shared__\",Pc=Ba[Ac]||function(t,e){try{zc(Ba,t,{value:e,configurable:!0,writable:!0});}catch(n){Ba[t]=e;}return e}(Ac,{}),Cc=h((function(t){(t.exports=function(t,e){return Pc[t]||(Pc[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"pure\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),Vc=Ba.Object,Bc=function(t){return Vc(pc(t))},Rc=Ya({}.hasOwnProperty),Fc=Object.hasOwn||function(t,e){return Rc(Bc(t),e)},_c=0,qc=Math.random(),$c=Ya(1..toString),Wc=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+$c(++_c+qc,36)},Gc=Cc(\"wks\"),Uc=Ba.Symbol,Xc=Uc&&Uc.for,Yc=Ic?Uc:Uc&&Uc.withoutSetter||Wc,Jc=function(t){if(!Fc(Gc,t)||!Mc&&\"string\"!=typeof Gc[t]){var e=\"Symbol.\"+t;Mc&&Fc(Uc,t)?Gc[t]=Uc[t]:Gc[t]=Ic&&Xc?Xc(e):Yc(e);}return Gc[t]},Kc=Ba.TypeError,Qc=Jc(\"toPrimitive\"),Zc=function(t,e){if(!vc(t)||Hc(t))return t;var n,r,o=null==(n=t[Qc])?void 0:Dc(n);if(o){if(void 0===e&&(e=\"default\"),r=tc(o,t,e),!vc(r)||Hc(r))return r;throw Kc(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var n,r;if(\"string\"===e&&Ja(n=t.toString)&&!vc(r=tc(n,t)))return r;if(Ja(n=t.valueOf)&&!vc(r=tc(n,t)))return r;if(\"string\"!==e&&Ja(n=t.toString)&&!vc(r=tc(n,t)))return r;throw Lc(\"Can't convert object to primitive value\")}(t,e)},tl=function(t){var e=Zc(t,\"string\");return Hc(e)?e:e+\"\"},el=Ba.document,nl=vc(el)&&vc(el.createElement),rl=function(t){return nl?el.createElement(t):{}},ol=!Qa&&!Ka((function(){return 7!=Object.defineProperty(rl(\"div\"),\"a\",{get:function(){return 7}}).a})),il=Object.getOwnPropertyDescriptor,ul={f:Qa?il:function(t,e){if(t=hc(t),e=tl(e),ol)try{return il(t,e)}catch(t){}if(Fc(t,e))return ic(!tc(oc.f,t,e),t[e])}},al=/#|\\.prototype\\./,cl=function(t,e){var n=sl[ll(t)];return n==dl||n!=fl&&(Ja(e)?Ka(e):!!e)},ll=cl.normalize=function(t){return String(t).replace(al,\".\").toLowerCase()},sl=cl.data={},fl=cl.NATIVE=\"N\",dl=cl.POLYFILL=\"P\",pl=cl,hl=Ya(Ya.bind),vl=function(t,e){return Dc(t),void 0===e?t:hl?hl(t,e):function(){return t.apply(e,arguments)}},gl=Ba.String,ml=Ba.TypeError,yl=function(t){if(vc(t))return t;throw ml(gl(t)+\" is not an object\")},bl=Ba.TypeError,xl=Object.defineProperty,wl={f:Qa?xl:function(t,e,n){if(yl(t),e=tl(e),yl(n),ol)try{return xl(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw bl(\"Accessors not supported\");return \"value\"in n&&(t[e]=n.value),t}},El=Qa?function(t,e,n){return wl.f(t,e,ic(1,n))}:function(t,e,n){return t[e]=n,t},Sl=ul.f,kl=function(t){var e=function(n,r,o){if(this instanceof e){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,r)}return new t(n,r,o)}return $a(t,this,arguments)};return e.prototype=t.prototype,e},Tl=function(t,e){var n,r,o,i,u,a,c,l,s=t.target,f=t.global,d=t.stat,p=t.proto,h=f?Ba:d?Ba[s]:(Ba[s]||{}).prototype,v=f?gc:gc[s]||El(gc,s,{})[s],g=v.prototype;for(o in e)n=!pl(f?o:s+(d?\".\":\"#\")+o,t.forced)&&h&&Fc(h,o),u=v[o],n&&(a=t.noTargetGet?(l=Sl(h,o))&&l.value:h[o]),i=n&&a?a:e[o],n&&typeof u==typeof i||(c=t.bind&&n?vl(i,Ba):t.wrap&&n?kl(i):p&&Ja(i)?Ya(i):i,(t.sham||i&&i.sham||u&&u.sham)&&El(c,\"sham\",!0),El(v,o,c),p&&(Fc(gc,r=s+\"Prototype\")||El(gc,r,{}),El(gc[r],o,i),t.real&&g&&!g[o]&&El(g,o,i)));},Ml=Array.isArray||function(t){return \"Array\"==cc(t)},Il=Math.ceil,Nl=Math.floor,Hl=function(t){var e=+t;return e!=e||0===e?0:(e>0?Nl:Il)(e)},Ol=Math.min,jl=function(t){return (e=t.length)>0?Ol(Hl(e),9007199254740991):0;var e;},Dl=function(t,e,n){var r=tl(e);r in t?wl.f(t,r,ic(0,n)):t[r]=n;},Ll={};Ll[Jc(\"toStringTag\")]=\"z\";var zl=\"[object z]\"===String(Ll),Al=Jc(\"toStringTag\"),Pl=Ba.Object,Cl=\"Arguments\"==cc(function(){return arguments}()),Vl=zl?cc:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Pl(t),Al))?n:Cl?cc(e):\"Object\"==(r=cc(e))&&Ja(e.callee)?\"Arguments\":r},Bl=Ya(Function.toString);Ja(Pc.inspectSource)||(Pc.inspectSource=function(t){return Bl(t)});var Rl=Pc.inspectSource,Fl=function(){},_l=[],ql=yc(\"Reflect\",\"construct\"),$l=/^\\s*(?:class|function)\\b/,Wl=Ya($l.exec),Gl=!$l.exec(Fl),Ul=function(t){if(!Ja(t))return !1;try{return ql(Fl,_l,t),!0}catch(t){return !1}},Xl=!ql||Ka((function(){var t;return Ul(Ul.call)||!Ul(Object)||!Ul((function(){t=!0;}))||t}))?function(t){if(!Ja(t))return !1;switch(Vl(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Gl||!!Wl($l,Rl(t))}:Ul,Yl=Jc(\"species\"),Jl=Ba.Array,Kl=function(t,e){return new(function(t){var e;return Ml(t)&&(e=t.constructor,(Xl(e)&&(e===Jl||Ml(e.prototype))||vc(e)&&null===(e=e[Yl]))&&(e=void 0)),void 0===e?Jl:e}(t))(0===e?0:e)},Ql=Jc(\"species\"),Zl=Jc(\"isConcatSpreadable\"),ts=9007199254740991,es=\"Maximum allowed index exceeded\",ns=Ba.TypeError,rs=Tc>=51||!Ka((function(){var t=[];return t[Zl]=!1,t.concat()[0]!==t})),os=function(t){return Tc>=51||!Ka((function(){var e=[];return (e.constructor={})[Ql]=function(){return {foo:1}},1!==e[t](Boolean).foo}))}(\"concat\"),is=function(t){if(!vc(t))return !1;var e=t[Zl];return void 0!==e?!!e:Ml(t)};Tl({target:\"Array\",proto:!0,forced:!rs||!os},{concat:function(t){var e,n,r,o,i,u=Bc(this),a=Kl(u,0),c=0;for(e=-1,r=arguments.length;e<r;e++)if(is(i=-1===e?u:arguments[e])){if(c+(o=jl(i))>ts)throw ns(es);for(n=0;n<o;n++,c++)n in i&&Dl(a,c,i[n]);}else {if(c>=ts)throw ns(es);Dl(a,c++,i);}return a.length=c,a}});var us,as=Ba.String,cs=function(t){if(\"Symbol\"===Vl(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return as(t)},ls=Math.max,ss=Math.min,fs=function(t,e){var n=Hl(t);return n<0?ls(n+e,0):ss(n,e)},ds=function(t){return function(e,n,r){var o,i=hc(e),u=jl(i),a=fs(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return !0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return !t&&-1}},ps={includes:ds(!0),indexOf:ds(!1)},hs={},vs=ps.indexOf,gs=Ya([].push),ms=function(t,e){var n,r=hc(t),o=0,i=[];for(n in r)!Fc(hs,n)&&Fc(r,n)&&gs(i,n);for(;e.length>o;)Fc(r,n=e[o++])&&(~vs(i,n)||gs(i,n));return i},ys=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],bs=Object.keys||function(t){return ms(t,ys)},xs=Qa?Object.defineProperties:function(t,e){yl(t);for(var n,r=hc(e),o=bs(e),i=o.length,u=0;i>u;)wl.f(t,n=o[u++],r[n]);return t},ws=yc(\"document\",\"documentElement\"),Es=Cc(\"keys\"),Ss=function(t){return Es[t]||(Es[t]=Wc(t))},ks=Ss(\"IE_PROTO\"),Ts=function(){},Ms=function(t){return \"<script>\"+t+\"</\"+\"script>\"},Is=function(t){t.write(Ms(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},Ns=function(){try{us=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;Ns=\"undefined\"!=typeof document?document.domain&&us?Is(us):((e=rl(\"iframe\")).style.display=\"none\",ws.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(Ms(\"document.F=Object\")),t.close(),t.F):Is(us);for(var n=ys.length;n--;)delete Ns.prototype[ys[n]];return Ns()};hs[ks]=!0;var Hs,Os,js,Ds=Object.create||function(t,e){var n;return null!==t?(Ts.prototype=yl(t),n=new Ts,Ts.prototype=null,n[ks]=t):n=Ns(),void 0===e?n:xs(n,e)},Ls=ys.concat(\"length\",\"prototype\"),zs={f:Object.getOwnPropertyNames||function(t){return ms(t,Ls)}},As=Ba.Array,Ps=Math.max,Cs=zs.f,Vs=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Bs=function(t){try{return Cs(t)}catch(t){return function(t,e,n){for(var r=jl(t),o=fs(e,r),i=fs(void 0===n?r:n,r),u=As(Ps(i-o,0)),a=0;o<i;o++,a++)Dl(u,a,t[o]);return u.length=a,u}(Vs)}},Rs={f:function(t){return Vs&&\"Window\"==cc(t)?Bs(t):Cs(hc(t))}},Fs={f:Object.getOwnPropertySymbols},_s=Ya([].slice),qs=function(t,e,n,r){r&&r.enumerable?t[e]=n:El(t,e,n);},$s={f:Jc},Ws=wl.f,Gs=function(t){var e=gc.Symbol||(gc.Symbol={});Fc(e,t)||Ws(e,t,{value:$s.f(t)});},Us=zl?{}.toString:function(){return \"[object \"+Vl(this)+\"]\"},Xs=wl.f,Ys=Jc(\"toStringTag\"),Js=function(t,e,n,r){if(t){var o=n?t:t.prototype;Fc(o,Ys)||Xs(o,Ys,{configurable:!0,value:e}),r&&!zl&&El(o,\"toString\",Us);}},Ks=Ba.WeakMap,Qs=Ja(Ks)&&/native code/.test(Rl(Ks)),Zs=\"Object already initialized\",tf=Ba.TypeError,ef=Ba.WeakMap;if(Qs||Pc.state){var nf=Pc.state||(Pc.state=new ef),rf=Ya(nf.get),of=Ya(nf.has),uf=Ya(nf.set);Hs=function(t,e){if(of(nf,t))throw new tf(Zs);return e.facade=t,uf(nf,t,e),e},Os=function(t){return rf(nf,t)||{}},js=function(t){return of(nf,t)};}else {var af=Ss(\"state\");hs[af]=!0,Hs=function(t,e){if(Fc(t,af))throw new tf(Zs);return e.facade=t,El(t,af,e),e},Os=function(t){return Fc(t,af)?t[af]:{}},js=function(t){return Fc(t,af)};}var cf={set:Hs,get:Os,has:js,enforce:function(t){return js(t)?Os(t):Hs(t,{})},getterFor:function(t){return function(e){var n;if(!vc(e)||(n=Os(e)).type!==t)throw tf(\"Incompatible receiver, \"+t+\" required\");return n}}},lf=Ya([].push),sf=function(t){var e=1==t,n=2==t,r=3==t,o=4==t,i=6==t,u=7==t,a=5==t||i;return function(c,l,s,f){for(var d,p,h=Bc(c),v=fc(h),g=vl(l,s),m=jl(v),y=0,b=f||Kl,x=e?b(c,m):n||u?b(c,0):void 0;m>y;y++)if((a||y in v)&&(p=g(d=v[y],y,h),t))if(e)x[y]=p;else if(p)switch(t){case 3:return !0;case 5:return d;case 6:return y;case 2:lf(x,d);}else switch(t){case 4:return !1;case 7:lf(x,d);}return i?-1:r||o?o:x}},ff={forEach:sf(0),map:sf(1),filter:sf(2),some:sf(3),every:sf(4),find:sf(5),findIndex:sf(6),filterReject:sf(7)}.forEach,df=Ss(\"hidden\"),pf=\"Symbol\",hf=Jc(\"toPrimitive\"),vf=cf.set,gf=cf.getterFor(pf),mf=Object.prototype,yf=Ba.Symbol,bf=yf&&yf.prototype,xf=Ba.TypeError,wf=Ba.QObject,Ef=yc(\"JSON\",\"stringify\"),Sf=ul.f,kf=wl.f,Tf=Rs.f,Mf=oc.f,If=Ya([].push),Nf=Cc(\"symbols\"),Hf=Cc(\"op-symbols\"),Of=Cc(\"string-to-symbol-registry\"),jf=Cc(\"symbol-to-string-registry\"),Df=Cc(\"wks\"),Lf=!wf||!wf.prototype||!wf.prototype.findChild,zf=Qa&&Ka((function(){return 7!=Ds(kf({},\"a\",{get:function(){return kf(this,\"a\",{value:7}).a}})).a}))?function(t,e,n){var r=Sf(mf,e);r&&delete mf[e],kf(t,e,n),r&&t!==mf&&kf(mf,e,r);}:kf,Af=function(t,e){var n=Nf[t]=Ds(bf);return vf(n,{type:pf,tag:t,description:e}),Qa||(n.description=e),n},Pf=function(t,e,n){t===mf&&Pf(Hf,e,n),yl(t);var r=tl(e);return yl(n),Fc(Nf,r)?(n.enumerable?(Fc(t,df)&&t[df][r]&&(t[df][r]=!1),n=Ds(n,{enumerable:ic(0,!1)})):(Fc(t,df)||kf(t,df,ic(1,{})),t[df][r]=!0),zf(t,r,n)):kf(t,r,n)},Cf=function(t,e){yl(t);var n=hc(e),r=bs(n).concat(Ff(n));return ff(r,(function(e){Qa&&!tc(Vf,n,e)||Pf(t,e,n[e]);})),t},Vf=function(t){var e=tl(t),n=tc(Mf,this,e);return !(this===mf&&Fc(Nf,e)&&!Fc(Hf,e))&&(!(n||!Fc(this,e)||!Fc(Nf,e)||Fc(this,df)&&this[df][e])||n)},Bf=function(t,e){var n=hc(t),r=tl(e);if(n!==mf||!Fc(Nf,r)||Fc(Hf,r)){var o=Sf(n,r);return !o||!Fc(Nf,r)||Fc(n,df)&&n[df][r]||(o.enumerable=!0),o}},Rf=function(t){var e=Tf(hc(t)),n=[];return ff(e,(function(t){Fc(Nf,t)||Fc(hs,t)||If(n,t);})),n},Ff=function(t){var e=t===mf,n=Tf(e?Hf:hc(t)),r=[];return ff(n,(function(t){!Fc(Nf,t)||e&&!Fc(mf,t)||If(r,Nf[t]);})),r};if(Mc||(yf=function(){if(bc(bf,this))throw xf(\"Symbol is not a constructor\");var t=arguments.length&&void 0!==arguments[0]?cs(arguments[0]):void 0,e=Wc(t),n=function(t){this===mf&&tc(n,Hf,t),Fc(this,df)&&Fc(this[df],e)&&(this[df][e]=!1),zf(this,e,ic(1,t));};return Qa&&Lf&&zf(mf,e,{configurable:!0,set:n}),Af(e,t)},bf=yf.prototype,qs(bf,\"toString\",(function(){return gf(this).tag})),qs(yf,\"withoutSetter\",(function(t){return Af(Wc(t),t)})),oc.f=Vf,wl.f=Pf,ul.f=Bf,zs.f=Rs.f=Rf,Fs.f=Ff,$s.f=function(t){return Af(Jc(t),t)},Qa&&kf(bf,\"description\",{configurable:!0,get:function(){return gf(this).description}})),Tl({global:!0,wrap:!0,forced:!Mc,sham:!Mc},{Symbol:yf}),ff(bs(Df),(function(t){Gs(t);})),Tl({target:pf,stat:!0,forced:!Mc},{for:function(t){var e=cs(t);if(Fc(Of,e))return Of[e];var n=yf(e);return Of[e]=n,jf[n]=e,n},keyFor:function(t){if(!Hc(t))throw xf(t+\" is not a symbol\");if(Fc(jf,t))return jf[t]},useSetter:function(){Lf=!0;},useSimple:function(){Lf=!1;}}),Tl({target:\"Object\",stat:!0,forced:!Mc,sham:!Qa},{create:function(t,e){return void 0===e?Ds(t):Cf(Ds(t),e)},defineProperty:Pf,defineProperties:Cf,getOwnPropertyDescriptor:Bf}),Tl({target:\"Object\",stat:!0,forced:!Mc},{getOwnPropertyNames:Rf,getOwnPropertySymbols:Ff}),Tl({target:\"Object\",stat:!0,forced:Ka((function(){Fs.f(1);}))},{getOwnPropertySymbols:function(t){return Fs.f(Bc(t))}}),Ef){var _f=!Mc||Ka((function(){var t=yf();return \"[null]\"!=Ef([t])||\"{}\"!=Ef({a:t})||\"{}\"!=Ef(Object(t))}));Tl({target:\"JSON\",stat:!0,forced:_f},{stringify:function(t,e,n){var r=_s(arguments),o=e;if((vc(e)||void 0!==t)&&!Hc(t))return Ml(e)||(e=function(t,e){if(Ja(o)&&(e=tc(o,this,t,e)),!Hc(e))return e}),r[1]=e,$a(Ef,null,r)}});}if(!bf[hf]){var qf=bf.valueOf;qs(bf,hf,(function(t){return tc(qf,this)}));}Js(yf,pf),hs[df]=!0,Gs(\"asyncIterator\"),Gs(\"hasInstance\"),Gs(\"isConcatSpreadable\"),Gs(\"iterator\"),Gs(\"match\"),Gs(\"matchAll\"),Gs(\"replace\"),Gs(\"search\"),Gs(\"species\"),Gs(\"split\"),Gs(\"toPrimitive\"),Gs(\"toStringTag\"),Gs(\"unscopables\"),Js(Ba.JSON,\"JSON\",!0);var $f,Wf,Gf,Uf=gc.Symbol,Xf={},Yf=Function.prototype,Jf=Qa&&Object.getOwnPropertyDescriptor,Kf=Fc(Yf,\"name\"),Qf={EXISTS:Kf,PROPER:Kf&&\"something\"===function(){}.name,CONFIGURABLE:Kf&&(!Qa||Qa&&Jf(Yf,\"name\").configurable)},Zf=!Ka((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),td=Ss(\"IE_PROTO\"),ed=Ba.Object,nd=ed.prototype,rd=Zf?ed.getPrototypeOf:function(t){var e=Bc(t);if(Fc(e,td))return e[td];var n=e.constructor;return Ja(n)&&e instanceof n?n.prototype:e instanceof ed?nd:null},od=Jc(\"iterator\"),id=!1;[].keys&&(\"next\"in(Gf=[].keys())?(Wf=rd(rd(Gf)))!==Object.prototype&&($f=Wf):id=!0);var ud=null==$f||Ka((function(){var t={};return $f[od].call(t)!==t}));$f=ud?{}:Ds($f),Ja($f[od])||qs($f,od,(function(){return this}));var ad={IteratorPrototype:$f,BUGGY_SAFARI_ITERATORS:id},cd=ad.IteratorPrototype,ld=function(){return this};Ba.String,Ba.TypeError;Object.setPrototypeOf||\"__proto__\"in{}&&function(){var t,e=!1,n={};try{(t=Ya(Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set))(n,[]),e=n instanceof Array;}catch(t){}}();var sd=Qf.PROPER,fd=ad.BUGGY_SAFARI_ITERATORS,dd=Jc(\"iterator\"),pd=\"keys\",hd=\"values\",vd=\"entries\",gd=function(){return this},md=function(t,e,n,r,o,i,u){!function(t,e,n,r){var o=e+\" Iterator\";t.prototype=Ds(cd,{next:ic(+!r,n)}),Js(t,o,!1,!0),Xf[o]=ld;}(n,e,r);var a,c,l,s=function(t){if(t===o&&v)return v;if(!fd&&t in p)return p[t];switch(t){case pd:case hd:case vd:return function(){return new n(this,t)}}return function(){return new n(this)}},f=e+\" Iterator\",d=!1,p=t.prototype,h=p[dd]||p[\"@@iterator\"]||o&&p[o],v=!fd&&h||s(o),g=\"Array\"==e&&p.entries||h;if(g&&(a=rd(g.call(new t)))!==Object.prototype&&a.next&&(Js(a,f,!0,!0),Xf[f]=gd),sd&&o==hd&&h&&h.name!==hd&&(d=!0,v=function(){return tc(h,this)}),o)if(c={values:s(hd),keys:i?v:s(pd),entries:s(vd)},u)for(l in c)(fd||d||!(l in p))&&qs(p,l,c[l]);else Tl({target:e,proto:!0,forced:fd||d},c);return u&&p[dd]!==v&&qs(p,dd,v,{name:o}),Xf[e]=v,c},yd=\"Array Iterator\",bd=cf.set,xd=cf.getterFor(yd);md(Array,\"Array\",(function(t,e){bd(this,{type:yd,target:hc(t),index:0,kind:e});}),(function(){var t=xd(this),e=t.target,n=t.kind,r=t.index++;return !e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\"),Xf.Arguments=Xf.Array;var wd=Jc(\"toStringTag\");for(var Ed in {CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}){var Sd=Ba[Ed],kd=Sd&&Sd.prototype;kd&&Vl(kd)!==wd&&El(kd,wd,Ed),Xf[Ed]=Xf.Array;}var Td=Uf;Gs(\"asyncDispose\"),Gs(\"dispose\"),Gs(\"matcher\"),Gs(\"metadata\"),Gs(\"observable\"),Gs(\"patternMatch\"),Gs(\"replaceAll\");var Md=Td,Id=Ya(\"\".charAt),Nd=Ya(\"\".charCodeAt),Hd=Ya(\"\".slice),Od=function(t){return function(e,n){var r,o,i=cs(pc(e)),u=Hl(n),a=i.length;return u<0||u>=a?t?\"\":void 0:(r=Nd(i,u))<55296||r>56319||u+1===a||(o=Nd(i,u+1))<56320||o>57343?t?Id(i,u):r:t?Hd(i,u,u+2):o-56320+(r-55296<<10)+65536}},jd={codeAt:Od(!1),charAt:Od(!0)}.charAt,Dd=\"String Iterator\",Ld=cf.set,zd=cf.getterFor(Dd);md(String,\"String\",(function(t){Ld(this,{type:Dd,string:cs(t),index:0});}),(function(){var t,e=zd(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=jd(n,r),e.index+=t.length,{value:t,done:!1})}));var Ad=$s.f(\"iterator\"),Pd=h((function(t){function e(n){return \"function\"==typeof Md&&\"symbol\"==typeof Ad?(t.exports=e=function(t){return typeof t},t.exports.default=t.exports,t.exports.__esModule=!0):(t.exports=e=function(t){return t&&\"function\"==typeof Md&&t.constructor===Md&&t!==Md.prototype?\"symbol\":typeof t},t.exports.default=t.exports,t.exports.__esModule=!0),e(n)}t.exports=e,t.exports.default=t.exports,t.exports.__esModule=!0;})),Cd=p(Pd),Vd=de.EXISTS,Bd=_t.f,Rd=Function.prototype,Fd=D(Rd.toString),_d=/function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/,qd=D(_d.exec);x&&!Vd&&Bd(Rd,\"name\",{configurable:!0,get:function(){try{return qd(_d,Fd(this))[1]}catch(t){return \"\"}}});var $d=function(){function t(){this.tag=\"select\",this.width=80;}return t.prototype.isActive=function(t){return !1},t.prototype.getValue=function(t){var e=this.mark,n=r.Editor.marks(t);return n&&n[e]?n[e]:\"\"},t.prototype.isDisabled=function(t){return null==t.selection||(this.mark,!!xo(r.Editor.nodes(t,{match:function(n){return \"pre\"===e.DomEditor.getNodeType(n)||!!r.Editor.isVoid(t,n)},universal:!0}),1)[0])},t.prototype.exec=function(t,e){var n=this.mark;e?t.addMark(n,e):t.removeMark(n);},t}(),Wd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"fontSize.title\"),n.iconSvg=Jo,n.mark=\"fontSize\",n}return vo(n,t),n.prototype.getOptions=function(t){var n=[],r=t.getMenuConfig(this.mark).fontSizeList,o=void 0===r?[]:r;n.push({text:e.t(\"fontSize.default\"),value:\"\"}),o.forEach((function(t){if(\"string\"==typeof t)n.push({text:t,value:t});else if(\"object\"===Cd(t)){var e=t.name,r=t.value;n.push({text:e,value:r});}}));var i=this.getValue(t);return n.forEach((function(t){t.value===i?t.selected=!0:delete t.selected;})),n},n}($d),Gd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"fontFamily.title\"),n.iconSvg=Ko,n.mark=\"fontFamily\",n.selectPanelWidth=150,n}return vo(n,t),n.prototype.getOptions=function(t){var n=[],r=t.getMenuConfig(this.mark).fontFamilyList,o=void 0===r?[]:r;n.push({text:e.t(\"fontFamily.default\"),value:\"\"}),o.forEach((function(t){if(\"string\"==typeof t)n.push({text:t,value:t,styleForRenderMenuList:{\"font-family\":t}});else if(\"object\"===Cd(t)){var e=t.name,r=t.value;n.push({text:e,value:r,styleForRenderMenuList:{\"font-family\":r}});}}));var i=this.getValue(t);return n.forEach((function(t){t.value===i?t.selected=!0:delete t.selected;})),n},n}($d);var Ud={renderStyle:function(t,e){var n=t,r=n.fontSize,o=n.fontFamily,i=e;return r&&au(i,{fontSize:r}),o&&au(i,{fontFamily:o}),i},styleToHtml:function(t,e){if(!r.Text.isText(t))return e;var n,o=t,i=o.fontSize,u=o.fontFamily;return i||u?((lo(e)||\"span\"!==fo(n=c.default(e)))&&(n=c.default(\"<span>\"+e+\"</span>\")),i&&n.css(\"font-size\",i),u&&n.css(\"font-family\",u),so(n)):e},preParseHtml:[za],parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Text.isText(e))return e;var i=e,u=n.getMenuConfig(\"fontSize\").fontSizeList,a=void 0===u?[]:u,l=po(o,\"font-size\"),s=a.find((function(t){return t.value&&t.value===l}))||a.includes(l);l&&s&&(i.fontSize=l);var f=n.getMenuConfig(\"fontFamily\").fontFamilyList,d=void 0===f?[]:f,p=po(o,\"font-family\").replace(/\"/g,\"\"),h=d.find((function(t){return t.value&&t.value===p}))||d.includes(p);return p&&h&&(i.fontFamily=p),i},menus:[{key:\"fontSize\",factory:function(){return new Wd},config:{fontSizeList:[\"12px\",{name:\"13px\",value:\"13px\"},\"14px\",\"15px\",\"16px\",\"19px\",{name:\"22px\",value:\"22px\"},\"24px\",\"29px\",\"32px\",\"40px\",\"48px\"]}},{key:\"fontFamily\",factory:function(){return new Gd},config:{fontFamilyList:[\"黑体\",{name:\"仿宋\",value:\"仿宋\"},\"楷体\",\"标楷体\",\"华文仿宋\",\"华文楷体\",{name:\"宋体\",value:\"宋体\"},\"微软雅黑\",\"Arial\",\"Tahoma\",\"Verdana\",\"Times New Roman\",\"Courier New\"]}}]};var Xd={selector:\"p,h1,h2,h3,h4,h5\",preParseHtml:function(t){var e=c.default(t),n=po(e,\"padding-left\");return /\\dem/.test(n)&&e.css(\"text-indent\",\"2em\"),/\\dpx/.test(n)&&parseInt(n,10)%32==0&&e.css(\"text-indent\",\"2em\"),e[0]}};var Yd=function(){function t(){this.tag=\"button\";}return t.prototype.getValue=function(t){var e=xo(r.Editor.nodes(t,{match:function(t){return !!t.indent},universal:!0}),1),n=e[0];return null==n?\"\":xo(n,1)[0].indent||\"\"},t.prototype.isActive=function(t){return !1},t.prototype.getMatchNode=function(t){var n=xo(r.Editor.nodes(t,{match:function(t){var n=e.DomEditor.getNodeType(t);return \"paragraph\"===n||!!n.startsWith(\"header\")},universal:!0,mode:\"highest\"}),1)[0];return null==n?null:n[0]},t}(),Jd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"indent.decrease\"),n.iconSvg=Qo,n}return vo(n,t),n.prototype.isDisabled=function(t){var e=this.getMatchNode(t);return null==e||!e.indent},n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{indent:null},{match:function(t){return r.Element.isElement(t)}});},n}(Yd),Kd=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"indent.increase\"),n.iconSvg=Zo,n}return vo(n,t),n.prototype.isDisabled=function(t){var e=this.getMatchNode(t);return null==e||!!e.indent},n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{indent:\"2em\"},{match:function(t){return r.Element.isElement(t)},mode:\"highest\"});},n}(Yd),Qd={renderStyle:function(t,e){if(!r.Element.isElement(t))return e;var n=t.indent,o=e;return n&&au(o,{textIndent:n}),o},styleToHtml:function(t,e){if(!r.Element.isElement(t))return e;var n=t.indent;if(!n)return e;var o=c.default(e);return o.css(\"text-indent\",n),so(o)},preParseHtml:[Xd],parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Element.isElement(e))return e;var i=e,u=po(o,\"text-indent\"),a=parseInt(u,10);return u&&a>0&&(i.indent=u),i},menus:[{key:\"indent\",factory:function(){return new Kd}},{key:\"delIndent\",factory:function(){return new Jd}}]};var Zd=function(){function t(){this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.getMatchNode=function(t){var n=xo(r.Editor.nodes(t,{match:function(t){var n=e.DomEditor.getNodeType(t);return \"paragraph\"===n||(\"blockquote\"===n||!!n.startsWith(\"header\"))},universal:!0,mode:\"highest\"}),1)[0];return null==n?null:n[0]},t.prototype.isDisabled=function(t){return null==t.selection||!!e.DomEditor.getSelectedElems(t).some((function(e){if(r.Editor.isVoid(t,e)&&r.Editor.isBlock(t,e))return !0;var n=e.type;return !![\"pre\",\"code\"].includes(n)||void 0}))},t}(),tp=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"justify.left\"),n.iconSvg=ti,n}return vo(n,t),n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{textAlign:\"left\"},{match:function(e){return r.Element.isElement(e)&&!t.isInline(e)}});},n}(Zd),ep=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"justify.right\"),n.iconSvg=ei,n}return vo(n,t),n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{textAlign:\"right\"},{match:function(e){return r.Element.isElement(e)&&!t.isInline(e)}});},n}(Zd),np=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"justify.center\"),n.iconSvg=ni,n}return vo(n,t),n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{textAlign:\"center\"},{match:function(e){return r.Element.isElement(e)&&!t.isInline(e)}});},n}(Zd),rp=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.title=e.t(\"justify.justify\"),n.iconSvg=ri,n}return vo(n,t),n.prototype.exec=function(t,e){r.Transforms.setNodes(t,{textAlign:\"justify\"},{match:function(e){return r.Element.isElement(e)&&!t.isInline(e)}});},n}(Zd),op={renderStyle:function(t,e){if(!r.Element.isElement(t))return e;var n=t.textAlign,o=e;return n&&au(o,{textAlign:n}),o},styleToHtml:function(t,e){if(!r.Element.isElement(t))return e;var n=t.textAlign;if(!n)return e;var o=c.default(e);return o.css(\"text-align\",n),so(o)},parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Element.isElement(e))return e;var i=e,u=po(o,\"text-align\");return u&&(i.textAlign=u),i},menus:[{key:\"justifyLeft\",factory:function(){return new tp}},{key:\"justifyRight\",factory:function(){return new ep}},{key:\"justifyCenter\",factory:function(){return new np}},{key:\"justifyJustify\",factory:function(){return new rp}}]};var ip=function(){function t(){this.title=e.t(\"lineHeight.title\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M964 788a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526zM198.93 144.306c6.668-5.798 16.774-5.094 22.573 1.574l122.26 140.582a16 16 0 0 1 3.927 10.5c0 8.836-7.164 16-16 16h-61.8a8 8 0 0 0-8 8v390.077h69.819a16 16 0 0 1 10.502 3.928c6.666 5.8 7.37 15.906 1.57 22.573L221.476 878.123a16 16 0 0 1-1.57 1.57c-6.668 5.8-16.774 5.097-22.574-1.57L75.051 737.538a16 16 0 0 1-3.928-10.5c0-8.837 7.163-16 16-16h69.822V312.96H87.127a16 16 0 0 1-10.502-3.928c-6.666-5.8-7.37-15.906-1.57-22.573l122.303-140.582a16 16 0 0 1 1.572-1.572zM964 465a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z m0-323a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z\"></path></svg>',this.tag=\"select\",this.width=80;}return t.prototype.getOptions=function(t){var n=[],r=t.getMenuConfig(\"lineHeight\").lineHeightList,o=void 0===r?[]:r;n.push({text:e.t(\"lineHeight.default\"),value:\"\"}),o.forEach((function(t){n.push({text:t,value:t});}));var i=this.getValue(t);return n.forEach((function(t){t.value===i?t.selected=!0:delete t.selected;})),n},t.prototype.getMatchNode=function(t){var n=xo(r.Editor.nodes(t,{match:function(t){var n=e.DomEditor.getNodeType(t);return !!n.startsWith(\"header\")||!![\"paragraph\",\"blockquote\",\"list-item\"].includes(n)},universal:!0,mode:\"highest\"}),1)[0];return null==n?null:n[0]},t.prototype.isActive=function(t){return !1},t.prototype.getValue=function(t){var e=this.getMatchNode(t);return null==e?\"\":r.Element.isElement(e)&&e.lineHeight||\"\"},t.prototype.isDisabled=function(t){return null==t.selection||null==this.getMatchNode(t)},t.prototype.exec=function(t,e){r.Transforms.setNodes(t,{lineHeight:e.toString()},{mode:\"highest\"});},t}();var up={renderStyle:function(t,e){if(!r.Element.isElement(t))return e;var n=t.lineHeight,o=e;return n&&au(o,{lineHeight:n}),o},styleToHtml:function(t,e){if(!r.Element.isElement(t))return e;var n=t.lineHeight;if(!n)return e;var o=c.default(e);return o.css(\"line-height\",n),so(o)},parseStyleHtml:function(t,e,n){var o=c.default(t);if(!r.Element.isElement(e))return e;var i=e,u=n.getMenuConfig(\"lineHeight\").lineHeightList,a=void 0===u?[]:u,l=po(o,\"line-height\");return l&&a.includes(l)&&(i.lineHeight=l),i},menus:[{key:\"lineHeight\",factory:function(){return new ip},config:{lineHeightList:[\"1\",\"1.15\",\"1.5\",\"2\",\"2.5\",\"3\"]}}]},ap=function(){function t(){this.title=e.t(\"undo.redo\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M0.00032 576a510.72 510.72 0 0 0 173.344 384l84.672-96A383.136 383.136 0 0 1 128.00032 576C128.00032 363.936 299.93632 192 512.00032 192c106.048 0 202.048 42.976 271.52 112.48L640.00032 448h384V64l-149.984 149.984A510.272 510.272 0 0 0 512.00032 64C229.21632 64 0.00032 293.216 0.00032 576z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection},t.prototype.exec=function(t,e){\"function\"==typeof t.redo&&t.redo();},t}(),cp=function(){function t(){this.title=e.t(\"undo.undo\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M512 64A510.272 510.272 0 0 0 149.984 213.984L0.032 64v384h384L240.512 304.48A382.784 382.784 0 0 1 512.032 192c212.064 0 384 171.936 384 384 0 114.688-50.304 217.632-130.016 288l84.672 96a510.72 510.72 0 0 0 173.344-384c0-282.784-229.216-512-512-512z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection},t.prototype.exec=function(t,e){\"function\"==typeof t.undo&&t.undo();},t}(),lp={menus:[{key:\"redo\",factory:function(){return new ap}},{key:\"undo\",factory:function(){return new cp}}]};var sp={type:\"divider\",renderElem:function(t,r,o){var i=e.DomEditor.isNodeSelected(o,t);return n.h(\"div\",{props:{contentEditable:!1,className:\"w-e-textarea-divider\"},dataset:{selected:i?\"true\":\"\"},style:{},on:{mousedown:function(t){return t.preventDefault()}}},[n.h(\"hr\")])}};var fp={type:\"divider\",elemToHtml:function(t,e){return \"<hr/>\"}};var dp={selector:\"hr:not([data-w-e-type])\",parseElemHtml:function(t,e,n){return {type:\"divider\",children:[{text:\"\"}]}}},pp=function(){function t(){this.title=e.t(\"divider.title\"),this.iconSvg='<svg viewBox=\"0 0 1092 1024\"><path d=\"M0 51.2m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z\"></path><path d=\"M0 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z\"></path><path d=\"M819.2 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z\"></path><path d=\"M409.6 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z\"></path><path d=\"M0 870.4m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){return null==t.selection||!!e.DomEditor.getSelectedElems(t).some((function(n){if(t.isVoid(n))return !0;var r=e.DomEditor.getNodeType(n);return \"table\"===r||(\"pre\"===r||void 0)}))},t.prototype.exec=function(t,e){r.Transforms.insertNodes(t,{type:\"divider\",children:[{text:\"\"}]},{mode:\"highest\"});},t}(),hp={renderElems:[sp],elemsToHtml:[fp],parseElemsHtml:[dp],menus:[{key:\"divider\",factory:function(){return new pp}}],editorPlugin:function(t){var n=t.isVoid,o=t.normalizeNode,i=t;return i.isVoid=function(t){return \"divider\"===t.type||n(t)},i.normalizeNode=function(t){var n=xo(t,2),u=n[0],a=n[1];if(\"divider\"!==e.DomEditor.getNodeType(u))return o([u,a]);e.DomEditor.isLastNode(i,u)&&r.Transforms.insertNodes(i,e.DomEditor.genEmptyParagraph(),{at:[a[0]+1]});},i}},vp=dn.map;qe({target:\"Array\",proto:!0,forced:!hn(\"map\")},{map:function(t){return vp(this,t,arguments.length>1?arguments[1]:void 0)}});var gp=D([].join),mp=V!=Object,yp=Lo(\"join\",\",\");qe({target:\"Array\",proto:!0,forced:mp||!yp},{join:function(t){return gp(F(this),void 0===t?\",\":t)}});var bp=function(){function t(){this.title=e.t(\"codeBlock.title\"),this.iconSvg='<svg viewBox=\"0 0 1280 1024\"><path d=\"M832 736l96 96 320-320L928 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224zM701.312 150.528l69.472 18.944-192 704.032-69.472-18.944 192-704.032z\"></path></svg>',this.tag=\"button\";}return t.prototype.getSelectCodeElem=function(t){var n=e.DomEditor.getSelectedNodeByType(t,\"code\");if(null==n)return null;var r=e.DomEditor.getParentNode(t,n);return null==r||\"pre\"!==e.DomEditor.getNodeType(r)?null:n},t.prototype.getValue=function(t){var e=this.getSelectCodeElem(t);return null==e?\"\":e.language||\"\"},t.prototype.isActive=function(t){return !!this.getSelectCodeElem(t)},t.prototype.isDisabled=function(t){if(null==t.selection)return !0;var n=e.DomEditor.getSelectedElems(t);return !!n.some((function(e){return t.isVoid(e)}))||!n.some((function(t){var n=e.DomEditor.getNodeType(t);if(\"pre\"===n||\"paragraph\"===n)return !0}))},t.prototype.exec=function(t,e){this.isActive(t)?this.changeToPlainText(t):this.changeToCodeBlock(t,e.toString());},t.prototype.changeToPlainText=function(t){var e=this.getSelectCodeElem(t);if(null!=e){var n=r.Node.string(e);r.Transforms.removeNodes(t,{mode:\"highest\"});var o=n.split(\"\\n\").map((function(t){return {type:\"paragraph\",children:[{text:t}]}}));r.Transforms.insertNodes(t,o,{mode:\"highest\"});}},t.prototype.changeToCodeBlock=function(t,e){var n,o,i=[],u=r.Editor.nodes(t,{match:function(e){return t.children.includes(e)},universal:!0});try{for(var a=bo(u),c=a.next();!c.done;c=a.next()){var l=xo(c.value,1)[0];l&&i.push(r.Node.string(l));}}catch(t){n={error:t};}finally{try{c&&!c.done&&(o=a.return)&&o.call(a);}finally{if(n)throw n.error}}r.Transforms.removeNodes(t,{mode:\"highest\"});var s={type:\"pre\",children:[{type:\"code\",language:e,children:[{text:i.join(\"\\n\")}]}]};r.Transforms.insertNodes(t,s,{mode:\"highest\"});},t}(),xp={key:\"codeBlock\",factory:function(){return new bp}};qe({target:\"String\",proto:!0,forced:Mo(\"anchor\")},{anchor:function(t){return To(this,\"a\",\"name\",t)}}),ir(\"match\",(function(t,e,n){return [function(e){var n=R(this),r=null==e?void 0:at(e,t);return r?E(r,e,n):new RegExp(e)[t](bn(n))},function(t){var r=Bt(this),o=bn(t),i=n(e,r,o);if(i.done)return i.value;if(!r.global)return xr(r,o);var u=r.unicode;r.lastIndex=0;for(var a,c=[],l=0;null!==(a=xr(r,o));){var s=bn(a[0]);c[l]=s,\"\"===s&&(r.lastIndex=fr(o,we(r.lastIndex),u)),l++;}return 0===l?null:c}]}));var wp={menus:[xp],editorPlugin:function(t){var n=t.insertBreak,o=t.normalizeNode,i=t.insertData;t.insertNode;var u=t;return u.insertBreak=function(){var t=e.DomEditor.getSelectedNodeByType(u,\"code\");if(null!=t){var o=function(t,e){var n=e.selection;if(null==n)return \"\";var o=r.Node.string(t),i=n.anchor.offset,u=o.slice(0,i).split(\"\\n\"),a=u.length;return 0===a?\"\":u[a-1]}(t,u);if(o){var i=o.match(/^\\s+/);if(null!=i&&null!=i[0]){var a=i[0];return void u.insertText(\"\\n\"+a)}}u.insertText(\"\\n\");}else n();},u.normalizeNode=function(t){var n=xo(t,2),i=n[0],a=n[1],c=e.DomEditor.getNodeType(i);(\"code\"===c&&a.length<=1&&r.Transforms.setNodes(u,{type:\"paragraph\"},{at:a}),\"pre\"===c)&&(e.DomEditor.isLastNode(u,i)&&r.Transforms.insertNodes(u,e.DomEditor.genEmptyParagraph(),{at:[a[0]+1]}),\"code\"!==e.DomEditor.getNodeType(i.children[0])&&(r.Transforms.unwrapNodes(u),r.Transforms.setNodes(u,{type:\"paragraph\"},{mode:\"highest\"})));return o([i,a])},u.insertData=function(t){if(null!=e.DomEditor.getSelectedNodeByType(u,\"code\")){var n=t.getData(\"text/plain\");r.Editor.insertText(u,n);}else i(t);},u},renderElems:[{type:\"pre\",renderElem:function(t,e,r){return n.jsx(\"pre\",null,e)}},{type:\"code\",renderElem:function(t,e,r){return n.jsx(\"code\",null,e)}}],elemsToHtml:[{type:\"code\",elemToHtml:function(t,e){return \"<code>\"+e+\"</code>\"}},{type:\"pre\",elemToHtml:function(t,e){return \"<pre>\"+e+\"</pre>\"}}],preParseHtml:[{selector:\"pre>code\",preParseHtml:function(t){var e=c.default(t);if(\"code\"!==fo(e))return t;var n=e.find(\"xmp\");if(0===n.length)return t;var r=n.text();return n.remove(),e.text(r),e[0]}}],parseElemsHtml:[{selector:\"pre:not([data-w-e-type])>code\",parseElemHtml:function(t,e,n){return {type:\"code\",language:\"\",children:[{text:c.default(t)[0].textContent||\"\"}]}}},{selector:\"pre:not([data-w-e-type])\",parseElemHtml:function(t,n,r){var o=c.default(t);return 0===(n=n.filter((function(t){return \"code\"===e.DomEditor.getNodeType(t)}))).length&&(n=[{type:\"code\",language:\"\",children:[{text:o[0].textContent||\"\"}]}]),{type:\"pre\",children:n.filter((function(t){return \"code\"===e.DomEditor.getNodeType(t)}))}}}]},Ep=function(){function t(){this.title=e.t(\"fullScreen.title\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M133.705143 335.433143V133.851429h201.581714a29.622857 29.622857 0 0 0 29.622857-29.549715V68.754286a29.622857 29.622857 0 0 0-29.622857-29.622857H61.732571A22.893714 22.893714 0 0 0 38.765714 62.025143V335.725714c0 16.310857 13.238857 29.622857 29.622857 29.622857h35.547429a29.842286 29.842286 0 0 0 29.696-29.842285zM690.980571 133.851429h201.581715v201.654857c0 16.310857 13.238857 29.549714 29.622857 29.549714h35.547428a29.622857 29.622857 0 0 0 29.549715-29.549714V61.952a22.893714 22.893714 0 0 0-22.820572-22.893714h-273.554285a29.622857 29.622857 0 0 0-29.549715 29.622857v35.547428c0 16.310857 13.238857 29.696 29.622857 29.696zM335.286857 892.781714H133.705143V691.2a29.622857 29.622857 0 0 0-29.622857-29.622857H68.534857a29.622857 29.622857 0 0 0-29.549714 29.622857v273.554286c0 12.653714 10.24 22.893714 22.820571 22.893714h273.554286a29.622857 29.622857 0 0 0 29.696-29.622857v-35.547429a29.769143 29.769143 0 0 0-29.769143-29.696z m557.348572-201.581714v201.581714H690.907429a29.622857 29.622857 0 0 0-29.622858 29.622857v35.547429c0 16.310857 13.238857 29.622857 29.622858 29.622857h273.554285c12.580571 0 22.893714-10.313143 22.893715-22.893714V691.2a29.622857 29.622857 0 0 0-29.622858-29.622857h-35.547428a29.622857 29.622857 0 0 0-29.696 29.622857z\"></path></svg>',this.tag=\"button\",this.alwaysEnable=!0;}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return t.isFullScreen},t.prototype.isDisabled=function(t){return !1},t.prototype.exec=function(t,e){t.isFullScreen?t.unFullScreen():t.fullScreen();},t}(),Sp={menus:[{key:\"fullScreen\",factory:function(){return new Ep}}]},kp=function(){function t(){this.title=e.t(\"common.enter\"),this.iconSvg='<svg viewBox=\"0 0 1255 1024\"><path d=\"M1095.111111 731.477333h-625.777778V1024L0 658.318222 469.333333 292.408889v292.636444h625.777778V0h156.444445v731.477333z\"></path></svg>',this.tag=\"button\";}return t.prototype.getValue=function(t){return \"\"},t.prototype.isActive=function(t){return !1},t.prototype.isDisabled=function(t){var e=t.selection;return null==e||!!r.Range.isExpanded(e)},t.prototype.exec=function(t,e){var n=t.selection;if(null!=n){var o=[n.anchor.path[0]];r.Transforms.insertNodes(t,{type:\"paragraph\",children:[{text:\"\"}]},{at:o}),t.select(r.Editor.start(t,o));}},t}(),Tp=[hi,pu,Ud,Qd,op,up,ga,hp,Da,Pu,wp,Oa,nu,Eo,ba,lp,Sp,{menus:[{key:\"enter\",factory:function(){return new kp}}]}];t.default=Tp,t.insertImageNode=na,t.isInsertImageMenuDisabled=oa,t.updateImageNode=ra,Object.defineProperty(t,\"__esModule\",{value:!0});}));\n\n  });\n\n  var basicModules = /*@__PURE__*/getDefaultExportFromCjs(dist$5);\n\n  var dist$4 = createCommonjsModule$1(function (module, exports) {\n  !function(t,e){module.exports=e(dist$6,require$$2$1,require$$2,require$$1);}(commonjsGlobal,(function(t,e,r,n){function o(t){return t&&\"object\"==typeof t&&\"default\"in t?t:{default:t}}var i=o(n);t.i18nAddResources(\"en\",{listModule:{unOrderedList:\"Unordered list\",orderedList:\"Ordered list\"}}),t.i18nAddResources(\"zh-CN\",{listModule:{unOrderedList:\"无序列表\",orderedList:\"有序列表\"}});var u=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function a(t){var e={exports:{}};return t(e,e.exports),e.exports}var c,f,l=function(t){return t&&t.Math==Math&&t},s=l(\"object\"==typeof globalThis&&globalThis)||l(\"object\"==typeof window&&window)||l(\"object\"==typeof self&&self)||l(\"object\"==typeof u&&u)||function(){return this}()||Function(\"return this\")(),d=Function.prototype,v=d.bind,p=d.call,y=v&&v.bind(p),h=v?function(t){return t&&y(p,t)}:function(t){return t&&function(){return p.apply(t,arguments)}},g=function(t){try{return !!t()}catch(t){return !0}},b=h({}.toString),m=h(\"\".slice),w=function(t){return m(b(t),8,-1)},x=s.Object,S=h(\"\".split),O=g((function(){return !x(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==w(t)?S(t,\"\"):x(t)}:x,E=s.TypeError,T=function(t){if(null==t)throw E(\"Can't call method on \"+t);return t},j=function(t){return O(T(t))},A=Object.defineProperty,I=function(t,e){try{A(s,t,{value:e,configurable:!0,writable:!0});}catch(r){s[t]=e;}return e},P=\"__core-js_shared__\",R=s[P]||I(P,{}),L=a((function(t){(t.exports=function(t,e){return R[t]||(R[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),k=s.Object,M=function(t){return k(T(t))},N=h({}.hasOwnProperty),_=Object.hasOwn||function(t,e){return N(M(t),e)},z=0,D=Math.random(),C=h(1..toString),F=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+C(++z+D,36)},H=function(t){return \"function\"==typeof t},B=function(t){return H(t)?t:void 0},G=function(t,e){return arguments.length<2?B(s[t]):s[t]&&s[t][e]},$=G(\"navigator\",\"userAgent\")||\"\",V=s.process,W=s.Deno,U=V&&V.versions||W&&W.version,q=U&&U.v8;q&&(f=(c=q.split(\".\"))[0]>0&&c[0]<4?1:+(c[0]+c[1])),!f&&$&&(!(c=$.match(/Edge\\/(\\d+)/))||c[1]>=74)&&(c=$.match(/Chrome\\/(\\d+)/))&&(f=+c[1]);var K,Y=f,X=!!Object.getOwnPropertySymbols&&!g((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&Y&&Y<41})),J=X&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,Q=L(\"wks\"),Z=s.Symbol,tt=Z&&Z.for,et=J?Z:Z&&Z.withoutSetter||F,rt=function(t){if(!_(Q,t)||!X&&\"string\"!=typeof Q[t]){var e=\"Symbol.\"+t;X&&_(Z,t)?Q[t]=Z[t]:Q[t]=J&&tt?tt(e):et(e);}return Q[t]},nt=function(t){return \"object\"==typeof t?null!==t:H(t)},ot=s.String,it=s.TypeError,ut=function(t){if(nt(t))return t;throw it(ot(t)+\" is not an object\")},at=!g((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),ct=s.document,ft=nt(ct)&&nt(ct.createElement),lt=function(t){return ft?ct.createElement(t):{}},st=!at&&!g((function(){return 7!=Object.defineProperty(lt(\"div\"),\"a\",{get:function(){return 7}}).a})),dt=Function.prototype.call,vt=dt.bind?dt.bind(dt):function(){return dt.apply(dt,arguments)},pt=h({}.isPrototypeOf),yt=s.Object,ht=J?function(t){return \"symbol\"==typeof t}:function(t){var e=G(\"Symbol\");return H(e)&&pt(e.prototype,yt(t))},gt=s.String,bt=function(t){try{return gt(t)}catch(t){return \"Object\"}},mt=s.TypeError,wt=function(t){if(H(t))return t;throw mt(bt(t)+\" is not a function\")},xt=function(t,e){var r=t[e];return null==r?void 0:wt(r)},St=s.TypeError,Ot=s.TypeError,Et=rt(\"toPrimitive\"),Tt=function(t,e){if(!nt(t)||ht(t))return t;var r,n=xt(t,Et);if(n){if(void 0===e&&(e=\"default\"),r=vt(n,t,e),!nt(r)||ht(r))return r;throw Ot(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var r,n;if(\"string\"===e&&H(r=t.toString)&&!nt(n=vt(r,t)))return n;if(H(r=t.valueOf)&&!nt(n=vt(r,t)))return n;if(\"string\"!==e&&H(r=t.toString)&&!nt(n=vt(r,t)))return n;throw St(\"Can't convert object to primitive value\")}(t,e)},jt=function(t){var e=Tt(t,\"string\");return ht(e)?e:e+\"\"},At=s.TypeError,It=Object.defineProperty,Pt={f:at?It:function(t,e,r){if(ut(t),e=jt(e),ut(r),st)try{return It(t,e,r)}catch(t){}if(\"get\"in r||\"set\"in r)throw At(\"Accessors not supported\");return \"value\"in r&&(t[e]=r.value),t}},Rt=Math.ceil,Lt=Math.floor,kt=function(t){var e=+t;return e!=e||0===e?0:(e>0?Lt:Rt)(e)},Mt=Math.max,Nt=Math.min,_t=function(t,e){var r=kt(t);return r<0?Mt(r+e,0):Nt(r,e)},zt=Math.min,Dt=function(t){return t>0?zt(kt(t),9007199254740991):0},Ct=function(t){return Dt(t.length)},Ft=function(t){return function(e,r,n){var o,i=j(e),u=Ct(i),a=_t(n,u);if(t&&r!=r){for(;u>a;)if((o=i[a++])!=o)return !0}else for(;u>a;a++)if((t||a in i)&&i[a]===r)return t||a||0;return !t&&-1}},Ht={includes:Ft(!0),indexOf:Ft(!1)},Bt={},Gt=Ht.indexOf,$t=h([].push),Vt=function(t,e){var r,n=j(t),o=0,i=[];for(r in n)!_(Bt,r)&&_(n,r)&&$t(i,r);for(;e.length>o;)_(n,r=e[o++])&&(~Gt(i,r)||$t(i,r));return i},Wt=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],Ut=Object.keys||function(t){return Vt(t,Wt)},qt=at?Object.defineProperties:function(t,e){ut(t);for(var r,n=j(e),o=Ut(e),i=o.length,u=0;i>u;)Pt.f(t,r=o[u++],n[r]);return t},Kt=G(\"document\",\"documentElement\"),Yt=L(\"keys\"),Xt=function(t){return Yt[t]||(Yt[t]=F(t))},Jt=Xt(\"IE_PROTO\"),Qt=function(){},Zt=function(t){return \"<script>\"+t+\"</\"+\"script>\"},te=function(t){t.write(Zt(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},ee=function(){try{K=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;ee=\"undefined\"!=typeof document?document.domain&&K?te(K):((e=lt(\"iframe\")).style.display=\"none\",Kt.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(Zt(\"document.F=Object\")),t.close(),t.F):te(K);for(var r=Wt.length;r--;)delete ee.prototype[Wt[r]];return ee()};Bt[Jt]=!0;var re=Object.create||function(t,e){var r;return null!==t?(Qt.prototype=ut(t),r=new Qt,Qt.prototype=null,r[Jt]=t):r=ee(),void 0===e?r:qt(r,e)},ne=rt(\"unscopables\"),oe=Array.prototype;null==oe[ne]&&Pt.f(oe,ne,{configurable:!0,value:re(null)});var ie=function(t){oe[ne][t]=!0;},ue={},ae=h(Function.toString);H(R.inspectSource)||(R.inspectSource=function(t){return ae(t)});var ce,fe,le,se=R.inspectSource,de=s.WeakMap,ve=H(de)&&/native code/.test(se(de)),pe=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},ye=at?function(t,e,r){return Pt.f(t,e,pe(1,r))}:function(t,e,r){return t[e]=r,t},he=\"Object already initialized\",ge=s.TypeError,be=s.WeakMap;if(ve||R.state){var me=R.state||(R.state=new be),we=h(me.get),xe=h(me.has),Se=h(me.set);ce=function(t,e){if(xe(me,t))throw new ge(he);return e.facade=t,Se(me,t,e),e},fe=function(t){return we(me,t)||{}},le=function(t){return xe(me,t)};}else {var Oe=Xt(\"state\");Bt[Oe]=!0,ce=function(t,e){if(_(t,Oe))throw new ge(he);return e.facade=t,ye(t,Oe,e),e},fe=function(t){return _(t,Oe)?t[Oe]:{}},le=function(t){return _(t,Oe)};}var Ee,Te,je,Ae={set:ce,get:fe,has:le,enforce:function(t){return le(t)?fe(t):ce(t,{})},getterFor:function(t){return function(e){var r;if(!nt(e)||(r=fe(e)).type!==t)throw ge(\"Incompatible receiver, \"+t+\" required\");return r}}},Ie={}.propertyIsEnumerable,Pe=Object.getOwnPropertyDescriptor,Re={f:Pe&&!Ie.call({1:2},1)?function(t){var e=Pe(this,t);return !!e&&e.enumerable}:Ie},Le=Object.getOwnPropertyDescriptor,ke={f:at?Le:function(t,e){if(t=j(t),e=jt(e),st)try{return Le(t,e)}catch(t){}if(_(t,e))return pe(!vt(Re.f,t,e),t[e])}},Me=Function.prototype,Ne=at&&Object.getOwnPropertyDescriptor,_e=_(Me,\"name\"),ze={EXISTS:_e,PROPER:_e&&\"something\"===function(){}.name,CONFIGURABLE:_e&&(!at||at&&Ne(Me,\"name\").configurable)},De=a((function(t){var e=ze.CONFIGURABLE,r=Ae.get,n=Ae.enforce,o=String(String).split(\"String\");(t.exports=function(t,r,i,u){var a,c=!!u&&!!u.unsafe,f=!!u&&!!u.enumerable,l=!!u&&!!u.noTargetGet,d=u&&void 0!==u.name?u.name:r;H(i)&&(\"Symbol(\"===String(d).slice(0,7)&&(d=\"[\"+String(d).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!_(i,\"name\")||e&&i.name!==d)&&ye(i,\"name\",d),(a=n(i)).source||(a.source=o.join(\"string\"==typeof d?d:\"\"))),t!==s?(c?!l&&t[r]&&(f=!0):delete t[r],f?t[r]=i:ye(t,r,i)):f?t[r]=i:I(r,i);})(Function.prototype,\"toString\",(function(){return H(this)&&r(this).source||se(this)}));})),Ce=Wt.concat(\"length\",\"prototype\"),Fe={f:Object.getOwnPropertyNames||function(t){return Vt(t,Ce)}},He={f:Object.getOwnPropertySymbols},Be=h([].concat),Ge=G(\"Reflect\",\"ownKeys\")||function(t){var e=Fe.f(ut(t)),r=He.f;return r?Be(e,r(t)):e},$e=function(t,e){for(var r=Ge(e),n=Pt.f,o=ke.f,i=0;i<r.length;i++){var u=r[i];_(t,u)||n(t,u,o(e,u));}},Ve=/#|\\.prototype\\./,We=function(t,e){var r=qe[Ue(t)];return r==Ye||r!=Ke&&(H(e)?g(e):!!e)},Ue=We.normalize=function(t){return String(t).replace(Ve,\".\").toLowerCase()},qe=We.data={},Ke=We.NATIVE=\"N\",Ye=We.POLYFILL=\"P\",Xe=We,Je=ke.f,Qe=function(t,e){var r,n,o,i,u,a=t.target,c=t.global,f=t.stat;if(r=c?s:f?s[a]||I(a,{}):(s[a]||{}).prototype)for(n in e){if(i=e[n],o=t.noTargetGet?(u=Je(r,n))&&u.value:r[n],!Xe(c?n:a+(f?\".\":\"#\")+n,t.forced)&&void 0!==o){if(typeof i==typeof o)continue;$e(i,o);}(t.sham||o&&o.sham)&&ye(i,\"sham\",!0),De(r,n,i,t);}},Ze=!g((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),tr=Xt(\"IE_PROTO\"),er=s.Object,rr=er.prototype,nr=Ze?er.getPrototypeOf:function(t){var e=M(t);if(_(e,tr))return e[tr];var r=e.constructor;return H(r)&&e instanceof r?r.prototype:e instanceof er?rr:null},or=rt(\"iterator\"),ir=!1;[].keys&&(\"next\"in(je=[].keys())?(Te=nr(nr(je)))!==Object.prototype&&(Ee=Te):ir=!0);var ur=null==Ee||g((function(){var t={};return Ee[or].call(t)!==t}));ur&&(Ee={}),H(Ee[or])||De(Ee,or,(function(){return this}));var ar={IteratorPrototype:Ee,BUGGY_SAFARI_ITERATORS:ir},cr=Pt.f,fr=rt(\"toStringTag\"),lr=function(t,e,r){t&&!_(t=r?t:t.prototype,fr)&&cr(t,fr,{configurable:!0,value:e});},sr=ar.IteratorPrototype,dr=function(){return this},vr=s.String,pr=s.TypeError,yr=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,r={};try{(t=h(Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set))(r,[]),e=r instanceof Array;}catch(t){}return function(r,n){return ut(r),function(t){if(\"object\"==typeof t||H(t))return t;throw pr(\"Can't set \"+vr(t)+\" as a prototype\")}(n),e?t(r,n):r.__proto__=n,r}}():void 0),hr=ze.PROPER,gr=ze.CONFIGURABLE,br=ar.IteratorPrototype,mr=ar.BUGGY_SAFARI_ITERATORS,wr=rt(\"iterator\"),xr=\"keys\",Sr=\"values\",Or=\"entries\",Er=function(){return this},Tr=function(t,e,r,n,o,i,u){!function(t,e,r,n){var o=e+\" Iterator\";t.prototype=re(sr,{next:pe(+!n,r)}),lr(t,o,!1),ue[o]=dr;}(r,e,n);var a,c,f,l=function(t){if(t===o&&y)return y;if(!mr&&t in v)return v[t];switch(t){case xr:case Sr:case Or:return function(){return new r(this,t)}}return function(){return new r(this)}},s=e+\" Iterator\",d=!1,v=t.prototype,p=v[wr]||v[\"@@iterator\"]||o&&v[o],y=!mr&&p||l(o),h=\"Array\"==e&&v.entries||p;if(h&&(a=nr(h.call(new t)))!==Object.prototype&&a.next&&(nr(a)!==br&&(yr?yr(a,br):H(a[wr])||De(a,wr,Er)),lr(a,s,!0)),hr&&o==Sr&&p&&p.name!==Sr&&(gr?ye(v,\"name\",Sr):(d=!0,y=function(){return vt(p,this)})),o)if(c={values:l(Sr),keys:i?y:l(xr),entries:l(Or)},u)for(f in c)(mr||d||!(f in v))&&De(v,f,c[f]);else Qe({target:e,proto:!0,forced:mr||d},c);return v[wr]!==y&&De(v,wr,y,{name:o}),ue[e]=y,c},jr=\"Array Iterator\",Ar=Ae.set,Ir=Ae.getterFor(jr),Pr=Tr(Array,\"Array\",(function(t,e){Ar(this,{type:jr,target:j(t),index:0,kind:e});}),(function(){var t=Ir(this),e=t.target,r=t.kind,n=t.index++;return !e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==r?{value:n,done:!1}:\"values\"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),\"values\");ue.Arguments=ue.Array,ie(\"keys\"),ie(\"values\"),ie(\"entries\");var Rr={};Rr[rt(\"toStringTag\")]=\"z\";var Lr=\"[object z]\"===String(Rr),kr=rt(\"toStringTag\"),Mr=s.Object,Nr=\"Arguments\"==w(function(){return arguments}()),_r=Lr?w:function(t){var e,r,n;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Mr(t),kr))?r:Nr?w(e):\"Object\"==(n=w(e))&&H(e.callee)?\"Arguments\":n},zr=Lr?{}.toString:function(){return \"[object \"+_r(this)+\"]\"};Lr||De(Object.prototype,\"toString\",zr,{unsafe:!0});var Dr=s.String,Cr=function(t){if(\"Symbol\"===_r(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return Dr(t)},Fr=h(\"\".charAt),Hr=h(\"\".charCodeAt),Br=h(\"\".slice),Gr=function(t){return function(e,r){var n,o,i=Cr(T(e)),u=kt(r),a=i.length;return u<0||u>=a?t?\"\":void 0:(n=Hr(i,u))<55296||n>56319||u+1===a||(o=Hr(i,u+1))<56320||o>57343?t?Fr(i,u):n:t?Br(i,u,u+2):o-56320+(n-55296<<10)+65536}},$r={codeAt:Gr(!1),charAt:Gr(!0)},Vr=$r.charAt,Wr=\"String Iterator\",Ur=Ae.set,qr=Ae.getterFor(Wr);Tr(String,\"String\",(function(t){Ur(this,{type:Wr,string:Cr(t),index:0});}),(function(){var t,e=qr(this),r=e.string,n=e.index;return n>=r.length?{value:void 0,done:!0}:(t=Vr(r,n),e.index+=t.length,{value:t,done:!1})}));var Kr=function(t,e,r){for(var n in e)De(t,n,e[n],r);return t},Yr=s.Array,Xr=Math.max,Jr=Fe.f,Qr=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Zr=function(t){try{return Jr(t)}catch(t){return function(t,e,r){for(var n,o,i,u,a=Ct(t),c=_t(e,a),f=_t(void 0===r?a:r,a),l=Yr(Xr(f-c,0)),s=0;c<f;c++,s++)n=l,o=s,i=t[c],u=void 0,(u=jt(o))in n?Pt.f(n,u,pe(0,i)):n[u]=i;return l.length=s,l}(Qr)}},tn={f:function(t){return Qr&&\"Window\"==w(t)?Zr(t):Jr(j(t))}},en=g((function(){if(\"function\"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,\"a\",{value:8});}})),rn=Object.isExtensible,nn=g((function(){rn(1);}))||en?function(t){return !!nt(t)&&((!en||\"ArrayBuffer\"!=w(t))&&(!rn||rn(t)))}:rn,on=!g((function(){return Object.isExtensible(Object.preventExtensions({}))})),un=a((function(t){var e=Pt.f,r=!1,n=F(\"meta\"),o=0,i=function(t){e(t,n,{value:{objectID:\"O\"+o++,weakData:{}}});},u=t.exports={enable:function(){u.enable=function(){},r=!0;var t=Fe.f,e=h([].splice),o={};o[n]=1,t(o).length&&(Fe.f=function(r){for(var o=t(r),i=0,u=o.length;i<u;i++)if(o[i]===n){e(o,i,1);break}return o},Qe({target:\"Object\",stat:!0,forced:!0},{getOwnPropertyNames:tn.f}));},fastKey:function(t,e){if(!nt(t))return \"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!_(t,n)){if(!nn(t))return \"F\";if(!e)return \"E\";i(t);}return t[n].objectID},getWeakData:function(t,e){if(!_(t,n)){if(!nn(t))return !0;if(!e)return !1;i(t);}return t[n].weakData},onFreeze:function(t){return on&&r&&nn(t)&&!_(t,n)&&i(t),t}};Bt[n]=!0;})),an=h(h.bind),cn=function(t,e){return wt(t),void 0===e?t:an?an(t,e):function(){return t.apply(e,arguments)}},fn=rt(\"iterator\"),ln=Array.prototype,sn=rt(\"iterator\"),dn=function(t){if(null!=t)return xt(t,sn)||xt(t,\"@@iterator\")||ue[_r(t)]},vn=s.TypeError,pn=function(t,e,r){var n,o;ut(t);try{if(!(n=xt(t,\"return\"))){if(\"throw\"===e)throw r;return r}n=vt(n,t);}catch(t){o=!0,n=t;}if(\"throw\"===e)throw r;if(o)throw n;return ut(n),r},yn=s.TypeError,hn=function(t,e){this.stopped=t,this.result=e;},gn=hn.prototype,bn=function(t,e,r){var n,o,i,u,a,c,f,l,s=r&&r.that,d=!(!r||!r.AS_ENTRIES),v=!(!r||!r.IS_ITERATOR),p=!(!r||!r.INTERRUPTED),y=cn(e,s),h=function(t){return n&&pn(n,\"normal\",t),new hn(!0,t)},g=function(t){return d?(ut(t),p?y(t[0],t[1],h):y(t[0],t[1])):p?y(t,h):y(t)};if(v)n=t;else {if(!(o=dn(t)))throw yn(bt(t)+\" is not iterable\");if(void 0!==(l=o)&&(ue.Array===l||ln[fn]===l)){for(i=0,u=Ct(t);u>i;i++)if((a=g(t[i]))&&pt(gn,a))return a;return new hn(!1)}n=function(t,e){var r=arguments.length<2?dn(t):e;if(wt(r))return ut(vt(r,t));throw vn(bt(t)+\" is not iterable\")}(t,o);}for(c=n.next;!(f=vt(c,n)).done;){try{a=g(f.value);}catch(t){pn(n,\"throw\",t);}if(\"object\"==typeof a&&a&&pt(gn,a))return a}return new hn(!1)},mn=s.TypeError,wn=function(t,e){if(pt(e,t))return t;throw mn(\"Incorrect invocation\")},xn=rt(\"iterator\"),Sn=!1;try{var On=0,En={next:function(){return {done:!!On++}},return:function(){Sn=!0;}};En[xn]=function(){return this},Array.from(En,(function(){throw 2}));}catch(t){}var Tn=Array.isArray||function(t){return \"Array\"==w(t)},jn=function(){},An=[],In=G(\"Reflect\",\"construct\"),Pn=/^\\s*(?:class|function)\\b/,Rn=h(Pn.exec),Ln=!Pn.exec(jn),kn=function(t){if(!H(t))return !1;try{return In(jn,An,t),!0}catch(t){return !1}},Mn=!In||g((function(){var t;return kn(kn.call)||!kn(Object)||!kn((function(){t=!0;}))||t}))?function(t){if(!H(t))return !1;switch(_r(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Ln||!!Rn(Pn,se(t))}:kn,Nn=rt(\"species\"),_n=s.Array,zn=function(t,e){return new(function(t){var e;return Tn(t)&&(e=t.constructor,(Mn(e)&&(e===_n||Tn(e.prototype))||nt(e)&&null===(e=e[Nn]))&&(e=void 0)),void 0===e?_n:e}(t))(0===e?0:e)},Dn=h([].push),Cn=function(t){var e=1==t,r=2==t,n=3==t,o=4==t,i=6==t,u=7==t,a=5==t||i;return function(c,f,l,s){for(var d,v,p=M(c),y=O(p),h=cn(f,l),g=Ct(y),b=0,m=s||zn,w=e?m(c,g):r||u?m(c,0):void 0;g>b;b++)if((a||b in y)&&(v=h(d=y[b],b,p),t))if(e)w[b]=v;else if(v)switch(t){case 3:return !0;case 5:return d;case 6:return b;case 2:Dn(w,d);}else switch(t){case 4:return !1;case 7:Dn(w,d);}return i?-1:n||o?o:w}},Fn={forEach:Cn(0),map:Cn(1),filter:Cn(2),some:Cn(3),every:Cn(4),find:Cn(5),findIndex:Cn(6),filterReject:Cn(7)},Hn=un.getWeakData,Bn=Ae.set,Gn=Ae.getterFor,$n=Fn.find,Vn=Fn.findIndex,Wn=h([].splice),Un=0,qn=function(t){return t.frozen||(t.frozen=new Kn)},Kn=function(){this.entries=[];},Yn=function(t,e){return $n(t.entries,(function(t){return t[0]===e}))};Kn.prototype={get:function(t){var e=Yn(this,t);if(e)return e[1]},has:function(t){return !!Yn(this,t)},set:function(t,e){var r=Yn(this,t);r?r[1]=e:this.entries.push([t,e]);},delete:function(t){var e=Vn(this.entries,(function(e){return e[0]===t}));return ~e&&Wn(this.entries,e,1),!!~e}};var Xn,Jn={getConstructor:function(t,e,r,n){var o=t((function(t,o){wn(t,i),Bn(t,{type:e,id:Un++,frozen:void 0}),null!=o&&bn(o,t[n],{that:t,AS_ENTRIES:r});})),i=o.prototype,u=Gn(e),a=function(t,e,r){var n=u(t),o=Hn(ut(e),!0);return !0===o?qn(n).set(e,r):o[n.id]=r,t};return Kr(i,{delete:function(t){var e=u(this);if(!nt(t))return !1;var r=Hn(t);return !0===r?qn(e).delete(t):r&&_(r,e.id)&&delete r[e.id]},has:function(t){var e=u(this);if(!nt(t))return !1;var r=Hn(t);return !0===r?qn(e).has(t):r&&_(r,e.id)}}),Kr(i,r?{get:function(t){var e=u(this);if(nt(t)){var r=Hn(t);return !0===r?qn(e).get(t):r?r[e.id]:void 0}},set:function(t,e){return a(this,t,e)}}:{add:function(t){return a(this,t,!0)}}),o}},Qn=Ae.enforce,Zn=!s.ActiveXObject&&\"ActiveXObject\"in s,to=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},eo=function(t,e,r){var n=-1!==t.indexOf(\"Map\"),o=-1!==t.indexOf(\"Weak\"),i=n?\"set\":\"add\",u=s[t],a=u&&u.prototype,c=u,f={},l=function(t){var e=h(a[t]);De(a,t,\"add\"==t?function(t){return e(this,0===t?0:t),this}:\"delete\"==t?function(t){return !(o&&!nt(t))&&e(this,0===t?0:t)}:\"get\"==t?function(t){return o&&!nt(t)?void 0:e(this,0===t?0:t)}:\"has\"==t?function(t){return !(o&&!nt(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this});};if(Xe(t,!H(u)||!(o||a.forEach&&!g((function(){(new u).entries().next();})))))c=r.getConstructor(e,t,n,i),un.enable();else if(Xe(t,!0)){var d=new c,v=d[i](o?{}:-0,1)!=d,p=g((function(){d.has(1);})),y=function(t,e){if(!e&&!Sn)return !1;var r=!1;try{var n={};n[xn]=function(){return {next:function(){return {done:r=!0}}}},t(n);}catch(t){}return r}((function(t){new u(t);})),b=!o&&g((function(){for(var t=new u,e=5;e--;)t[i](e,e);return !t.has(-0)}));y||((c=e((function(t,e){wn(t,a);var r=function(t,e,r){var n,o;return yr&&H(n=e.constructor)&&n!==r&&nt(o=n.prototype)&&o!==r.prototype&&yr(t,o),t}(new u,t,c);return null!=e&&bn(e,r[i],{that:r,AS_ENTRIES:n}),r}))).prototype=a,a.constructor=c),(p||b)&&(l(\"delete\"),l(\"has\"),n&&l(\"get\")),(b||v)&&l(i),o&&a.clear&&delete a.clear;}return f[t]=c,Qe({global:!0,forced:c!=u},f),lr(c,t),o||r.setStrong(c,t,n),c}(\"WeakMap\",to,Jn);if(ve&&Zn){Xn=Jn.getConstructor(to,\"WeakMap\",!0),un.enable();var ro=eo.prototype,no=h(ro.delete),oo=h(ro.has),io=h(ro.get),uo=h(ro.set);Kr(ro,{delete:function(t){if(nt(t)&&!nn(t)){var e=Qn(this);return e.frozen||(e.frozen=new Xn),no(this,t)||e.frozen.delete(t)}return no(this,t)},has:function(t){if(nt(t)&&!nn(t)){var e=Qn(this);return e.frozen||(e.frozen=new Xn),oo(this,t)||e.frozen.has(t)}return oo(this,t)},get:function(t){if(nt(t)&&!nn(t)){var e=Qn(this);return e.frozen||(e.frozen=new Xn),oo(this,t)?io(this,t):e.frozen.get(t)}return io(this,t)},set:function(t,e){if(nt(t)&&!nn(t)){var r=Qn(this);r.frozen||(r.frozen=new Xn),oo(this,t)?uo(this,t,e):r.frozen.set(t,e);}else uo(this,t,e);return this}});}var ao={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},co=lt(\"span\").classList,fo=co&&co.constructor&&co.constructor.prototype,lo=fo===Object.prototype?void 0:fo,so=rt(\"iterator\"),vo=rt(\"toStringTag\"),po=Pr.values,yo=function(t,e){if(t){if(t[so]!==po)try{ye(t,so,po);}catch(e){t[so]=po;}if(t[vo]||ye(t,vo,e),ao[e])for(var r in Pr)if(t[r]!==Pr[r])try{ye(t,r,Pr[r]);}catch(e){t[r]=Pr[r];}}};for(var ho in ao)yo(s[ho]&&s[ho].prototype,ho);yo(lo,\"DOMTokenList\");var go=new WeakMap;var bo={type:\"list-item\",renderElem:function(n,o,i){go.set(n,i);var u=n,a=u.level,c=void 0===a?0:a,f=u.ordered,l={margin:\"5px 0 5px \"+20*c+\"px\"},s=\"\";if(void 0!==f&&f){var d=function(r,n){var o=n,i=o.type,u=o.level,a=void 0===u?0:u,c=o.ordered,f=void 0!==c&&c;if(!f)return -1;var l=1,s=n,d=t.DomEditor.findPath(r,s);if(0===d[0])return 1;for(;d[0]>0;){var v=e.Path.previous(d),p=e.Editor.node(r,v);if(null==p)break;var y=p[0],h=y.level,g=void 0===h?0:h,b=y.type,m=y.ordered;if(b!==i)break;if(g<a)break;if(g===a){if(m!==f)break;l++;}s=y,d=v;}return l}(i,n);s=d+\".\";}else s=function(t){void 0===t&&(t=0);var e=\"\";switch(t){case 0:e=\"•\";break;case 1:e=\"◦\";break;default:e=\"▪\";}return e}(c);var v=function(t){var r,n=t.children||[],o=n.length;if(0===o)return \"\";for(var i=0;i<o&&!r;i++){var u=n[i];e.Text.isText(u)&&(r=u);}return null==r?\"\":r.color||\"\"}(n);return r.jsx(\"div\",{style:l},r.jsx(\"span\",{contentEditable:!1,style:{marginRight:\"0.5em\",color:v},\"data-w-e-reserve\":!0},s),r.jsx(\"span\",null,o))}},mo=function(t,e){return mo=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e;}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);},mo(t,e)};\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */function wo(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Class extends value \"+String(e)+\" is not a constructor or null\");function r(){this.constructor=t;}mo(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r);}function xo(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&\"number\"==typeof t.length)return {next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function So(t,e){var r=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value);}catch(t){o={error:t};}finally{try{n&&!n.done&&(r=i.return)&&r.call(i);}finally{if(o)throw o.error}}return u}function Oo(r){return e.Editor.nodes(r,{at:r.selection||void 0,match:function(e){return 1===t.DomEditor.findPath(r,e).length}})}var Eo=Ht.includes;Qe({target:\"Array\",proto:!0},{includes:function(t){return Eo(this,t,arguments.length>1?arguments[1]:void 0)}}),ie(\"includes\");var To,jo,Ao=function(){var t=ut(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e},Io=s.RegExp,Po=g((function(){var t=Io(\"a\",\"y\");return t.lastIndex=2,null!=t.exec(\"abcd\")})),Ro=Po||g((function(){return !Io(\"a\",\"y\").sticky})),Lo={BROKEN_CARET:Po||g((function(){var t=Io(\"^r\",\"gy\");return t.lastIndex=2,null!=t.exec(\"str\")})),MISSED_STICKY:Ro,UNSUPPORTED_Y:Po},ko=s.RegExp,Mo=g((function(){var t=ko(\".\",\"s\");return !(t.dotAll&&t.exec(\"\\n\")&&\"s\"===t.flags)})),No=s.RegExp,_o=g((function(){var t=No(\"(?<a>b)\",\"g\");return \"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")})),zo=Ae.get,Do=L(\"native-string-replace\",String.prototype.replace),Co=RegExp.prototype.exec,Fo=Co,Ho=h(\"\".charAt),Bo=h(\"\".indexOf),Go=h(\"\".replace),$o=h(\"\".slice),Vo=(jo=/b*/g,vt(Co,To=/a/,\"a\"),vt(Co,jo,\"a\"),0!==To.lastIndex||0!==jo.lastIndex),Wo=Lo.BROKEN_CARET,Uo=void 0!==/()??/.exec(\"\")[1];(Vo||Uo||Wo||Mo||_o)&&(Fo=function(t){var e,r,n,o,i,u,a,c=this,f=zo(c),l=Cr(t),s=f.raw;if(s)return s.lastIndex=c.lastIndex,e=vt(Fo,s,l),c.lastIndex=s.lastIndex,e;var d=f.groups,v=Wo&&c.sticky,p=vt(Ao,c),y=c.source,h=0,g=l;if(v&&(p=Go(p,\"y\",\"\"),-1===Bo(p,\"g\")&&(p+=\"g\"),g=$o(l,c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&\"\\n\"!==Ho(l,c.lastIndex-1))&&(y=\"(?: \"+y+\")\",g=\" \"+g,h++),r=new RegExp(\"^(?:\"+y+\")\",p)),Uo&&(r=new RegExp(\"^\"+y+\"$(?!\\\\s)\",p)),Vo&&(n=c.lastIndex),o=vt(Co,v?r:c,g),v?o?(o.input=$o(o.input,h),o[0]=$o(o[0],h),o.index=c.lastIndex,c.lastIndex+=o[0].length):c.lastIndex=0:Vo&&o&&(c.lastIndex=c.global?o.index+o[0].length:n),Uo&&o&&o.length>1&&vt(Do,o[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&d)for(o.groups=u=re(null),i=0;i<d.length;i++)u[(a=d[i])[0]]=o[a[1]];return o});var qo=Fo;Qe({target:\"RegExp\",proto:!0,forced:/./.exec!==qo},{exec:qo});var Ko=function(){function r(){this.type=\"list-item\",this.tag=\"button\";}return r.prototype.getListNode=function(e){var r=this.type;return t.DomEditor.getSelectedNodeByType(e,r)},r.prototype.getValue=function(t){return \"\"},r.prototype.isActive=function(t){var e=this.getListNode(t);if(null==e)return !1;var r=e.ordered;return (void 0!==r&&r)===this.ordered},r.prototype.isDisabled=function(r){return null==r.selection||!!t.DomEditor.getSelectedElems(r).some((function(t){if(e.Editor.isVoid(r,t)&&e.Editor.isBlock(r,t))return !0;var n=t.type;return !![\"pre\",\"code\",\"table\"].includes(n)||void 0}))},r.prototype.exec=function(t,r){this.isActive(t)?e.Transforms.setNodes(t,{type:\"paragraph\",ordered:void 0,level:void 0}):e.Transforms.setNodes(t,{type:\"list-item\",ordered:this.ordered,indent:void 0});},r}(),Yo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M384 64h640v128H384V64z m0 384h640v128H384v-128z m0 384h640v128H384v-128zM0 128a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z\"></path></svg>',Xo='<svg viewBox=\"0 0 1024 1024\"><path d=\"M384 832h640v128H384z m0-384h640v128H384z m0-384h640v128H384zM192 0v256H128V64H64V0zM128 526.016v50.016h128v64H64v-146.016l128-60V384H64v-64h192v146.016zM256 704v320H64v-64h128v-64H64v-64h128v-64H64v-64z\"></path></svg>',Jo=function(e){function r(){var r=null!==e&&e.apply(this,arguments)||this;return r.ordered=!1,r.title=t.t(\"listModule.unOrderedList\"),r.iconSvg=Yo,r}return wo(r,e),r}(Ko),Qo=function(e){function r(){var r=null!==e&&e.apply(this,arguments)||this;return r.ordered=!0,r.title=t.t(\"listModule.orderedList\"),r.iconSvg=Xo,r}return wo(r,e),r}(Ko),Zo={key:\"bulletedList\",factory:function(){return new Jo}},ti={key:\"numberedList\",factory:function(){return new Qo}};var ei=[];var ri,ni={type:\"list-item\",elemToHtml:function(r,n){var o=\"\",i=\"\",u=r.ordered,a=void 0!==u&&u?\"ol\":\"ul\",c=function(r){var n=go.get(r);if(null==n)return 0;var o=r,i=o.type,u=o.ordered,a=void 0!==u&&u,c=o.level,f=void 0===c?0:c,l=t.DomEditor.findPath(n,r);if(0===l[0])return f+1;var s=e.Path.previous(l),d=e.Editor.node(n,s);if(!d)return 0;var v=So(d,1)[0];if(t.DomEditor.getNodeType(v)!==i)return f+1;var p=v,y=p.ordered,h=void 0!==y&&y,g=p.level,b=void 0===g?0:g;return b<f?f-b:b>f?0:b===f?h===a?0:1:0}(r);if(c>0)for(var f=0;f<c;f++)o+=\"<\"+a+\">\",ei.push(a);var l=function(r){var n=go.get(r);if(null==n)return 0;var o=r,i=o.type,u=o.ordered,a=void 0!==u&&u,c=o.level,f=void 0===c?0:c,l=t.DomEditor.findPath(n,r);if(l[0]===n.children.length-1)return f+1;var s=e.Path.next(l),d=e.Editor.node(n,s);if(!d)return 0;var v=So(d,1)[0];if(t.DomEditor.getNodeType(v)!==i)return f+1;var p=v,y=p.ordered,h=void 0!==y&&y,g=p.level,b=void 0===g?0:g;return b<f?f-b:b>f?0:b===f?h===a?0:1:0}(r);if(l>0)for(f=0;f<l;f++){i+=\"</\"+ei.pop()+\">\";}return {html:\"<li>\"+n+\"</li>\",prefix:o,suffix:i}}},oi=rt(\"species\"),ii=Fn.filter,ui=(ri=\"filter\",Y>=51||!g((function(){var t=[];return (t.constructor={})[oi]=function(){return {foo:1}},1!==t[ri](Boolean).foo})));Qe({target:\"Array\",proto:!0,forced:!ui},{filter:function(t){return ii(this,t,arguments.length>1?arguments[1]:void 0)}});var ai=Function.prototype,ci=ai.apply,fi=ai.bind,li=ai.call,si=\"object\"==typeof Reflect&&Reflect.apply||(fi?li.bind(ci):function(){return li.apply(ci,arguments)}),di=rt(\"species\"),vi=RegExp.prototype,pi=$r.charAt,yi=function(t,e,r){return e+(r?pi(t,e).length:1)},hi=Math.floor,gi=h(\"\".charAt),bi=h(\"\".replace),mi=h(\"\".slice),wi=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,xi=/\\$([$&'`]|\\d{1,2})/g,Si=function(t,e,r,n,o,i){var u=r+t.length,a=n.length,c=xi;return void 0!==o&&(o=M(o),c=wi),bi(i,c,(function(i,c){var f;switch(gi(c,0)){case\"$\":return \"$\";case\"&\":return t;case\"`\":return mi(e,0,r);case\"'\":return mi(e,u);case\"<\":f=o[mi(c,1,-1)];break;default:var l=+c;if(0===l)return i;if(l>a){var s=hi(l/10);return 0===s?i:s<=a?void 0===n[s-1]?gi(c,1):n[s-1]+gi(c,1):i}f=n[l-1];}return void 0===f?\"\":f}))},Oi=s.TypeError,Ei=function(t,e){var r=t.exec;if(H(r)){var n=vt(r,t,e);return null!==n&&ut(n),n}if(\"RegExp\"===w(t))return vt(qo,t,e);throw Oi(\"RegExp#exec called on incompatible receiver\")},Ti=rt(\"replace\"),ji=Math.max,Ai=Math.min,Ii=h([].concat),Pi=h([].push),Ri=h(\"\".indexOf),Li=h(\"\".slice),ki=\"$0\"===\"a\".replace(/./,\"$0\"),Mi=!!/./[Ti]&&\"\"===/./[Ti](\"a\",\"$0\");!function(t,e,r,n){var o=rt(t),i=!g((function(){var e={};return e[o]=function(){return 7},7!=\"\"[t](e)})),u=i&&!g((function(){var e=!1,r=/a/;return \"split\"===t&&((r={}).constructor={},r.constructor[di]=function(){return r},r.flags=\"\",r[o]=/./[o]),r.exec=function(){return e=!0,null},r[o](\"\"),!e}));if(!i||!u||r){var a=h(/./[o]),c=e(o,\"\"[t],(function(t,e,r,n,o){var u=h(t),c=e.exec;return c===qo||c===vi.exec?i&&!o?{done:!0,value:a(e,r,n)}:{done:!0,value:u(r,e,n)}:{done:!1}}));De(String.prototype,t,c[0]),De(vi,o,c[1]);}n&&ye(vi[o],\"sham\",!0);}(\"replace\",(function(t,e,r){var n=Mi?\"$\":\"$0\";return [function(t,r){var n=T(this),o=null==t?void 0:xt(t,Ti);return o?vt(o,t,n,r):vt(e,Cr(n),t,r)},function(t,o){var i=ut(this),u=Cr(t);if(\"string\"==typeof o&&-1===Ri(o,n)&&-1===Ri(o,\"$<\")){var a=r(e,i,u,o);if(a.done)return a.value}var c=H(o);c||(o=Cr(o));var f=i.global;if(f){var l=i.unicode;i.lastIndex=0;}for(var s=[];;){var d=Ei(i,u);if(null===d)break;if(Pi(s,d),!f)break;\"\"===Cr(d[0])&&(i.lastIndex=yi(u,Dt(i.lastIndex),l));}for(var v,p=\"\",y=0,h=0;h<s.length;h++){for(var g=Cr((d=s[h])[0]),b=ji(Ai(kt(d.index),u.length),0),m=[],w=1;w<d.length;w++)Pi(m,void 0===(v=d[w])?v:String(v));var x=d.groups;if(c){var S=Ii([g],m,b,u);void 0!==x&&Pi(S,x);var O=Cr(si(o,void 0,S));}else O=Si(g,u,b,m,x,o);b>=y&&(p+=Li(u,y,b)+O,y=b+g.length);}return p+Li(u,y)}]}),!!g((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")}))||!ki||Mi);var Ni=s.TypeError,_i=function(t,e,r,n,o,i,u,a){for(var c,f,l=o,s=0,d=!!u&&cn(u,a);s<n;){if(s in r){if(c=d?d(r[s],s,e):r[s],i>0&&Tn(c))f=Ct(c),l=_i(t,e,c,f,l,i-1)-1;else {if(l>=9007199254740991)throw Ni(\"Exceed the acceptable array length\");t[l]=c;}l++;}s++;}return l},zi=_i;function Di(t){return t.length?t[0].tagName.toLowerCase():\"\"}return Qe({target:\"Array\",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=M(this),r=Ct(e),n=zn(e,0);return n.length=zi(n,e,e,r,0,void 0===t?1:kt(t)),n}}),ie(\"flat\"),Qe({global:!0},{globalThis:s}),n.append&&(i.default.fn.append=n.append),n.attr&&(i.default.fn.attr=n.attr),n.parent&&(i.default.fn.parent=n.parent),{renderElems:[bo],editorPlugin:function(r){var n=r.deleteBackward,o=r.handleTab,i=r.normalizeNode,u=r;return u.deleteBackward=function(r){var o=u.selection;if(null!=o)if(e.Range.isExpanded(o))n(r);else {var i=t.DomEditor.getSelectedNodeByType(u,\"list-item\");if(null!=i)if(0!==o.focus.offset)n(r);else {var a=i.level,c=void 0===a?0:a;c>0?e.Transforms.setNodes(u,{level:c-1}):e.Transforms.setNodes(u,{type:\"paragraph\",ordered:void 0,level:void 0});}else n(r);}else n(r);},u.handleTab=function(){var r,n,i,a,c=u.selection;if(null!=c){if(e.Range.isCollapsed(c)){var f=t.DomEditor.getSelectedNodeByType(u,\"list-item\");if(null==f)return void o();if(0===c.focus.offset){var l=f.level,s=void 0===l?0:l;return void e.Transforms.setNodes(u,{level:s+1})}}if(e.Range.isExpanded(c)){var d=0,v=!1;try{for(var p=xo(Oo(u)),y=p.next();!y.done;y=p.next()){var h=So(y.value,1)[0];\"list-item\"===t.DomEditor.getNodeType(h)?d++:v=!0;}}catch(t){r={error:t};}finally{try{y&&!y.done&&(n=p.return)&&n.call(p);}finally{if(r)throw r.error}}if(v||d<=1)return void o();try{for(var g=xo(Oo(u)),b=g.next();!b.done;b=g.next()){var m=So(b.value,2),w=(h=m[0],m[1]),x=h.level;s=void 0===x?0:x;e.Transforms.setNodes(u,{level:s+1},{at:w});}}catch(t){i={error:t};}finally{try{b&&!b.done&&(a=g.return)&&a.call(g);}finally{if(i)throw i.error}}}else o();}else o();},u.normalizeNode=function(r){var n=So(r,2),o=n[0],a=n[1],c=t.DomEditor.getNodeType(o);return \"bulleted-list\"!==c&&\"numbered-list\"!==c||e.Transforms.unwrapNodes(u,{at:a}),i([o,a])},u},menus:[Zo,ti],elemsToHtml:[ni],parseElemsHtml:[{selector:\"ul:not([data-w-e-type]),ol:not([data-w-e-type])\",parseElemHtml:function(t,e,r){return e.flat(1/0)}},{selector:\"li:not([data-w-e-type])\",parseElemHtml:function(t,r,n){var o=i.default(t);0===(r=r.filter((function(t){return !!e.Text.isText(t)||!!n.isInline(t)}))).length&&(r=[{text:o.text().replace(/\\s+/gm,\" \")}]);var u=function(t){return \"ol\"===Di(t.parent())}(o),a=function(t){for(var e=0,r=t.parent(),n=Di(r);\"ul\"===n||\"ol\"===n;)n=Di(r=r.parent()),e++;return e-1}(o);return {type:\"list-item\",ordered:u,level:a,children:r}}}]}}));\n\n  });\n\n  /**\n   * Lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright JS Foundation and other contributors <https://js.foundation/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  var lodash_isequal = createCommonjsModule$1(function (module, exports) {\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /** Used for built-in method references. */\n  var arrayProto = Array.prototype,\n      funcProto = Function.prototype,\n      objectProto = Object.prototype;\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root['__core-js_shared__'];\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? ('Symbol(src)_1.' + uid) : '';\n  }());\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto.toString;\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp('^' +\n    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root.Buffer : undefined,\n      Symbol = root.Symbol,\n      Uint8Array = root.Uint8Array,\n      propertyIsEnumerable = objectProto.propertyIsEnumerable,\n      splice = arrayProto.splice,\n      symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols = Object.getOwnPropertySymbols,\n      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n      nativeKeys = overArg(Object.keys, Object);\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root, 'DataView'),\n      Map = getNative(root, 'Map'),\n      Promise = getNative(root, 'Promise'),\n      Set = getNative(root, 'Set'),\n      WeakMap = getNative(root, 'WeakMap'),\n      nativeCreate = getNative(Object, 'create');\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView),\n      mapCtorString = toSource(Map),\n      promiseCtorString = toSource(Promise),\n      setCtorString = toSource(Set),\n      weakMapCtorString = toSource(WeakMap);\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol ? Symbol.prototype : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Hash(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n  function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n      var result = data[key];\n      return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n  }\n\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n  }\n\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n    return this;\n  }\n\n  // Add methods to `Hash`.\n  Hash.prototype.clear = hashClear;\n  Hash.prototype['delete'] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function ListCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function listCacheDelete(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n  }\n\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function listCacheGet(key) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    return index < 0 ? undefined : data[index][1];\n  }\n\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n        index = assocIndexOf(data, key);\n\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n    return this;\n  }\n\n  // Add methods to `ListCache`.\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype['delete'] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function MapCache(entries) {\n    var index = -1,\n        length = entries == null ? 0 : entries.length;\n\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      'hash': new Hash,\n      'map': new (Map || ListCache),\n      'string': new Hash\n    };\n  }\n\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n        size = data.size;\n\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  }\n\n  // Add methods to `MapCache`.\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype['delete'] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n  function SetCache(values) {\n    var index = -1,\n        length = values == null ? 0 : values.length;\n\n    this.__data__ = new MapCache;\n    while (++index < length) {\n      this.add(values[index]);\n    }\n  }\n\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n  }\n\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  }\n\n  // Add methods to `SetCache`.\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n  function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n  }\n\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function stackDelete(key) {\n    var data = this.__data__,\n        result = data['delete'](key);\n\n    this.size = data.size;\n    return result;\n  }\n\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n  function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n      data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  }\n\n  // Add methods to `Stack`.\n  Stack.prototype.clear = stackClear;\n  Stack.prototype['delete'] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n        isArg = !isArr && isArguments(value),\n        isBuff = !isArr && !isArg && isBuffer(value),\n        isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n        skipIndexes = isArr || isArg || isBuff || isType,\n        result = skipIndexes ? baseTimes(value.length, String) : [],\n        length = result.length;\n\n    for (var key in value) {\n      if ((inherited || hasOwnProperty.call(value, key)) &&\n          !(skipIndexes && (\n             // Safari 9 has enumerable `arguments.length` in strict mode.\n             key == 'length' ||\n             // Node.js 0.10 has enumerable non-index properties on buffers.\n             (isBuff && (key == 'offset' || key == 'parent')) ||\n             // PhantomJS 2 has enumerable non-index properties on typed arrays.\n             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n             // Skip index properties.\n             isIndex(key, length)\n          ))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n    return (symToStringTag && symToStringTag in Object(value))\n      ? getRawTag(value)\n      : objectToString(value);\n  }\n\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n      return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n      objIsArr = true;\n      objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack);\n      return (objIsArr || isTypedArray(object))\n        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n\n        stack || (stack = new Stack);\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n    if (!isSameTag) {\n      return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) &&\n      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(array);\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n    var index = -1,\n        result = true,\n        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n    stack.set(array, other);\n    stack.set(other, array);\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, arrValue, index, other, array, stack)\n          : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (!arraySome(other, function(othValue, othIndex) {\n              if (!cacheHas(seen, othIndex) &&\n                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                return seen.push(othIndex);\n              }\n            })) {\n          result = false;\n          break;\n        }\n      } else if (!(\n            arrValue === othValue ||\n              equalFunc(arrValue, othValue, bitmask, customizer, stack)\n          )) {\n        result = false;\n        break;\n      }\n    }\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if ((object.byteLength != other.byteLength) ||\n            (object.byteOffset != other.byteOffset)) {\n          return false;\n        }\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if ((object.byteLength != other.byteLength) ||\n            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == (other + '');\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG;\n\n        // Recursively compare objects (susceptible to call stack limits).\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n    var index = objLength;\n    while (index--) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(object);\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n\n    var skipCtor = isPartial;\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, objValue, key, other, object, stack)\n          : customizer(objValue, othValue, key, object, other, stack);\n      }\n      // Recursively compare objects (susceptible to call stack limits).\n      if (!(compared === undefined\n            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n            : compared\n          )) {\n        result = false;\n        break;\n      }\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor;\n\n      // Non `Object` object instances with different constructors are not equal.\n      if (objCtor != othCtor &&\n          ('constructor' in object && 'constructor' in other) &&\n          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n            typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n  }\n\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n  function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key)\n      ? data[typeof key == 'string' ? 'string' : 'hash']\n      : data.map;\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n  }\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n    if (object == null) {\n      return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function(symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag;\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n      (Map && getTag(new Map) != mapTag) ||\n      (Promise && getTag(Promise.resolve()) != promiseTag) ||\n      (Set && getTag(new Set) != setTag) ||\n      (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n    getTag = function(value) {\n      var result = baseGetTag(value),\n          Ctor = result == objectTag ? value.constructor : undefined,\n          ctorString = Ctor ? toSource(Ctor) : '';\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString: return dataViewTag;\n          case mapCtorString: return mapTag;\n          case promiseCtorString: return promiseTag;\n          case setCtorString: return setTag;\n          case weakMapCtorString: return weakMapTag;\n        }\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n  function isKeyable(value) {\n    var type = typeof value;\n    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n      ? (value !== '__proto__')\n      : (value === null);\n  }\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n    return value === proto;\n  }\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString.call(func);\n      } catch (e) {}\n      try {\n        return (func + '');\n      } catch (e) {}\n    }\n    return '';\n  }\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other);\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n      !propertyIsEnumerable.call(value, 'callee');\n  };\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n  var isBuffer = nativeIsBuffer || stubFalse;\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent.\n   *\n   * **Note:** This method supports comparing arrays, array buffers, booleans,\n   * date objects, error objects, maps, numbers, `Object` objects, regexes,\n   * sets, strings, symbols, and typed arrays. `Object` objects are compared\n   * by their own, not inherited, enumerable properties. Functions and DOM\n   * nodes are compared by strict equality, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.isEqual(object, other);\n   * // => true\n   *\n   * object === other;\n   * // => false\n   */\n  function isEqual(value, other) {\n    return baseIsEqual(value, other);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n  function stubArray() {\n    return [];\n  }\n\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n  function stubFalse() {\n    return false;\n  }\n\n  module.exports = isEqual;\n  });\n\n  var dist$3 = createCommonjsModule$1(function (module, exports) {\n  !function(t,e){module.exports=e(dist$6,require$$2$1,require$$2,lodash_throttle,require$$1,require$$4,lodash_isequal);}(commonjsGlobal,(function(t,e,n,r,o,i,a){function l(t){return t&&\"object\"==typeof t&&\"default\"in t?t:{default:t}}var u=l(r),c=l(o),s=l(a);t.i18nAddResources(\"en\",{tableModule:{deleteCol:\"Delete column\",deleteRow:\"Delete row\",deleteTable:\"Delete table\",widthAuto:\"Width auto\",insertCol:\"Insert column\",insertRow:\"Insert row\",insertTable:\"Insert table\",header:\"Header\"}}),t.i18nAddResources(\"zh-CN\",{tableModule:{deleteCol:\"删除列\",deleteRow:\"删除行\",deleteTable:\"删除表格\",widthAuto:\"宽度自适应\",insertCol:\"插入列\",insertRow:\"插入行\",insertTable:\"插入表格\",header:\"表头\"}});var f=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function d(t){var e={exports:{}};return t(e,e.exports),e.exports}var p,v,h=function(t){return t&&t.Math==Math&&t},g=h(\"object\"==typeof globalThis&&globalThis)||h(\"object\"==typeof window&&window)||h(\"object\"==typeof self&&self)||h(\"object\"==typeof f&&f)||function(){return this}()||Function(\"return this\")(),y=function(t){try{return !!t()}catch(t){return !0}},m=!y((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),b=Function.prototype.call,E=b.bind?b.bind(b):function(){return b.apply(b,arguments)},w={}.propertyIsEnumerable,x=Object.getOwnPropertyDescriptor,S={f:x&&!w.call({1:2},1)?function(t){var e=x(this,t);return !!e&&e.enumerable}:w},T=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},D=Function.prototype,N=D.bind,P=D.call,M=N&&N.bind(P),R=N?function(t){return t&&M(P,t)}:function(t){return t&&function(){return P.apply(t,arguments)}},O=R({}.toString),H=R(\"\".slice),V=function(t){return H(O(t),8,-1)},z=g.Object,j=R(\"\".split),L=y((function(){return !z(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==V(t)?j(t,\"\"):z(t)}:z,A=g.TypeError,C=function(t){if(null==t)throw A(\"Can't call method on \"+t);return t},I=function(t){return L(C(t))},k=function(t){return \"function\"==typeof t},B=function(t){return \"object\"==typeof t?null!==t:k(t)},$=function(t){return k(t)?t:void 0},F=function(t,e){return arguments.length<2?$(g[t]):g[t]&&g[t][e]},q=R({}.isPrototypeOf),G=F(\"navigator\",\"userAgent\")||\"\",_=g.process,W=g.Deno,U=_&&_.versions||W&&W.version,X=U&&U.v8;X&&(v=(p=X.split(\".\"))[0]>0&&p[0]<4?1:+(p[0]+p[1])),!v&&G&&(!(p=G.match(/Edge\\/(\\d+)/))||p[1]>=74)&&(p=G.match(/Chrome\\/(\\d+)/))&&(v=+p[1]);var Y=v,K=!!Object.getOwnPropertySymbols&&!y((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&Y&&Y<41})),J=K&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,Q=g.Object,Z=J?function(t){return \"symbol\"==typeof t}:function(t){var e=F(\"Symbol\");return k(e)&&q(e.prototype,Q(t))},tt=g.String,et=function(t){try{return tt(t)}catch(t){return \"Object\"}},nt=g.TypeError,rt=function(t){if(k(t))return t;throw nt(et(t)+\" is not a function\")},ot=function(t,e){var n=t[e];return null==n?void 0:rt(n)},it=g.TypeError,at=Object.defineProperty,lt=function(t,e){try{at(g,t,{value:e,configurable:!0,writable:!0});}catch(n){g[t]=e;}return e},ut=\"__core-js_shared__\",ct=g[ut]||lt(ut,{}),st=d((function(t){(t.exports=function(t,e){return ct[t]||(ct[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),ft=g.Object,dt=function(t){return ft(C(t))},pt=R({}.hasOwnProperty),vt=Object.hasOwn||function(t,e){return pt(dt(t),e)},ht=0,gt=Math.random(),yt=R(1..toString),mt=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+yt(++ht+gt,36)},bt=st(\"wks\"),Et=g.Symbol,wt=Et&&Et.for,xt=J?Et:Et&&Et.withoutSetter||mt,St=function(t){if(!vt(bt,t)||!K&&\"string\"!=typeof bt[t]){var e=\"Symbol.\"+t;K&&vt(Et,t)?bt[t]=Et[t]:bt[t]=J&&wt?wt(e):xt(e);}return bt[t]},Tt=g.TypeError,Dt=St(\"toPrimitive\"),Nt=function(t,e){if(!B(t)||Z(t))return t;var n,r=ot(t,Dt);if(r){if(void 0===e&&(e=\"default\"),n=E(r,t,e),!B(n)||Z(n))return n;throw Tt(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var n,r;if(\"string\"===e&&k(n=t.toString)&&!B(r=E(n,t)))return r;if(k(n=t.valueOf)&&!B(r=E(n,t)))return r;if(\"string\"!==e&&k(n=t.toString)&&!B(r=E(n,t)))return r;throw it(\"Can't convert object to primitive value\")}(t,e)},Pt=function(t){var e=Nt(t,\"string\");return Z(e)?e:e+\"\"},Mt=g.document,Rt=B(Mt)&&B(Mt.createElement),Ot=function(t){return Rt?Mt.createElement(t):{}},Ht=!m&&!y((function(){return 7!=Object.defineProperty(Ot(\"div\"),\"a\",{get:function(){return 7}}).a})),Vt=Object.getOwnPropertyDescriptor,zt={f:m?Vt:function(t,e){if(t=I(t),e=Pt(e),Ht)try{return Vt(t,e)}catch(t){}if(vt(t,e))return T(!E(S.f,t,e),t[e])}},jt=g.String,Lt=g.TypeError,At=function(t){if(B(t))return t;throw Lt(jt(t)+\" is not an object\")},Ct=g.TypeError,It=Object.defineProperty,kt={f:m?It:function(t,e,n){if(At(t),e=Pt(e),At(n),Ht)try{return It(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw Ct(\"Accessors not supported\");return \"value\"in n&&(t[e]=n.value),t}},Bt=m?function(t,e,n){return kt.f(t,e,T(1,n))}:function(t,e,n){return t[e]=n,t},$t=R(Function.toString);k(ct.inspectSource)||(ct.inspectSource=function(t){return $t(t)});var Ft,qt,Gt,_t=ct.inspectSource,Wt=g.WeakMap,Ut=k(Wt)&&/native code/.test(_t(Wt)),Xt=st(\"keys\"),Yt=function(t){return Xt[t]||(Xt[t]=mt(t))},Kt={},Jt=\"Object already initialized\",Qt=g.TypeError,Zt=g.WeakMap;if(Ut||ct.state){var te=ct.state||(ct.state=new Zt),ee=R(te.get),ne=R(te.has),re=R(te.set);Ft=function(t,e){if(ne(te,t))throw new Qt(Jt);return e.facade=t,re(te,t,e),e},qt=function(t){return ee(te,t)||{}},Gt=function(t){return ne(te,t)};}else {var oe=Yt(\"state\");Kt[oe]=!0,Ft=function(t,e){if(vt(t,oe))throw new Qt(Jt);return e.facade=t,Bt(t,oe,e),e},qt=function(t){return vt(t,oe)?t[oe]:{}},Gt=function(t){return vt(t,oe)};}var ie={set:Ft,get:qt,has:Gt,enforce:function(t){return Gt(t)?qt(t):Ft(t,{})},getterFor:function(t){return function(e){var n;if(!B(e)||(n=qt(e)).type!==t)throw Qt(\"Incompatible receiver, \"+t+\" required\");return n}}},ae=Function.prototype,le=m&&Object.getOwnPropertyDescriptor,ue=vt(ae,\"name\"),ce={EXISTS:ue,PROPER:ue&&\"something\"===function(){}.name,CONFIGURABLE:ue&&(!m||m&&le(ae,\"name\").configurable)},se=d((function(t){var e=ce.CONFIGURABLE,n=ie.get,r=ie.enforce,o=String(String).split(\"String\");(t.exports=function(t,n,i,a){var l,u=!!a&&!!a.unsafe,c=!!a&&!!a.enumerable,s=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;k(i)&&(\"Symbol(\"===String(f).slice(0,7)&&(f=\"[\"+String(f).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!vt(i,\"name\")||e&&i.name!==f)&&Bt(i,\"name\",f),(l=r(i)).source||(l.source=o.join(\"string\"==typeof f?f:\"\"))),t!==g?(u?!s&&t[n]&&(c=!0):delete t[n],c?t[n]=i:Bt(t,n,i)):c?t[n]=i:lt(n,i);})(Function.prototype,\"toString\",(function(){return k(this)&&n(this).source||_t(this)}));})),fe=Math.ceil,de=Math.floor,pe=function(t){var e=+t;return e!=e||0===e?0:(e>0?de:fe)(e)},ve=Math.max,he=Math.min,ge=function(t,e){var n=pe(t);return n<0?ve(n+e,0):he(n,e)},ye=Math.min,me=function(t){return t>0?ye(pe(t),9007199254740991):0},be=function(t){return me(t.length)},Ee=function(t){return function(e,n,r){var o,i=I(e),a=be(i),l=ge(r,a);if(t&&n!=n){for(;a>l;)if((o=i[l++])!=o)return !0}else for(;a>l;l++)if((t||l in i)&&i[l]===n)return t||l||0;return !t&&-1}},we={includes:Ee(!0),indexOf:Ee(!1)}.indexOf,xe=R([].push),Se=function(t,e){var n,r=I(t),o=0,i=[];for(n in r)!vt(Kt,n)&&vt(r,n)&&xe(i,n);for(;e.length>o;)vt(r,n=e[o++])&&(~we(i,n)||xe(i,n));return i},Te=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],De=Te.concat(\"length\",\"prototype\"),Ne={f:Object.getOwnPropertyNames||function(t){return Se(t,De)}},Pe={f:Object.getOwnPropertySymbols},Me=R([].concat),Re=F(\"Reflect\",\"ownKeys\")||function(t){var e=Ne.f(At(t)),n=Pe.f;return n?Me(e,n(t)):e},Oe=function(t,e){for(var n=Re(e),r=kt.f,o=zt.f,i=0;i<n.length;i++){var a=n[i];vt(t,a)||r(t,a,o(e,a));}},He=/#|\\.prototype\\./,Ve=function(t,e){var n=je[ze(t)];return n==Ae||n!=Le&&(k(e)?y(e):!!e)},ze=Ve.normalize=function(t){return String(t).replace(He,\".\").toLowerCase()},je=Ve.data={},Le=Ve.NATIVE=\"N\",Ae=Ve.POLYFILL=\"P\",Ce=Ve,Ie=zt.f,ke=function(t,e){var n,r,o,i,a,l=t.target,u=t.global,c=t.stat;if(n=u?g:c?g[l]||lt(l,{}):(g[l]||{}).prototype)for(r in e){if(i=e[r],o=t.noTargetGet?(a=Ie(n,r))&&a.value:n[r],!Ce(u?r:l+(c?\".\":\"#\")+r,t.forced)&&void 0!==o){if(typeof i==typeof o)continue;Oe(i,o);}(t.sham||o&&o.sham)&&Bt(i,\"sham\",!0),se(n,r,i,t);}},Be={};Be[St(\"toStringTag\")]=\"z\";var $e,Fe=\"[object z]\"===String(Be),qe=St(\"toStringTag\"),Ge=g.Object,_e=\"Arguments\"==V(function(){return arguments}()),We=Fe?V:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Ge(t),qe))?n:_e?V(e):\"Object\"==(r=V(e))&&k(e.callee)?\"Arguments\":r},Ue=g.String,Xe=function(t){if(\"Symbol\"===We(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return Ue(t)},Ye=/\"/g,Ke=R(\"\".replace);ke({target:\"String\",proto:!0,forced:($e=\"anchor\",y((function(){var t=\"\"[$e]('\"');return t!==t.toLowerCase()||t.split('\"').length>3})))},{anchor:function(t){return e=\"a\",n=\"name\",r=t,o=Xe(C(this)),i=\"<\"+e,\"\"!==n&&(i+=\" \"+n+'=\"'+Ke(Xe(r),Ye,\"&quot;\")+'\"'),i+\">\"+o+\"</\"+e+\">\";var e,n,r,o,i;}});var Je,Qe=function(){var t=At(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e},Ze=g.RegExp,tn=y((function(){var t=Ze(\"a\",\"y\");return t.lastIndex=2,null!=t.exec(\"abcd\")})),en=tn||y((function(){return !Ze(\"a\",\"y\").sticky})),nn={BROKEN_CARET:tn||y((function(){var t=Ze(\"^r\",\"gy\");return t.lastIndex=2,null!=t.exec(\"str\")})),MISSED_STICKY:en,UNSUPPORTED_Y:tn},rn=Object.keys||function(t){return Se(t,Te)},on=m?Object.defineProperties:function(t,e){At(t);for(var n,r=I(e),o=rn(e),i=o.length,a=0;i>a;)kt.f(t,n=o[a++],r[n]);return t},an=F(\"document\",\"documentElement\"),ln=Yt(\"IE_PROTO\"),un=function(){},cn=function(t){return \"<script>\"+t+\"</\"+\"script>\"},sn=function(t){t.write(cn(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},fn=function(){try{Je=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;fn=\"undefined\"!=typeof document?document.domain&&Je?sn(Je):((e=Ot(\"iframe\")).style.display=\"none\",an.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(cn(\"document.F=Object\")),t.close(),t.F):sn(Je);for(var n=Te.length;n--;)delete fn.prototype[Te[n]];return fn()};Kt[ln]=!0;var dn,pn,vn=Object.create||function(t,e){var n;return null!==t?(un.prototype=At(t),n=new un,un.prototype=null,n[ln]=t):n=fn(),void 0===e?n:on(n,e)},hn=g.RegExp,gn=y((function(){var t=hn(\".\",\"s\");return !(t.dotAll&&t.exec(\"\\n\")&&\"s\"===t.flags)})),yn=g.RegExp,mn=y((function(){var t=yn(\"(?<a>b)\",\"g\");return \"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")})),bn=ie.get,En=st(\"native-string-replace\",String.prototype.replace),wn=RegExp.prototype.exec,xn=wn,Sn=R(\"\".charAt),Tn=R(\"\".indexOf),Dn=R(\"\".replace),Nn=R(\"\".slice),Pn=(pn=/b*/g,E(wn,dn=/a/,\"a\"),E(wn,pn,\"a\"),0!==dn.lastIndex||0!==pn.lastIndex),Mn=nn.BROKEN_CARET,Rn=void 0!==/()??/.exec(\"\")[1];(Pn||Rn||Mn||gn||mn)&&(xn=function(t){var e,n,r,o,i,a,l,u=this,c=bn(u),s=Xe(t),f=c.raw;if(f)return f.lastIndex=u.lastIndex,e=E(xn,f,s),u.lastIndex=f.lastIndex,e;var d=c.groups,p=Mn&&u.sticky,v=E(Qe,u),h=u.source,g=0,y=s;if(p&&(v=Dn(v,\"y\",\"\"),-1===Tn(v,\"g\")&&(v+=\"g\"),y=Nn(s,u.lastIndex),u.lastIndex>0&&(!u.multiline||u.multiline&&\"\\n\"!==Sn(s,u.lastIndex-1))&&(h=\"(?: \"+h+\")\",y=\" \"+y,g++),n=new RegExp(\"^(?:\"+h+\")\",v)),Rn&&(n=new RegExp(\"^\"+h+\"$(?!\\\\s)\",v)),Pn&&(r=u.lastIndex),o=E(wn,p?n:u,y),p?o?(o.input=Nn(o.input,g),o[0]=Nn(o[0],g),o.index=u.lastIndex,u.lastIndex+=o[0].length):u.lastIndex=0:Pn&&o&&(u.lastIndex=u.global?o.index+o[0].length:r),Rn&&o&&o.length>1&&E(En,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&d)for(o.groups=a=vn(null),i=0;i<d.length;i++)a[(l=d[i])[0]]=o[l[1]];return o});var On=xn;ke({target:\"RegExp\",proto:!0,forced:/./.exec!==On},{exec:On});var Hn=Array.isArray||function(t){return \"Array\"==V(t)},Vn=function(){},zn=[],jn=F(\"Reflect\",\"construct\"),Ln=/^\\s*(?:class|function)\\b/,An=R(Ln.exec),Cn=!Ln.exec(Vn),In=function(t){if(!k(t))return !1;try{return jn(Vn,zn,t),!0}catch(t){return !1}},kn=!jn||y((function(){var t;return In(In.call)||!In(Object)||!In((function(){t=!0;}))||t}))?function(t){if(!k(t))return !1;switch(We(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Cn||!!An(Ln,_t(t))}:In,Bn=function(t,e,n){var r=Pt(e);r in t?kt.f(t,r,T(0,n)):t[r]=n;},$n=St(\"species\"),Fn=function(t){return Y>=51||!y((function(){var e=[];return (e.constructor={})[$n]=function(){return {foo:1}},1!==e[t](Boolean).foo}))},qn=R([].slice),Gn=Fn(\"slice\"),_n=St(\"species\"),Wn=g.Array,Un=Math.max;function Xn(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value);}catch(t){o={error:t};}finally{try{r&&!r.done&&(n=i.return)&&n.call(i);}finally{if(o)throw o.error}}return a}function Yn(n){var r=n.selection;if(null==r)return !1;var o=Xn(e.Editor.nodes(n,{match:function(e){return t.DomEditor.checkNodeType(e,\"table-cell\")}}),1)[0];if(o){var i=Xn(o,2)[1],a=e.Editor.start(n,i);if(e.Point.equals(r.anchor,a))return !0}return !1}function Kn(n,r){var o,i,a=e.Editor.nodes(n,{at:r,match:function(e){return \"table\"===t.DomEditor.getNodeType(e)}}),l=!1;try{for(var u=\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n  function(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return {next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}(a),c=u.next();!c.done;c=u.next()){c.value;l=!0;}}catch(t){o={error:t};}finally{try{c&&!c.done&&(i=u.return)&&i.call(u);}finally{if(o)throw o.error}}return l}ke({target:\"Array\",proto:!0,forced:!Gn},{slice:function(t,e){var n,r,o,i=I(this),a=be(i),l=ge(t,a),u=ge(void 0===e?a:e,a);if(Hn(i)&&(n=i.constructor,(kn(n)&&(n===Wn||Hn(n.prototype))||B(n)&&null===(n=n[_n]))&&(n=void 0),n===Wn||void 0===n))return qn(i,l,u);for(r=new(void 0===n?Wn:n)(Un(u-l,0)),o=0;l<u;l++,o++)l in i&&Bn(r,o,i[l]);return r.length=o,r}});var Jn=R(R.bind),Qn=St(\"species\"),Zn=g.Array,tr=function(t,e){return new(function(t){var e;return Hn(t)&&(e=t.constructor,(kn(e)&&(e===Zn||Hn(e.prototype))||B(e)&&null===(e=e[Qn]))&&(e=void 0)),void 0===e?Zn:e}(t))(0===e?0:e)},er=R([].push),nr=function(t){var e=1==t,n=2==t,r=3==t,o=4==t,i=6==t,a=7==t,l=5==t||i;return function(u,c,s,f){for(var d,p,v=dt(u),h=L(v),g=function(t,e){return rt(t),void 0===e?t:Jn?Jn(t,e):function(){return t.apply(e,arguments)}}(c,s),y=be(h),m=0,b=f||tr,E=e?b(u,y):n||a?b(u,0):void 0;y>m;m++)if((l||m in h)&&(p=g(d=h[m],m,v),t))if(e)E[m]=p;else if(p)switch(t){case 3:return !0;case 5:return d;case 6:return m;case 2:er(E,d);}else switch(t){case 4:return !1;case 7:er(E,d);}return i?-1:r||o?o:E}},rr={forEach:nr(0),map:nr(1),filter:nr(2),some:nr(3),every:nr(4),find:nr(5),findIndex:nr(6),filterReject:nr(7)},or=rr.map;ke({target:\"Array\",proto:!0,forced:!Fn(\"map\")},{map:function(t){return or(this,t,arguments.length>1?arguments[1]:void 0)}});var ir=Fe?{}.toString:function(){return \"[object \"+We(this)+\"]\"};function ar(t){var e=t.children||[];return 0===e.length?[]:(e[0]||{}).children||[]}function lr(t){return ar(t).every((function(t){return !!t.isHeader}))}Fe||se(Object.prototype,\"toString\",ir,{unsafe:!0});var ur=ce.PROPER,cr=\"toString\",sr=RegExp.prototype,fr=sr.toString,dr=R(Qe),pr=y((function(){return \"/a/b\"!=fr.call({source:\"a\",flags:\"b\"})})),vr=ur&&fr.name!=cr;(pr||vr)&&se(RegExp.prototype,cr,(function(){var t=At(this),e=Xe(t.source),n=t.flags;return \"/\"+e+\"/\"+Xe(void 0===n&&q(sr,t)&&!(\"flags\"in sr)?dr(t):n)}),{unsafe:!0});var hr=St(\"unscopables\"),gr=Array.prototype;null==gr[hr]&&kt.f(gr,hr,{configurable:!0,value:vn(null)});var yr,mr=rr.find,br=\"find\",Er=!0;br in[]&&Array(1).find((function(){Er=!1;})),ke({target:\"Array\",proto:!0,forced:Er},{find:function(t){return mr(this,t,arguments.length>1?arguments[1]:void 0)}}),yr=br,gr[hr][yr]=!0;var wr=Function.prototype,xr=wr.apply,Sr=wr.bind,Tr=wr.call,Dr=\"object\"==typeof Reflect&&Reflect.apply||(Sr?Tr.bind(xr):function(){return Tr.apply(xr,arguments)}),Nr=St(\"species\"),Pr=RegExp.prototype,Mr=function(t,e,n,r){var o=St(t),i=!y((function(){var e={};return e[o]=function(){return 7},7!=\"\"[t](e)})),a=i&&!y((function(){var e=!1,n=/a/;return \"split\"===t&&((n={}).constructor={},n.constructor[Nr]=function(){return n},n.flags=\"\",n[o]=/./[o]),n.exec=function(){return e=!0,null},n[o](\"\"),!e}));if(!i||!a||n){var l=R(/./[o]),u=e(o,\"\"[t],(function(t,e,n,r,o){var a=R(t),u=e.exec;return u===On||u===Pr.exec?i&&!o?{done:!0,value:l(e,n,r)}:{done:!0,value:a(n,e,r)}:{done:!1}}));se(String.prototype,t,u[0]),se(Pr,o,u[1]);}r&&Bt(Pr[o],\"sham\",!0);},Rr=St(\"match\"),Or=g.TypeError,Hr=St(\"species\"),Vr=function(t,e){var n,r=At(t).constructor;return void 0===r||null==(n=At(r)[Hr])?e:function(t){if(kn(t))return t;throw Or(et(t)+\" is not a constructor\")}(n)},zr=R(\"\".charAt),jr=R(\"\".charCodeAt),Lr=R(\"\".slice),Ar=function(t){return function(e,n){var r,o,i=Xe(C(e)),a=pe(n),l=i.length;return a<0||a>=l?t?\"\":void 0:(r=jr(i,a))<55296||r>56319||a+1===l||(o=jr(i,a+1))<56320||o>57343?t?zr(i,a):r:t?Lr(i,a,a+2):o-56320+(r-55296<<10)+65536}},Cr={codeAt:Ar(!1),charAt:Ar(!0)}.charAt,Ir=function(t,e,n){return e+(n?Cr(t,e).length:1)},kr=g.Array,Br=Math.max,$r=function(t,e,n){for(var r=be(t),o=ge(e,r),i=ge(void 0===n?r:n,r),a=kr(Br(i-o,0)),l=0;o<i;o++,l++)Bn(a,l,t[o]);return a.length=l,a},Fr=g.TypeError,qr=function(t,e){var n=t.exec;if(k(n)){var r=E(n,t,e);return null!==r&&At(r),r}if(\"RegExp\"===V(t))return E(On,t,e);throw Fr(\"RegExp#exec called on incompatible receiver\")},Gr=nn.UNSUPPORTED_Y,_r=4294967295,Wr=Math.min,Ur=[].push,Xr=R(/./.exec),Yr=R(Ur),Kr=R(\"\".slice),Jr=!y((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n=\"ab\".split(t);return 2!==n.length||\"a\"!==n[0]||\"b\"!==n[1]}));Mr(\"split\",(function(t,e,n){var r;return r=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(t,n){var r,o,i=Xe(C(this)),a=void 0===n?_r:n>>>0;if(0===a)return [];if(void 0===t)return [i];if(!B(r=t)||!(void 0!==(o=r[Rr])?o:\"RegExp\"==V(r)))return E(e,i,t,a);for(var l,u,c,s=[],f=(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.unicode?\"u\":\"\")+(t.sticky?\"y\":\"\"),d=0,p=new RegExp(t.source,f+\"g\");(l=E(On,p,i))&&!((u=p.lastIndex)>d&&(Yr(s,Kr(i,d,l.index)),l.length>1&&l.index<i.length&&Dr(Ur,s,$r(l,1)),c=l[0].length,d=u,s.length>=a));)p.lastIndex===l.index&&p.lastIndex++;return d===i.length?!c&&Xr(p,\"\")||Yr(s,\"\"):Yr(s,Kr(i,d)),s.length>a?$r(s,0,a):s}:\"0\".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:E(e,this,t,n)}:e,[function(e,n){var o=C(this),i=null==e?void 0:ot(e,t);return i?E(i,e,o,n):E(r,Xe(o),e,n)},function(t,o){var i=At(this),a=Xe(t),l=n(r,i,a,o,r!==e);if(l.done)return l.value;var u=Vr(i,RegExp),c=i.unicode,s=(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(Gr?\"g\":\"y\"),f=new u(Gr?\"^(?:\"+i.source+\")\":i,s),d=void 0===o?_r:o>>>0;if(0===d)return [];if(0===a.length)return null===qr(f,a)?[a]:[];for(var p=0,v=0,h=[];v<a.length;){f.lastIndex=Gr?0:v;var g,y=qr(f,Gr?Kr(a,v):a);if(null===y||(g=Wr(me(f.lastIndex+(Gr?v:0)),a.length))===p)v=Ir(a,v,c);else {if(Yr(h,Kr(a,p,v)),h.length===d)return h;for(var m=1;m<=y.length-1;m++)if(Yr(h,y[m]),h.length===d)return h;v=p=g;}}return Yr(h,Kr(a,p)),h}]}),!Jr,Gr);var Qr=\"\\t\\n\\v\\f\\r                　\\u2028\\u2029\\ufeff\",Zr=R(\"\".replace),to=\"[\"+Qr+\"]\",eo=RegExp(\"^\"+to+to+\"*\"),no=RegExp(to+to+\"*$\"),ro=function(t){return function(e){var n=Xe(C(e));return 1&t&&(n=Zr(n,eo,\"\")),2&t&&(n=Zr(n,no,\"\")),n}},oo={start:ro(1),end:ro(2),trim:ro(3)},io=ce.PROPER,ao=oo.trim;function lo(t){return t.length?t[0].tagName.toLowerCase():\"\"}ke({target:\"String\",proto:!0,forced:function(t){return y((function(){return !!Qr[t]()||\"​᠎\"!==\"​᠎\"[t]()||io&&Qr[t].name!==t}))}(\"trim\")},{trim:function(){return ao(this)}}),ke({global:!0},{globalThis:g}),o.append&&(c.default.fn.append=o.append),o.on&&(c.default.fn.on=o.on),o.focus&&(c.default.fn.focus=o.focus),o.attr&&(c.default.fn.attr=o.attr),o.val&&(c.default.fn.val=o.val),o.html&&(c.default.fn.html=o.html),o.dataset&&(c.default.fn.dataset=o.dataset),o.addClass&&(c.default.fn.addClass=o.addClass),o.removeClass&&(c.default.fn.removeClass=o.removeClass),o.children&&(c.default.fn.children=o.children),o.each&&(c.default.fn.each=o.each),o.find&&(c.default.fn.find=o.find);var uo=!1,co=0,so=0,fo=null,po=null,vo=c.default(\"body\");function ho(t){uo=!1,po=null,fo=null,vo.off(\"mousemove\",go),vo.off(\"mouseup\",ho);}vo.on(\"mousedown\",(function(t){var e=t.target;if((\"TH\"===e.tagName||\"TD\"===e.tagName)&&\"col-resize\"===e.style.cursor){e.style.cursor=\"auto\",t.preventDefault(),uo=!0;var n=t.clientX;co=n;var r=e.getBoundingClientRect().width;so=r,vo.on(\"mousemove\",go),vo.on(\"mouseup\",ho);}}));var go=u.default((function(t){if(uo&&null!=po&&null!=fo){t.preventDefault();var n=t.clientX,r=so+(n-co);(r=Math.floor(100*r)/100)<30&&(r=30),e.Transforms.setNodes(po,{width:r.toString()},{at:fo});}}),100);var yo={type:\"table\",renderElem:function(r,o,i){var a=function(n,r){if(n.isDisabled())return !1;var o=n.selection;if(null==o)return !0;if(e.Range.isCollapsed(o))return !0;var i=o.anchor,a=o.focus,l=t.DomEditor.findPath(n,r),u=e.Editor.start(n,l),c=e.Editor.end(n,l),s=e.Point.compare(i,c)<=0&&e.Point.compare(i,u)>=0,f=e.Point.compare(a,c)<=0&&e.Point.compare(a,u)>=0;return !!(s&&f&&e.Path.equals(i.path.slice(0,3),a.path.slice(0,3)))}(i,r),l=r.width,u=void 0===l?\"auto\":l,c=t.DomEditor.isNodeSelected(i,r),s=ar(r),f=n.jsx(\"div\",{className:\"table-container\",\"data-selected\":c,on:{mousedown:function(n){if(\"DIV\"===n.target.tagName&&n.preventDefault(),!i.isDisabled()){var o=t.DomEditor.findPath(i,r),a=e.Editor.start(i,o),l=i.selection;if(null!=l)l.anchor.path[0]!==o[0]&&i.select(a);else i.select(a);}}}},n.jsx(\"table\",{width:u,contentEditable:a},n.jsx(\"colgroup\",null,s.map((function(t){var e=t.width,r=void 0===e?\"auto\":e;return n.jsx(\"col\",{width:r})}))),n.jsx(\"tbody\",null,o)));return f}},mo={type:\"table-row\",renderElem:function(t,e,r){return n.jsx(\"tr\",null,e)}},bo={type:\"table-cell\",renderElem:function(e,r,o){var i=function(e,n){var r=t.DomEditor.getParentNode(e,n);if(null==r)return !1;var o=t.DomEditor.getParentNode(e,r);return null!=o&&ar(o).some((function(t){return t===n}))}(o,e),a=e,l=a.colSpan,c=void 0===l?1:l,s=a.rowSpan,f=void 0===s?1:s,d=a.isHeader,p=void 0!==d&&d;if(!i)return n.jsx(\"td\",{colSpan:c,rowSpan:f},r);var v=p?\"th\":\"td\",h=n.jsx(v,{colSpan:c,rowSpan:f,style:{borderRightWidth:\"3px\"},on:{mousemove:u.default((function(n){var r=this.elm;if(null!=r){var i=r.getBoundingClientRect(),a=i.left,l=i.width,u=i.top,c=i.height,s=n.clientX,f=n.clientY;if(!uo)s>a+l-5&&s<a+l&&(f>u&&f<u+c)?(r.style.cursor=\"col-resize\",po=o,fo=t.DomEditor.findPath(o,e)):uo||(r.style.cursor=\"auto\",po=null,fo=null);}}),100)}},r);return h}};var Eo={type:\"table\",elemToHtml:function(t,e){var n=t.width;return '<table style=\"width: '+(void 0===n?\"auto\":n)+';\"><tbody>'+e+\"</tbody></table>\"}},wo={type:\"table-row\",elemToHtml:function(t,e){return \"<tr>\"+e+\"</tr>\"}},xo={type:\"table-cell\",elemToHtml:function(t,e){var n=t,r=n.colSpan,o=void 0===r?1:r,i=n.rowSpan,a=void 0===i?1:i,l=n.isHeader,u=void 0!==l&&l,c=n.width,s=u?\"th\":\"td\";return \"<\"+s+' colSpan=\"'+o+'\" rowSpan=\"'+a+'\" width=\"'+(void 0===c?\"auto\":c)+'\">'+e+\"</\"+s+\">\"}};var So={selector:\"table\",preParseHtml:function(t){var e=c.default(t);if(\"table\"!==lo(e))return t;var n=e.find(\"tbody\");if(0===n.length)return t;var r=e.find(\"tr\");return e.append(r),n.remove(),e[0]}},To=rr.filter;ke({target:\"Array\",proto:!0,forced:!Fn(\"filter\")},{filter:function(t){return To(this,t,arguments.length>1?arguments[1]:void 0)}});var Do=Math.floor,No=R(\"\".charAt),Po=R(\"\".replace),Mo=R(\"\".slice),Ro=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,Oo=/\\$([$&'`]|\\d{1,2})/g,Ho=function(t,e,n,r,o,i){var a=n+t.length,l=r.length,u=Oo;return void 0!==o&&(o=dt(o),u=Ro),Po(i,u,(function(i,u){var c;switch(No(u,0)){case\"$\":return \"$\";case\"&\":return t;case\"`\":return Mo(e,0,n);case\"'\":return Mo(e,a);case\"<\":c=o[Mo(u,1,-1)];break;default:var s=+u;if(0===s)return i;if(s>l){var f=Do(s/10);return 0===f?i:f<=l?void 0===r[f-1]?No(u,1):r[f-1]+No(u,1):i}c=r[s-1];}return void 0===c?\"\":c}))},Vo=St(\"replace\"),zo=Math.max,jo=Math.min,Lo=R([].concat),Ao=R([].push),Co=R(\"\".indexOf),Io=R(\"\".slice),ko=\"$0\"===\"a\".replace(/./,\"$0\"),Bo=!!/./[Vo]&&\"\"===/./[Vo](\"a\",\"$0\");Mr(\"replace\",(function(t,e,n){var r=Bo?\"$\":\"$0\";return [function(t,n){var r=C(this),o=null==t?void 0:ot(t,Vo);return o?E(o,t,r,n):E(e,Xe(r),t,n)},function(t,o){var i=At(this),a=Xe(t);if(\"string\"==typeof o&&-1===Co(o,r)&&-1===Co(o,\"$<\")){var l=n(e,i,a,o);if(l.done)return l.value}var u=k(o);u||(o=Xe(o));var c=i.global;if(c){var s=i.unicode;i.lastIndex=0;}for(var f=[];;){var d=qr(i,a);if(null===d)break;if(Ao(f,d),!c)break;\"\"===Xe(d[0])&&(i.lastIndex=Ir(a,me(i.lastIndex),s));}for(var p,v=\"\",h=0,g=0;g<f.length;g++){for(var y=Xe((d=f[g])[0]),m=zo(jo(pe(d.index),a.length),0),b=[],E=1;E<d.length;E++)Ao(b,void 0===(p=d[E])?p:String(p));var w=d.groups;if(u){var x=Lo([y],b,m,a);void 0!==w&&Ao(x,w);var S=Xe(Dr(o,void 0,x));}else S=Ho(y,a,m,b,w,o);m>=h&&(v+=Io(a,h,m)+S,h=m+y.length);}return v+Io(a,h)}]}),!!y((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")}))||!ko||Bo);var $o={selector:\"td:not([data-w-e-type]),th:not([data-w-e-type])\",parseElemHtml:function(t,n,r){var o=c.default(t);0===(n=n.filter((function(t){return !!e.Text.isText(t)||!!r.isInline(t)}))).length&&(n=[{text:o.text().replace(/\\s+/gm,\" \")}]);var i=parseInt(o.attr(\"colSpan\")||\"1\"),a=parseInt(o.attr(\"rowSpan\")||\"1\"),l=o.attr(\"width\")||\"auto\";return {type:\"table-cell\",isHeader:\"th\"===lo(o),colSpan:i,rowSpan:a,width:l,children:n}}};var Fo={selector:\"tr:not([data-w-e-type])\",parseElemHtml:function(e,n,r){return {type:\"table-row\",children:n.filter((function(e){return \"table-cell\"===t.DomEditor.getNodeType(e)}))}}};var qo={selector:\"table:not([data-w-e-type])\",parseElemHtml:function(e,n,r){var o=c.default(e),i=\"auto\";return \"100%\"===function(t,e){for(var n=\"\",r=(t.attr(\"style\")||\"\").split(\";\"),o=r.length,i=0;i<o;i++){var a=r[i];if(a){var l=a.split(\":\");l[0].trim()===e&&(n=l[1].trim());}}return n}(o,\"width\")&&(i=\"100%\"),\"100%\"===o.attr(\"width\")&&(i=\"100%\"),{type:\"table\",width:i,children:n.filter((function(e){return \"table-row\"===t.DomEditor.getNodeType(e)}))}}};var Go=function(){function n(){this.title=t.t(\"tableModule.insertTable\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M0 64v896h1024V64H0z m384 576v-192h256v192h-256z m256 64v192h-256v-192h256z m0-512v192h-256V192h256zM320 192v192H64V192h256z m-256 256h256v192H64v-192z m640 0h256v192h-256v-192z m0-64V192h256v192h-256zM64 704h256v192H64v-192z m640 192v-192h256v192h-256z\"></path></svg>',this.tag=\"button\",this.showDropPanel=!0,this.$content=null;}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.exec=function(t,e){},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||!!t.DomEditor.getSelectedElems(n).some((function(e){var r=t.DomEditor.getNodeType(e);return \"pre\"===r||(\"table\"===r||(\"list-item\"===r||!!n.isVoid(e)))})))},n.prototype.getPanelContentElem=function(t){var e=this;if(this.$content)return this.$content[0];for(var n=c.default('<div class=\"w-e-panel-content-table\"></div>'),r=c.default(\"<span>0 &times; 0</span>\"),o=c.default(\"<table></table>\"),i=0;i<10;i++){for(var a=c.default(\"<tr></tr>\"),l=0;l<10;l++){var u=c.default(\"<td></td>\");u.attr(\"data-x\",l.toString()),u.attr(\"data-y\",i.toString()),a.append(u),u.on(\"mouseenter\",(function(t){var e=t.target;if(null!=e){var n=c.default(e).dataset(),i=n.x,a=n.y;r[0].innerHTML=i+1+\" &times; \"+(a+1),o.children().each((function(t){c.default(t).children().each((function(t){var e=c.default(t),n=e.dataset(),r=n.x,o=n.y;r<=i&&o<=a?e.addClass(\"active\"):e.removeClass(\"active\");}));}));}})),u.on(\"click\",(function(n){n.preventDefault();var r=n.target;if(null!=r){var o=c.default(r).dataset(),i=o.x,a=o.y;e.insertTable(t,a+1,i+1);}}));}o.append(a);}return n.append(o),n.append(r),this.$content=n,n[0]},n.prototype.insertTable=function(n,r,o){var i=parseInt(r,10),a=parseInt(o,10);if(i&&a&&!(i<=0||a<=0)){t.DomEditor.isSelectedEmptyParagraph(n)&&e.Transforms.removeNodes(n,{mode:\"highest\"});var l=function(t,e){for(var n=[],r=0;r<t;r++){for(var o=[],i=0;i<e;i++){var a={type:\"table-cell\",children:[{text:\"\"}]};0===r&&(a.isHeader=!0),o.push(a);}n.push({type:\"table-row\",children:o});}return {type:\"table\",width:\"auto\",children:n}}(i,a);e.Transforms.insertNodes(n,l,{mode:\"highest\"});}},n}(),_o=function(){function n(){this.title=t.t(\"tableModule.deleteTable\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z\" p-id=\"9577\"></path><path d=\"M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(e){return null==e.selection||null==t.DomEditor.getSelectedNodeByType(e,\"table\")},n.prototype.exec=function(t,n){this.isDisabled(t)||e.Transforms.removeNodes(t,{mode:\"highest\"});},n}(),Wo=function(){function n(){this.title=t.t(\"tableModule.insertRow\"),this.iconSvg='<svg viewBox=\"0 0 1048 1024\"><path d=\"M707.7888 521.0112h-147.456v-147.456H488.2432v147.456h-147.456v68.8128h147.456v147.456h72.0896v-147.456h147.456zM0 917.504V0h1048.576v917.504H0zM327.68 65.536H65.536v196.608H327.68V65.536z m327.68 0H393.216v196.608h262.144V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 258.8672H65.536v462.0288H983.04V324.4032z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table\"))},n.prototype.exec=function(n,r){if(!this.isDisabled(n)){var o=Xn(e.Editor.nodes(n,{match:function(e){return t.DomEditor.checkNodeType(e,\"table-cell\")},universal:!0}),1),i=Xn(o[0],2),a=i[0],l=i[1],u=t.DomEditor.getParentNode(n,a),c=(null==u?void 0:u.children.length)||0;if(0!==c){for(var s={type:\"table-row\",children:[]},f=0;f<c;f++){s.children.push({type:\"table-cell\",children:[{text:\"\"}]});}var d=e.Path.parent(l),p=e.Path.next(d);e.Transforms.insertNodes(n,s,{at:p});}}},n}(),Uo=function(){function n(){this.title=t.t(\"tableModule.deleteRow\"),this.iconSvg='<svg viewBox=\"0 0 1048 1024\"><path d=\"M907.6736 586.5472L747.1104 425.984l163.84-163.84-78.6432-78.6432-163.84 163.84L507.904 186.7776 429.2608 262.144l163.84 163.84-167.1168 167.1168 78.6432 78.6432 167.1168-167.1168 160.5632 160.5632 75.3664-78.6432zM0 917.504V0h1048.576v917.504H0z m983.04-327.68h-22.9376l-65.536-65.536H983.04V327.68h-91.7504l65.536-65.536h26.2144V65.536H65.536v196.608h317.8496l65.536 65.536H65.536v196.608h380.1088l-65.536 65.536H65.536v196.608H983.04v-196.608z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table-row\"))},n.prototype.exec=function(n,r){if(!this.isDisabled(n)){var o=Xn(e.Editor.nodes(n,{match:function(e){return t.DomEditor.checkNodeType(e,\"table-row\")},universal:!0}),1),i=Xn(o[0],2),a=i[0],l=i[1],u=t.DomEditor.getParentNode(n,a);((null==u?void 0:u.children.length)||0)<=1?e.Transforms.removeNodes(n,{mode:\"highest\"}):e.Transforms.removeNodes(n,{at:l});}},n}(),Xo={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Yo=Ot(\"span\").classList,Ko=Yo&&Yo.constructor&&Yo.constructor.prototype,Jo=Ko===Object.prototype?void 0:Ko,Qo=rr.forEach,Zo=function(t,e){var n=[][t];return !!n&&y((function(){n.call(null,e||function(){throw 1},1);}))}(\"forEach\"),ti=Zo?[].forEach:function(t){return Qo(this,t,arguments.length>1?arguments[1]:void 0)},ei=function(t){if(t&&t.forEach!==ti)try{Bt(t,\"forEach\",ti);}catch(e){t.forEach=ti;}};for(var ni in Xo)Xo[ni]&&ei(g[ni]&&g[ni].prototype);ei(Jo);var ri=function(){function n(){this.title=t.t(\"tableModule.insertCol\"),this.iconSvg='<svg viewBox=\"0 0 1048 1024\"><path d=\"M327.68 193.3312v186.7776H140.9024v91.7504H327.68v186.7776h88.4736V471.8592h190.0544V380.1088H416.1536V193.3312zM0 917.504V0h1048.576v917.504H0zM655.36 65.536H65.536v720.896H655.36V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 262.144h-262.144v196.608h262.144V327.68z m0 262.144h-262.144v196.608h262.144v-196.608z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table\"))},n.prototype.exec=function(n,r){if(!this.isDisabled(n)){var o=Xn(e.Editor.nodes(n,{match:function(e){return t.DomEditor.checkNodeType(e,\"table-cell\")},universal:!0}),1),i=Xn(o[0],2),a=i[0],l=i[1],u=t.DomEditor.getParentNode(n,a);if(null!=u){var c=t.DomEditor.getParentNode(n,u);if(null!=c)(c.children||[]).forEach((function(r,o){e.Element.isElement(r)&&(r.children||[]).forEach((function(r){var i=t.DomEditor.findPath(n,r);if(i.length===l.length&&s.default(i.slice(-1),l.slice(-1))){var a={type:\"table-cell\",children:[{text:\"\"}]};0===o&&lr(c)&&(a.isHeader=!0),e.Transforms.insertNodes(n,a,{at:i});}}));}));}}},n}(),oi=function(){function n(){this.title=t.t(\"tableModule.deleteCol\"),this.iconSvg='<svg viewBox=\"0 0 1048 1024\"><path d=\"M327.68 510.976L393.216 445.44v-13.1072L327.68 366.7968V510.976z m327.68-78.4384l65.536-65.536V507.904L655.36 442.368v-9.8304z m393.216 484.9664V0H0v917.504h1048.576z m-65.536-131.072h-262.144v-52.4288l-13.1072 13.1072-52.4288-52.4288v91.7504H393.216v-91.7504l-52.4288 52.4288-13.1072-13.1072v52.4288H65.536V65.536H327.68v121.2416l36.0448-36.0448 29.4912 29.4912V62.2592h262.144V180.224l49.152-49.152 16.384 16.384V62.2592h262.144V786.432z m-294.912-108.1344l-160.5632-160.5632-167.1168 167.1168-78.6432-78.6432 167.1168-167.1168L288.3584 278.528l78.6432-78.6432 160.5632 160.5632 163.84-163.84 78.6432 78.6432-163.84 163.84 160.5632 160.5632-78.6432 78.6432z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table-cell\"))},n.prototype.exec=function(n,r){if(!this.isDisabled(n)){var o=Xn(e.Editor.nodes(n,{match:function(e){return t.DomEditor.checkNodeType(e,\"table-cell\")},universal:!0}),1),i=Xn(o[0],2),a=i[0],l=i[1],u=t.DomEditor.getParentNode(n,a),c=(null==u?void 0:u.children.length)||0;if(!u||c<=1)e.Transforms.removeNodes(n,{mode:\"highest\"});else {var f=t.DomEditor.getParentNode(n,u);if(null!=f)(f.children||[]).forEach((function(r){e.Element.isElement(r)&&(r.children||[]).forEach((function(r){var o=t.DomEditor.findPath(n,r);o.length===l.length&&s.default(o.slice(-1),l.slice(-1))&&e.Transforms.removeNodes(n,{at:o});}));}));}}},n}(),ii=function(){function n(){this.title=t.t(\"tableModule.header\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M704 128l-64 0L384 128 320 128 0 128l0 256 0 64 0 192 0 64 0 256 320 0 64 0 256 0 64 0 320 0 0-256 0-64L1024 448 1024 384 1024 128 704 128zM640 640 384 640 384 448l256 0L640 640zM64 448l256 0 0 192L64 640 64 448zM320 896 64 896l0-192 256 0L320 896zM640 896 384 896l0-192 256 0L640 896zM960 896l-256 0 0-192 256 0L960 896zM960 640l-256 0L704 448l256 0L960 640z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(e){var n=t.DomEditor.getSelectedNodeByType(e,\"table\");return null!=n&&lr(n)},n.prototype.isActive=function(t){return !!this.getValue(t)},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table\"))},n.prototype.exec=function(n,r){if(!this.isDisabled(n)){var o=!r,i=t.DomEditor.getSelectedNodeByType(n,\"table\");if(null!=i)ar(i).forEach((function(r){return e.Transforms.setNodes(n,{isHeader:o},{at:t.DomEditor.findPath(n,r)})}));}},n}(),ai=function(){function n(){this.title=t.t(\"tableModule.widthAuto\"),this.iconSvg='<svg viewBox=\"0 0 1228 1024\"><path d=\"M862.514337 563.200461H404.581995v121.753478a13.311987 13.311987 0 0 1-6.655993 11.468789 10.23999 10.23999 0 0 1-12.083188-1.433599l-204.799795-179.199821a13.721586 13.721586 0 0 1 0-20.479979l204.799795-179.302221a10.23999 10.23999 0 0 1 12.185588-1.535998 13.209587 13.209587 0 0 1 6.553593 11.673588v115.097485h457.932342V319.693504a11.571188 11.571188 0 0 1 18.841582-10.239989l204.799795 179.19982a13.721586 13.721586 0 0 1 0 20.47998l-204.799795 179.199821a10.23999 10.23999 0 0 1-12.185588 1.535998 13.311987 13.311987 0 0 1-6.655994-11.571188V563.200461zM136.499064 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785H15.155185A15.155185 15.155185 0 0 1 0 1008.844815V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086294a15.155185 15.155185 0 0 1 15.257585 15.155185zM1228.798771 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785h-106.188693a15.155185 15.155185 0 0 1-15.155185-15.052785V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086293A15.155185 15.155185 0 0 1 1228.798771 15.053809z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(e){var n=t.DomEditor.getSelectedNodeByType(e,\"table\");return null!=n&&\"100%\"===n.width},n.prototype.isActive=function(t){return !!this.getValue(t)},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||null==t.DomEditor.getSelectedNodeByType(n,\"table\"))},n.prototype.exec=function(t,n){if(!this.isDisabled(t)){var r={width:n?\"auto\":\"100%\"};e.Transforms.setNodes(t,r,{mode:\"highest\"});}},n}(),li={renderElems:[yo,mo,bo],elemsToHtml:[Eo,wo,xo],preParseHtml:[So],parseElemsHtml:[$o,Fo,qo],menus:[{key:\"insertTable\",factory:function(){return new Go}},{key:\"deleteTable\",factory:function(){return new _o}},{key:\"insertTableRow\",factory:function(){return new Wo}},{key:\"deleteTableRow\",factory:function(){return new Uo}},{key:\"insertTableCol\",factory:function(){return new ri}},{key:\"deleteTableCol\",factory:function(){return new oi}},{key:\"tableHeader\",factory:function(){return new ii}},{key:\"tableFullWidth\",factory:function(){return new ai}}],editorPlugin:function(n){var r=n.insertBreak,o=n.deleteBackward,i=n.deleteForward,a=n.normalizeNode,l=n.insertData,u=n.handleTab,c=n.selectAll,s=n;return s.insertBreak=function(){null==t.DomEditor.getSelectedNodeByType(s,\"table\")?r():s.insertText(\"\\n\");},s.deleteBackward=function(t){if(!Yn(s)){var n=s.selection;if(n){var r=e.Editor.before(s,n);if(r){var i=Kn(s,r),a=Kn(s,n);if(i&&!a)return}}o(t);}},s.handleTab=function(){var r;if(t.DomEditor.getSelectedNodeByType(s,\"table\")){var o=e.Editor.above(n);t.DomEditor.checkNodeType(o[0],\"table-cell\")&&e.Transforms.select(n,o[1]);var i=e.Editor.next(n);if(i)i[0]&&i[0].text&&(i=null!==(r=e.Editor.above(n,{at:i[1]}))&&void 0!==r?r:i),e.Transforms.select(n,i[1]);else {var a=s.children||[],l=a.length;if(t.DomEditor.checkNodeType(a[l-1],\"table\")){var c=t.DomEditor.genEmptyParagraph();e.Transforms.insertNodes(s,c,{at:[l]}),s.handleTab();}}}else u();},s.deleteForward=function(t){Yn(s)||i(t);},s.normalizeNode=function(n){var r=Xn(n,2),o=r[0],i=r[1];if(\"table\"!==t.DomEditor.getNodeType(o))return a([o,i]);if(t.DomEditor.isLastNode(s,o)){var l=t.DomEditor.genEmptyParagraph();e.Transforms.insertNodes(s,l,{at:[i[0]+1]});}},s.insertData=function(n){if(null!=t.DomEditor.getSelectedNodeByType(s,\"table\")){var r=n.getData(\"text/plain\");\"\\n\"===r||/<img[^>]+>/.test(n.getData(\"text/html\"))?l(n):e.Editor.insertText(s,r);}else l(n);},s.selectAll=function(){var n=s.selection;if(null!=n){var r=t.DomEditor.getSelectedNodeByType(s,\"table-cell\");if(null!=r){var o=n.anchor,i=n.focus;if(e.Path.equals(o.path.slice(0,3),i.path.slice(0,3)))if(0!==e.Node.string(r).length){var a=t.DomEditor.findPath(s,r),l={anchor:e.Editor.start(s,a),focus:e.Editor.end(s,a)};s.select(l);}else c();else c();}else c();}else c();},s}};return li}));\n\n  });\n\n  var dist$2 = createCommonjsModule$1(function (module, exports) {\n  !function(t,e){module.exports=e(dist$6,require$$2$1,require$$2,require$$1,require$$4);}(commonjsGlobal,(function(t,e,n,r,o){function i(t){return t&&\"object\"==typeof t&&\"default\"in t?t:{default:t}}var u=i(r);t.i18nAddResources(\"en\",{videoModule:{delete:\"Delete\",uploadVideo:\"Upload video\",insertVideo:\"Insert video\",videoSrc:\"Video source\",videoSrcPlaceHolder:\"Video file url, or third-party <iframe>\",videoPoster:\"Video poster\",videoPosterPlaceHolder:\"Poster image url\",ok:\"Ok\",editSize:\"Edit size\",width:\"Width\",height:\"Height\"}}),t.i18nAddResources(\"zh-CN\",{videoModule:{delete:\"删除视频\",uploadVideo:\"上传视频\",insertVideo:\"插入视频\",videoSrc:\"视频地址\",videoSrcPlaceHolder:\"视频文件 url 或第三方 <iframe>\",videoPoster:\"视频封面\",videoPosterPlaceHolder:\"封面图片 url\",ok:\"确定\",editSize:\"修改尺寸\",width:\"宽度\",height:\"高度\"}});\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n  var a=function(){return a=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},a.apply(this,arguments)};function c(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t));}catch(t){i(t);}}function a(t){try{c(r.throw(t));}catch(t){i(t);}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e);}))).then(u,a);}c((r=r.apply(t,e||[])).next());}))}function f(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],r=0;}finally{n=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function s(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return {next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function l(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value);}catch(t){o={error:t};}finally{try{r&&!r.done&&(n=i.return)&&n.call(i);}finally{if(o)throw o.error}}return u}function d(t){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=s(t),e={},r(\"next\"),r(\"throw\"),r(\"return\"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n});}),e);})(r,o,(e=t[n](e)).done,e.value);}))};}}var p=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function v(t){var e={exports:{}};return t(e,e.exports),e.exports}var h,y,g=function(t){return t&&t.Math==Math&&t},m=g(\"object\"==typeof globalThis&&globalThis)||g(\"object\"==typeof window&&window)||g(\"object\"==typeof self&&self)||g(\"object\"==typeof p&&p)||function(){return this}()||Function(\"return this\")(),b=function(t){try{return !!t()}catch(t){return !0}},w=!b((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),S=Function.prototype.call,x=S.bind?S.bind(S):function(){return S.apply(S,arguments)},E={}.propertyIsEnumerable,O=Object.getOwnPropertyDescriptor,j={f:O&&!E.call({1:2},1)?function(t){var e=O(this,t);return !!e&&e.enumerable}:E},I=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},P=Function.prototype,T=P.bind,M=P.call,A=T&&T.bind(M),R=T?function(t){return t&&A(M,t)}:function(t){return t&&function(){return M.apply(t,arguments)}},k=R({}.toString),C=R(\"\".slice),N=function(t){return C(k(t),8,-1)},L=m.Object,V=R(\"\".split),D=b((function(){return !L(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==N(t)?V(t,\"\"):L(t)}:L,z=m.TypeError,F=function(t){if(null==t)throw z(\"Can't call method on \"+t);return t},_=function(t){return D(F(t))},$=function(t){return \"function\"==typeof t},H=function(t){return \"object\"==typeof t?null!==t:$(t)},B=function(t){return $(t)?t:void 0},G=function(t,e){return arguments.length<2?B(m[t]):m[t]&&m[t][e]},W=R({}.isPrototypeOf),U=G(\"navigator\",\"userAgent\")||\"\",q=m.process,K=m.Deno,X=q&&q.versions||K&&K.version,Y=X&&X.v8;Y&&(y=(h=Y.split(\".\"))[0]>0&&h[0]<4?1:+(h[0]+h[1])),!y&&U&&(!(h=U.match(/Edge\\/(\\d+)/))||h[1]>=74)&&(h=U.match(/Chrome\\/(\\d+)/))&&(y=+h[1]);var J=y,Q=!!Object.getOwnPropertySymbols&&!b((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&J&&J<41})),Z=Q&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,tt=m.Object,et=Z?function(t){return \"symbol\"==typeof t}:function(t){var e=G(\"Symbol\");return $(e)&&W(e.prototype,tt(t))},nt=m.String,rt=function(t){try{return nt(t)}catch(t){return \"Object\"}},ot=m.TypeError,it=function(t){if($(t))return t;throw ot(rt(t)+\" is not a function\")},ut=function(t,e){var n=t[e];return null==n?void 0:it(n)},at=m.TypeError,ct=Object.defineProperty,ft=function(t,e){try{ct(m,t,{value:e,configurable:!0,writable:!0});}catch(n){m[t]=e;}return e},st=\"__core-js_shared__\",lt=m[st]||ft(st,{}),dt=v((function(t){(t.exports=function(t,e){return lt[t]||(lt[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),pt=m.Object,vt=function(t){return pt(F(t))},ht=R({}.hasOwnProperty),yt=Object.hasOwn||function(t,e){return ht(vt(t),e)},gt=0,mt=Math.random(),bt=R(1..toString),wt=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+bt(++gt+mt,36)},St=dt(\"wks\"),xt=m.Symbol,Et=xt&&xt.for,Ot=Z?xt:xt&&xt.withoutSetter||wt,jt=function(t){if(!yt(St,t)||!Q&&\"string\"!=typeof St[t]){var e=\"Symbol.\"+t;Q&&yt(xt,t)?St[t]=xt[t]:St[t]=Z&&Et?Et(e):Ot(e);}return St[t]},It=m.TypeError,Pt=jt(\"toPrimitive\"),Tt=function(t,e){if(!H(t)||et(t))return t;var n,r=ut(t,Pt);if(r){if(void 0===e&&(e=\"default\"),n=x(r,t,e),!H(n)||et(n))return n;throw It(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var n,r;if(\"string\"===e&&$(n=t.toString)&&!H(r=x(n,t)))return r;if($(n=t.valueOf)&&!H(r=x(n,t)))return r;if(\"string\"!==e&&$(n=t.toString)&&!H(r=x(n,t)))return r;throw at(\"Can't convert object to primitive value\")}(t,e)},Mt=function(t){var e=Tt(t,\"string\");return et(e)?e:e+\"\"},At=m.document,Rt=H(At)&&H(At.createElement),kt=function(t){return Rt?At.createElement(t):{}},Ct=!w&&!b((function(){return 7!=Object.defineProperty(kt(\"div\"),\"a\",{get:function(){return 7}}).a})),Nt=Object.getOwnPropertyDescriptor,Lt={f:w?Nt:function(t,e){if(t=_(t),e=Mt(e),Ct)try{return Nt(t,e)}catch(t){}if(yt(t,e))return I(!x(j.f,t,e),t[e])}},Vt=m.String,Dt=m.TypeError,zt=function(t){if(H(t))return t;throw Dt(Vt(t)+\" is not an object\")},Ft=m.TypeError,_t=Object.defineProperty,$t={f:w?_t:function(t,e,n){if(zt(t),e=Mt(e),zt(n),Ct)try{return _t(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw Ft(\"Accessors not supported\");return \"value\"in n&&(t[e]=n.value),t}},Ht=w?function(t,e,n){return $t.f(t,e,I(1,n))}:function(t,e,n){return t[e]=n,t},Bt=R(Function.toString);$(lt.inspectSource)||(lt.inspectSource=function(t){return Bt(t)});var Gt,Wt,Ut,qt=lt.inspectSource,Kt=m.WeakMap,Xt=$(Kt)&&/native code/.test(qt(Kt)),Yt=dt(\"keys\"),Jt=function(t){return Yt[t]||(Yt[t]=wt(t))},Qt={},Zt=\"Object already initialized\",te=m.TypeError,ee=m.WeakMap;if(Xt||lt.state){var ne=lt.state||(lt.state=new ee),re=R(ne.get),oe=R(ne.has),ie=R(ne.set);Gt=function(t,e){if(oe(ne,t))throw new te(Zt);return e.facade=t,ie(ne,t,e),e},Wt=function(t){return re(ne,t)||{}},Ut=function(t){return oe(ne,t)};}else {var ue=Jt(\"state\");Qt[ue]=!0,Gt=function(t,e){if(yt(t,ue))throw new te(Zt);return e.facade=t,Ht(t,ue,e),e},Wt=function(t){return yt(t,ue)?t[ue]:{}},Ut=function(t){return yt(t,ue)};}var ae={set:Gt,get:Wt,has:Ut,enforce:function(t){return Ut(t)?Wt(t):Gt(t,{})},getterFor:function(t){return function(e){var n;if(!H(e)||(n=Wt(e)).type!==t)throw te(\"Incompatible receiver, \"+t+\" required\");return n}}},ce=Function.prototype,fe=w&&Object.getOwnPropertyDescriptor,se=yt(ce,\"name\"),le={EXISTS:se,PROPER:se&&\"something\"===function(){}.name,CONFIGURABLE:se&&(!w||w&&fe(ce,\"name\").configurable)},de=v((function(t){var e=le.CONFIGURABLE,n=ae.get,r=ae.enforce,o=String(String).split(\"String\");(t.exports=function(t,n,i,u){var a,c=!!u&&!!u.unsafe,f=!!u&&!!u.enumerable,s=!!u&&!!u.noTargetGet,l=u&&void 0!==u.name?u.name:n;$(i)&&(\"Symbol(\"===String(l).slice(0,7)&&(l=\"[\"+String(l).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!yt(i,\"name\")||e&&i.name!==l)&&Ht(i,\"name\",l),(a=r(i)).source||(a.source=o.join(\"string\"==typeof l?l:\"\"))),t!==m?(c?!s&&t[n]&&(f=!0):delete t[n],f?t[n]=i:Ht(t,n,i)):f?t[n]=i:ft(n,i);})(Function.prototype,\"toString\",(function(){return $(this)&&n(this).source||qt(this)}));})),pe=Math.ceil,ve=Math.floor,he=function(t){var e=+t;return e!=e||0===e?0:(e>0?ve:pe)(e)},ye=Math.max,ge=Math.min,me=function(t,e){var n=he(t);return n<0?ye(n+e,0):ge(n,e)},be=Math.min,we=function(t){return t>0?be(he(t),9007199254740991):0},Se=function(t){return we(t.length)},xe=function(t){return function(e,n,r){var o,i=_(e),u=Se(i),a=me(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return !0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return !t&&-1}},Ee={includes:xe(!0),indexOf:xe(!1)},Oe=Ee.indexOf,je=R([].push),Ie=function(t,e){var n,r=_(t),o=0,i=[];for(n in r)!yt(Qt,n)&&yt(r,n)&&je(i,n);for(;e.length>o;)yt(r,n=e[o++])&&(~Oe(i,n)||je(i,n));return i},Pe=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],Te=Pe.concat(\"length\",\"prototype\"),Me={f:Object.getOwnPropertyNames||function(t){return Ie(t,Te)}},Ae={f:Object.getOwnPropertySymbols},Re=R([].concat),ke=G(\"Reflect\",\"ownKeys\")||function(t){var e=Me.f(zt(t)),n=Ae.f;return n?Re(e,n(t)):e},Ce=function(t,e){for(var n=ke(e),r=$t.f,o=Lt.f,i=0;i<n.length;i++){var u=n[i];yt(t,u)||r(t,u,o(e,u));}},Ne=/#|\\.prototype\\./,Le=function(t,e){var n=De[Ve(t)];return n==Fe||n!=ze&&($(e)?b(e):!!e)},Ve=Le.normalize=function(t){return String(t).replace(Ne,\".\").toLowerCase()},De=Le.data={},ze=Le.NATIVE=\"N\",Fe=Le.POLYFILL=\"P\",_e=Le,$e=Lt.f,He=function(t,e){var n,r,o,i,u,a=t.target,c=t.global,f=t.stat;if(n=c?m:f?m[a]||ft(a,{}):(m[a]||{}).prototype)for(r in e){if(i=e[r],o=t.noTargetGet?(u=$e(n,r))&&u.value:n[r],!_e(c?r:a+(f?\".\":\"#\")+r,t.forced)&&void 0!==o){if(typeof i==typeof o)continue;Ce(i,o);}(t.sham||o&&o.sham)&&Ht(i,\"sham\",!0),de(n,r,i,t);}},Be={};Be[jt(\"toStringTag\")]=\"z\";var Ge,We=\"[object z]\"===String(Be),Ue=jt(\"toStringTag\"),qe=m.Object,Ke=\"Arguments\"==N(function(){return arguments}()),Xe=We?N:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=qe(t),Ue))?n:Ke?N(e):\"Object\"==(r=N(e))&&$(e.callee)?\"Arguments\":r},Ye=m.String,Je=function(t){if(\"Symbol\"===Xe(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return Ye(t)},Qe=\"\\t\\n\\v\\f\\r                　\\u2028\\u2029\\ufeff\",Ze=R(\"\".replace),tn=\"[\"+Qe+\"]\",en=RegExp(\"^\"+tn+tn+\"*\"),nn=RegExp(tn+tn+\"*$\"),rn=function(t){return function(e){var n=Je(F(e));return 1&t&&(n=Ze(n,en,\"\")),2&t&&(n=Ze(n,nn,\"\")),n}},on={start:rn(1),end:rn(2),trim:rn(3)},un=le.PROPER,an=on.trim;function cn(t){return t.length?t[0].tagName.toLowerCase():\"\"}function fn(t,e,n){void 0===e&&(e=\"auto\"),void 0===n&&(n=\"auto\");var r=u.default(t);return r.attr(\"width\",e),r.attr(\"height\",n),r[0].outerHTML}He({target:\"String\",proto:!0,forced:(Ge=\"trim\",b((function(){return !!Qe[Ge]()||\"​᠎\"!==\"​᠎\"[Ge]()||un&&Qe[Ge].name!==Ge})))},{trim:function(){return an(this)}}),He({global:!0},{globalThis:m}),r.append&&(u.default.fn.append=r.append),r.on&&(u.default.fn.on=r.on),r.focus&&(u.default.fn.focus=r.focus),r.attr&&(u.default.fn.attr=r.attr),r.val&&(u.default.fn.val=r.val),r.html&&(u.default.fn.html=r.html),r.parent&&(u.default.fn.parent=r.parent),r.hasClass&&(u.default.fn.hasClass=r.hasClass),r.empty&&(u.default.fn.empty=r.empty);var sn={type:\"video\",renderElem:function(e,r,o){var i,u=e,a=u.src,c=void 0===a?\"\":a,f=u.poster,s=void 0===f?\"\":f,l=u.width,d=void 0===l?\"auto\":l,p=u.height,v=void 0===p?\"auto\":p,h=t.DomEditor.isNodeSelected(o,e);if(0===c.trim().indexOf(\"<iframe \")){var y=fn(c,d,v);i=n.jsx(\"div\",{className:\"w-e-textarea-video-container\",\"data-selected\":h?\"true\":\"\",innerHTML:y});}else {var g=n.jsx(\"video\",{poster:s,controls:!0},n.jsx(\"source\",{src:c,type:\"video/mp4\"}),\"Sorry, your browser doesn't support embedded videos.\\n 抱歉，浏览器不支持 video 视频\");\"auto\"!==d&&(g.data.width=d),\"auto\"!==v&&(g.data.height=v),i=n.jsx(\"div\",{className:\"w-e-textarea-video-container\",\"data-selected\":h?\"true\":\"\"},g);}return n.h(\"div\",{props:{contentEditable:!1},on:{mousedown:function(t){return t.preventDefault()}}},i)}};var ln,dn={type:\"video\",elemToHtml:function(t,e){var n=t,r=n.src,o=void 0===r?\"\":r,i=n.poster,u=void 0===i?\"\":i,a=n.width,c=void 0===a?\"auto\":a,f=n.height,s=void 0===f?\"auto\":f,l='<div data-w-e-type=\"video\" data-w-e-is-void>\\n';return 0===o.trim().indexOf(\"<iframe \")?l+=fn(o,c,s):l+='<video poster=\"'+u+'\" controls=\"true\" width=\"'+c+'\" height=\"'+s+'\"><source src=\"'+o+'\" type=\"video/mp4\"/></video>',l+=\"\\n</div>\"}},pn=Object.keys||function(t){return Ie(t,Pe)},vn=w?Object.defineProperties:function(t,e){zt(t);for(var n,r=_(e),o=pn(e),i=o.length,u=0;i>u;)$t.f(t,n=o[u++],r[n]);return t},hn=G(\"document\",\"documentElement\"),yn=Jt(\"IE_PROTO\"),gn=function(){},mn=function(t){return \"<script>\"+t+\"</\"+\"script>\"},bn=function(t){t.write(mn(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},wn=function(){try{ln=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;wn=\"undefined\"!=typeof document?document.domain&&ln?bn(ln):((e=kt(\"iframe\")).style.display=\"none\",hn.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(mn(\"document.F=Object\")),t.close(),t.F):bn(ln);for(var n=Pe.length;n--;)delete wn.prototype[Pe[n]];return wn()};Qt[yn]=!0;var Sn=Object.create||function(t,e){var n;return null!==t?(gn.prototype=zt(t),n=new gn,gn.prototype=null,n[yn]=t):n=wn(),void 0===e?n:vn(n,e)},xn=jt(\"unscopables\"),En=Array.prototype;null==En[xn]&&$t.f(En,xn,{configurable:!0,value:Sn(null)});var On=function(t){En[xn][t]=!0;},jn=Ee.includes;He({target:\"Array\",proto:!0},{includes:function(t){return jn(this,t,arguments.length>1?arguments[1]:void 0)}}),On(\"includes\");var In={selector:\"iframe,video,p\",preParseHtml:function(t){var e=u.default(t),n=e;if(\"p\"===cn(e)){var r=e.children();if(1===r.length){var o=r[0],i=o.tagName.toLowerCase();[\"iframe\",\"video\"].includes(i)&&(n=u.default(o));}}var a=cn(n);if(\"iframe\"!==a&&\"video\"!==a)return n[0];if(\"video\"===n.parent().attr(\"data-w-e-type\"))return n[0];var c=u.default('<div data-w-e-type=\"video\" data-w-e-is-void></div>');return c.append(n),c[0]}},Pn=R(R.bind),Tn=function(t,e){return it(t),void 0===e?t:Pn?Pn(t,e):function(){return t.apply(e,arguments)}},Mn=Array.isArray||function(t){return \"Array\"==N(t)},An=function(){},Rn=[],kn=G(\"Reflect\",\"construct\"),Cn=/^\\s*(?:class|function)\\b/,Nn=R(Cn.exec),Ln=!Cn.exec(An),Vn=function(t){if(!$(t))return !1;try{return kn(An,Rn,t),!0}catch(t){return !1}},Dn=!kn||b((function(){var t;return Vn(Vn.call)||!Vn(Object)||!Vn((function(){t=!0;}))||t}))?function(t){if(!$(t))return !1;switch(Xe(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Ln||!!Nn(Cn,qt(t))}:Vn,zn=jt(\"species\"),Fn=m.Array,_n=function(t,e){return new(function(t){var e;return Mn(t)&&(e=t.constructor,(Dn(e)&&(e===Fn||Mn(e.prototype))||H(e)&&null===(e=e[zn]))&&(e=void 0)),void 0===e?Fn:e}(t))(0===e?0:e)},$n=R([].push),Hn=function(t){var e=1==t,n=2==t,r=3==t,o=4==t,i=6==t,u=7==t,a=5==t||i;return function(c,f,s,l){for(var d,p,v=vt(c),h=D(v),y=Tn(f,s),g=Se(h),m=0,b=l||_n,w=e?b(c,g):n||u?b(c,0):void 0;g>m;m++)if((a||m in h)&&(p=y(d=h[m],m,v),t))if(e)w[m]=p;else if(p)switch(t){case 3:return !0;case 5:return d;case 6:return m;case 2:$n(w,d);}else switch(t){case 4:return !1;case 7:$n(w,d);}return i?-1:r||o?o:w}},Bn={forEach:Hn(0),map:Hn(1),filter:Hn(2),some:Hn(3),every:Hn(4),find:Hn(5),findIndex:Hn(6),filterReject:Hn(7)},Gn=Bn.find,Wn=\"find\",Un=!0;Wn in[]&&Array(1).find((function(){Un=!1;})),He({target:\"Array\",proto:!0,forced:Un},{find:function(t){return Gn(this,t,arguments.length>1?arguments[1]:void 0)}}),On(Wn);var qn=We?{}.toString:function(){return \"[object \"+Xe(this)+\"]\"};function Kn(t,e,n,r){return void 0===e&&(e=\"\"),void 0===n&&(n=\"auto\"),void 0===r&&(r=\"auto\"),{type:\"video\",src:t,poster:e,width:n,height:r,children:[{text:\"\"}]}}We||de(Object.prototype,\"toString\",qn,{unsafe:!0});var Xn,Yn,Jn={selector:'div[data-w-e-type=\"video\"]',parseElemHtml:function(t,e,n){var r=u.default(t),o=\"\",i=\"\",a=\"auto\",c=\"auto\",f=r.find(\"iframe\");if(f.length>0)return a=f.attr(\"width\")||\"auto\",c=f.attr(\"height\")||\"auto\",Kn(o=f[0].outerHTML,i,a,c);var s=r.find(\"video\");return (o=s.attr(\"src\")||\"\")||s.length>0&&(o=s.find(\"source\").attr(\"src\")||\"\"),a=s.attr(\"width\")||\"auto\",c=s.attr(\"height\")||\"auto\",Kn(o,i=s.attr(\"poster\")||\"\",a,c)}},Qn=function(){var t=zt(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e},Zn=m.RegExp,tr=b((function(){var t=Zn(\"a\",\"y\");return t.lastIndex=2,null!=t.exec(\"abcd\")})),er=tr||b((function(){return !Zn(\"a\",\"y\").sticky})),nr={BROKEN_CARET:tr||b((function(){var t=Zn(\"^r\",\"gy\");return t.lastIndex=2,null!=t.exec(\"str\")})),MISSED_STICKY:er,UNSUPPORTED_Y:tr},rr=m.RegExp,or=b((function(){var t=rr(\".\",\"s\");return !(t.dotAll&&t.exec(\"\\n\")&&\"s\"===t.flags)})),ir=m.RegExp,ur=b((function(){var t=ir(\"(?<a>b)\",\"g\");return \"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")})),ar=ae.get,cr=dt(\"native-string-replace\",String.prototype.replace),fr=RegExp.prototype.exec,sr=fr,lr=R(\"\".charAt),dr=R(\"\".indexOf),pr=R(\"\".replace),vr=R(\"\".slice),hr=(Yn=/b*/g,x(fr,Xn=/a/,\"a\"),x(fr,Yn,\"a\"),0!==Xn.lastIndex||0!==Yn.lastIndex),yr=nr.BROKEN_CARET,gr=void 0!==/()??/.exec(\"\")[1];(hr||gr||yr||or||ur)&&(sr=function(t){var e,n,r,o,i,u,a,c=this,f=ar(c),s=Je(t),l=f.raw;if(l)return l.lastIndex=c.lastIndex,e=x(sr,l,s),c.lastIndex=l.lastIndex,e;var d=f.groups,p=yr&&c.sticky,v=x(Qn,c),h=c.source,y=0,g=s;if(p&&(v=pr(v,\"y\",\"\"),-1===dr(v,\"g\")&&(v+=\"g\"),g=vr(s,c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&\"\\n\"!==lr(s,c.lastIndex-1))&&(h=\"(?: \"+h+\")\",g=\" \"+g,y++),n=new RegExp(\"^(?:\"+h+\")\",v)),gr&&(n=new RegExp(\"^\"+h+\"$(?!\\\\s)\",v)),hr&&(r=c.lastIndex),o=x(fr,p?n:c,g),p?o?(o.input=vr(o.input,y),o[0]=vr(o[0],y),o.index=c.lastIndex,c.lastIndex+=o[0].length):c.lastIndex=0:hr&&o&&(c.lastIndex=c.global?o.index+o[0].length:r),gr&&o&&o.length>1&&x(cr,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&d)for(o.groups=u=Sn(null),i=0;i<d.length;i++)u[(a=d[i])[0]]=o[a[1]];return o});var mr=sr;He({target:\"RegExp\",proto:!0,forced:/./.exec!==mr},{exec:mr});var br=Function.prototype,wr=br.apply,Sr=br.bind,xr=br.call,Er=\"object\"==typeof Reflect&&Reflect.apply||(Sr?xr.bind(wr):function(){return xr.apply(wr,arguments)}),Or=jt(\"species\"),jr=RegExp.prototype,Ir=R(\"\".charAt),Pr=R(\"\".charCodeAt),Tr=R(\"\".slice),Mr=function(t){return function(e,n){var r,o,i=Je(F(e)),u=he(n),a=i.length;return u<0||u>=a?t?\"\":void 0:(r=Pr(i,u))<55296||r>56319||u+1===a||(o=Pr(i,u+1))<56320||o>57343?t?Ir(i,u):r:t?Tr(i,u,u+2):o-56320+(r-55296<<10)+65536}},Ar={codeAt:Mr(!1),charAt:Mr(!0)},Rr=Ar.charAt,kr=function(t,e,n){return e+(n?Rr(t,e).length:1)},Cr=Math.floor,Nr=R(\"\".charAt),Lr=R(\"\".replace),Vr=R(\"\".slice),Dr=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,zr=/\\$([$&'`]|\\d{1,2})/g,Fr=function(t,e,n,r,o,i){var u=n+t.length,a=r.length,c=zr;return void 0!==o&&(o=vt(o),c=Dr),Lr(i,c,(function(i,c){var f;switch(Nr(c,0)){case\"$\":return \"$\";case\"&\":return t;case\"`\":return Vr(e,0,n);case\"'\":return Vr(e,u);case\"<\":f=o[Vr(c,1,-1)];break;default:var s=+c;if(0===s)return i;if(s>a){var l=Cr(s/10);return 0===l?i:l<=a?void 0===r[l-1]?Nr(c,1):r[l-1]+Nr(c,1):i}f=r[s-1];}return void 0===f?\"\":f}))},_r=m.TypeError,$r=function(t,e){var n=t.exec;if($(n)){var r=x(n,t,e);return null!==r&&zt(r),r}if(\"RegExp\"===N(t))return x(mr,t,e);throw _r(\"RegExp#exec called on incompatible receiver\")},Hr=jt(\"replace\"),Br=Math.max,Gr=Math.min,Wr=R([].concat),Ur=R([].push),qr=R(\"\".indexOf),Kr=R(\"\".slice),Xr=\"$0\"===\"a\".replace(/./,\"$0\"),Yr=!!/./[Hr]&&\"\"===/./[Hr](\"a\",\"$0\");function Jr(t){return void 0===t&&(t=\"r\"),t+\"-\"+o.nanoid()}!function(t,e,n,r){var o=jt(t),i=!b((function(){var e={};return e[o]=function(){return 7},7!=\"\"[t](e)})),u=i&&!b((function(){var e=!1,n=/a/;return \"split\"===t&&((n={}).constructor={},n.constructor[Or]=function(){return n},n.flags=\"\",n[o]=/./[o]),n.exec=function(){return e=!0,null},n[o](\"\"),!e}));if(!i||!u||n){var a=R(/./[o]),c=e(o,\"\"[t],(function(t,e,n,r,o){var u=R(t),c=e.exec;return c===mr||c===jr.exec?i&&!o?{done:!0,value:a(e,n,r)}:{done:!0,value:u(n,e,r)}:{done:!1}}));de(String.prototype,t,c[0]),de(jr,o,c[1]);}r&&Ht(jr[o],\"sham\",!0);}(\"replace\",(function(t,e,n){var r=Yr?\"$\":\"$0\";return [function(t,n){var r=F(this),o=null==t?void 0:ut(t,Hr);return o?x(o,t,r,n):x(e,Je(r),t,n)},function(t,o){var i=zt(this),u=Je(t);if(\"string\"==typeof o&&-1===qr(o,r)&&-1===qr(o,\"$<\")){var a=n(e,i,u,o);if(a.done)return a.value}var c=$(o);c||(o=Je(o));var f=i.global;if(f){var s=i.unicode;i.lastIndex=0;}for(var l=[];;){var d=$r(i,u);if(null===d)break;if(Ur(l,d),!f)break;\"\"===Je(d[0])&&(i.lastIndex=kr(u,we(i.lastIndex),s));}for(var p,v=\"\",h=0,y=0;y<l.length;y++){for(var g=Je((d=l[y])[0]),m=Br(Gr(he(d.index),u.length),0),b=[],w=1;w<d.length;w++)Ur(b,void 0===(p=d[w])?p:String(p));var S=d.groups;if(c){var x=Wr([g],b,m,u);void 0!==S&&Ur(x,S);var E=Je(Er(o,void 0,x));}else E=Fr(g,u,m,b,S,o);m>=h&&(v+=Kr(u,h,m)+E,h=m+g.length);}return v+Kr(u,h)}]}),!!b((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")}))||!Xr||Yr);var Qr=m.Promise,Zr=function(t,e,n){for(var r in e)de(t,r,e[r],n);return t},to=m.String,eo=m.TypeError,no=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,n={};try{(t=R(Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set))(n,[]),e=n instanceof Array;}catch(t){}return function(n,r){return zt(n),function(t){if(\"object\"==typeof t||$(t))return t;throw eo(\"Can't set \"+to(t)+\" as a prototype\")}(r),e?t(n,r):n.__proto__=r,n}}():void 0),ro=$t.f,oo=jt(\"toStringTag\"),io=function(t,e,n){t&&!yt(t=n?t:t.prototype,oo)&&ro(t,oo,{configurable:!0,value:e});},uo=jt(\"species\"),ao=m.TypeError,co=function(t,e){if(W(e,t))return t;throw ao(\"Incorrect invocation\")},fo={},so=jt(\"iterator\"),lo=Array.prototype,po=jt(\"iterator\"),vo=function(t){if(null!=t)return ut(t,po)||ut(t,\"@@iterator\")||fo[Xe(t)]},ho=m.TypeError,yo=function(t,e,n){var r,o;zt(t);try{if(!(r=ut(t,\"return\"))){if(\"throw\"===e)throw n;return n}r=x(r,t);}catch(t){o=!0,r=t;}if(\"throw\"===e)throw n;if(o)throw r;return zt(r),n},go=m.TypeError,mo=function(t,e){this.stopped=t,this.result=e;},bo=mo.prototype,wo=function(t,e,n){var r,o,i,u,a,c,f,s,l=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),v=!(!n||!n.INTERRUPTED),h=Tn(e,l),y=function(t){return r&&yo(r,\"normal\",t),new mo(!0,t)},g=function(t){return d?(zt(t),v?h(t[0],t[1],y):h(t[0],t[1])):v?h(t,y):h(t)};if(p)r=t;else {if(!(o=vo(t)))throw go(rt(t)+\" is not iterable\");if(void 0!==(s=o)&&(fo.Array===s||lo[so]===s)){for(i=0,u=Se(t);u>i;i++)if((a=g(t[i]))&&W(bo,a))return a;return new mo(!1)}r=function(t,e){var n=arguments.length<2?vo(t):e;if(it(n))return zt(x(n,t));throw ho(rt(t)+\" is not iterable\")}(t,o);}for(c=r.next;!(f=x(c,r)).done;){try{a=g(f.value);}catch(t){yo(r,\"throw\",t);}if(\"object\"==typeof a&&a&&W(bo,a))return a}return new mo(!1)},So=jt(\"iterator\"),xo=!1;try{var Eo=0,Oo={next:function(){return {done:!!Eo++}},return:function(){xo=!0;}};Oo[So]=function(){return this},Array.from(Oo,(function(){throw 2}));}catch(t){}var jo,Io,Po,To,Mo=function(t,e){if(!e&&!xo)return !1;var n=!1;try{var r={};r[So]=function(){return {next:function(){return {done:n=!0}}}},t(r);}catch(t){}return n},Ao=m.TypeError,Ro=jt(\"species\"),ko=function(t,e){var n,r=zt(t).constructor;return void 0===r||null==(n=zt(r)[Ro])?e:function(t){if(Dn(t))return t;throw Ao(rt(t)+\" is not a constructor\")}(n)},Co=R([].slice),No=/(?:ipad|iphone|ipod).*applewebkit/i.test(U),Lo=\"process\"==N(m.process),Vo=m.setImmediate,Do=m.clearImmediate,zo=m.process,Fo=m.Dispatch,_o=m.Function,$o=m.MessageChannel,Ho=m.String,Bo=0,Go={},Wo=\"onreadystatechange\";try{jo=m.location;}catch(t){}var Uo=function(t){if(yt(Go,t)){var e=Go[t];delete Go[t],e();}},qo=function(t){return function(){Uo(t);}},Ko=function(t){Uo(t.data);},Xo=function(t){m.postMessage(Ho(t),jo.protocol+\"//\"+jo.host);};Vo&&Do||(Vo=function(t){var e=Co(arguments,1);return Go[++Bo]=function(){Er($(t)?t:_o(t),void 0,e);},Io(Bo),Bo},Do=function(t){delete Go[t];},Lo?Io=function(t){zo.nextTick(qo(t));}:Fo&&Fo.now?Io=function(t){Fo.now(qo(t));}:$o&&!No?(To=(Po=new $o).port2,Po.port1.onmessage=Ko,Io=Tn(To.postMessage,To)):m.addEventListener&&$(m.postMessage)&&!m.importScripts&&jo&&\"file:\"!==jo.protocol&&!b(Xo)?(Io=Xo,m.addEventListener(\"message\",Ko,!1)):Io=Wo in kt(\"script\")?function(t){hn.appendChild(kt(\"script\")).onreadystatechange=function(){hn.removeChild(this),Uo(t);};}:function(t){setTimeout(qo(t),0);});var Yo,Jo,Qo,Zo,ti,ei,ni,ri,oi={set:Vo,clear:Do},ii=/ipad|iphone|ipod/i.test(U)&&void 0!==m.Pebble,ui=/web0s(?!.*chrome)/i.test(U),ai=Lt.f,ci=oi.set,fi=m.MutationObserver||m.WebKitMutationObserver,si=m.document,li=m.process,di=m.Promise,pi=ai(m,\"queueMicrotask\"),vi=pi&&pi.value;vi||(Yo=function(){var t,e;for(Lo&&(t=li.domain)&&t.exit();Jo;){e=Jo.fn,Jo=Jo.next;try{e();}catch(t){throw Jo?Zo():Qo=void 0,t}}Qo=void 0,t&&t.enter();},No||Lo||ui||!fi||!si?!ii&&di&&di.resolve?((ni=di.resolve(void 0)).constructor=di,ri=Tn(ni.then,ni),Zo=function(){ri(Yo);}):Lo?Zo=function(){li.nextTick(Yo);}:(ci=Tn(ci,m),Zo=function(){ci(Yo);}):(ti=!0,ei=si.createTextNode(\"\"),new fi(Yo).observe(ei,{characterData:!0}),Zo=function(){ei.data=ti=!ti;}));var hi,yi,gi,mi,bi=vi||function(t){var e={fn:t,next:void 0};Qo&&(Qo.next=e),Jo||(Jo=e,Zo()),Qo=e;},wi=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r;})),this.resolve=it(e),this.reject=it(n);},Si={f:function(t){return new wi(t)}},xi=function(t){try{return {error:!1,value:t()}}catch(t){return {error:!0,value:t}}},Ei=\"object\"==typeof window,Oi=oi.set,ji=jt(\"species\"),Ii=\"Promise\",Pi=ae.getterFor(Ii),Ti=ae.set,Mi=ae.getterFor(Ii),Ai=Qr&&Qr.prototype,Ri=Qr,ki=Ai,Ci=m.TypeError,Ni=m.document,Li=m.process,Vi=Si.f,Di=Vi,zi=!!(Ni&&Ni.createEvent&&m.dispatchEvent),Fi=$(m.PromiseRejectionEvent),_i=\"unhandledrejection\",$i=!1,Hi=_e(Ii,(function(){var t=qt(Ri),e=t!==String(Ri);if(!e&&66===J)return !0;if(J>=51&&/native code/.test(t))return !1;var n=new Ri((function(t){t(1);})),r=function(t){t((function(){}),(function(){}));};return (n.constructor={})[ji]=r,!($i=n.then((function(){}))instanceof r)||!e&&Ei&&!Fi})),Bi=Hi||!Mo((function(t){Ri.all(t).catch((function(){}));})),Gi=function(t){var e;return !(!H(t)||!$(e=t.then))&&e},Wi=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;bi((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var u,a,c,f=n[i++],s=o?f.ok:f.fail,l=f.resolve,d=f.reject,p=f.domain;try{s?(o||(2===t.rejection&&Xi(t),t.rejection=1),!0===s?u=r:(p&&p.enter(),u=s(r),p&&(p.exit(),c=!0)),u===f.promise?d(Ci(\"Promise-chain cycle\")):(a=Gi(u))?x(a,u,l,d):l(u)):d(r);}catch(t){p&&!c&&p.exit(),d(t);}}t.reactions=[],t.notified=!1,e&&!t.rejection&&qi(t);}));}},Ui=function(t,e,n){var r,o;zi?((r=Ni.createEvent(\"Event\")).promise=e,r.reason=n,r.initEvent(t,!1,!0),m.dispatchEvent(r)):r={promise:e,reason:n},!Fi&&(o=m[\"on\"+t])?o(r):t===_i&&function(t,e){var n=m.console;n&&n.error&&(1==arguments.length?n.error(t):n.error(t,e));}(\"Unhandled promise rejection\",n);},qi=function(t){x(Oi,m,(function(){var e,n=t.facade,r=t.value;if(Ki(t)&&(e=xi((function(){Lo?Li.emit(\"unhandledRejection\",r,n):Ui(_i,n,r);})),t.rejection=Lo||Ki(t)?2:1,e.error))throw e.value}));},Ki=function(t){return 1!==t.rejection&&!t.parent},Xi=function(t){x(Oi,m,(function(){var e=t.facade;Lo?Li.emit(\"rejectionHandled\",e):Ui(\"rejectionhandled\",e,t.value);}));},Yi=function(t,e,n){return function(r){t(e,r,n);}},Ji=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,Wi(t,!0));},Qi=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw Ci(\"Promise can't be resolved itself\");var r=Gi(e);r?bi((function(){var n={done:!1};try{x(r,e,Yi(Qi,n,t),Yi(Ji,n,t));}catch(e){Ji(n,e,t);}})):(t.value=e,t.state=1,Wi(t,!1));}catch(e){Ji({done:!1},e,t);}}};if(Hi&&(ki=(Ri=function(t){co(this,ki),it(t),x(hi,this);var e=Pi(this);try{t(Yi(Qi,e),Yi(Ji,e));}catch(t){Ji(e,t);}}).prototype,(hi=function(t){Ti(this,{type:Ii,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0});}).prototype=Zr(ki,{then:function(t,e){var n=Mi(this),r=n.reactions,o=Vi(ko(this,Ri));return o.ok=!$(t)||t,o.fail=$(e)&&e,o.domain=Lo?Li.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&Wi(n,!1),o.promise},catch:function(t){return this.then(void 0,t)}}),yi=function(){var t=new hi,e=Pi(t);this.promise=t,this.resolve=Yi(Qi,e),this.reject=Yi(Ji,e);},Si.f=Vi=function(t){return t===Ri||t===gi?new yi(t):Di(t)},$(Qr)&&Ai!==Object.prototype)){mi=Ai.then,$i||(de(Ai,\"then\",(function(t,e){var n=this;return new Ri((function(t,e){x(mi,n,t,e);})).then(t,e)}),{unsafe:!0}),de(Ai,\"catch\",ki.catch,{unsafe:!0}));try{delete Ai.constructor;}catch(t){}no&&no(Ai,ki);}function Zi(t,n,r){return void 0===r&&(r=\"\"),c(this,void 0,void 0,(function(){var o,i,u,a,c,s,l;return f(this,(function(f){switch(f.label){case 0:return n?(t.restoreSelection(),o=t.getMenuConfig(\"insertVideo\"),i=o.onInsertedVideo,u=o.checkVideo,a=o.parseVideoSrc,[4,u(n,r)]):[2];case 1:return \"string\"==typeof(c=f.sent())?(t.alert(c,\"error\"),[2]):null==c?[2]:[4,a(n)];case 2:return 0!==(s=f.sent()).trim().indexOf(\"<iframe \")&&(s=s.replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")),l={type:\"video\",src:s,poster:r,children:[{text:\"\"}]},Promise.resolve().then((function(){e.Transforms.insertNodes(t,l);})),i(l),[2]}}))}))}function tu(){return Jr(\"w-e-insert-video\")}He({global:!0,wrap:!0,forced:Hi},{Promise:Ri}),io(Ri,Ii,!1),function(t){var e=G(t),n=$t.f;w&&e&&!e[uo]&&n(e,uo,{configurable:!0,get:function(){return this}});}(Ii),gi=G(Ii),He({target:Ii,stat:!0,forced:Hi},{reject:function(t){var e=Vi(this);return x(e.reject,void 0,t),e.promise}}),He({target:Ii,stat:!0,forced:Hi},{resolve:function(t){return function(t,e){if(zt(t),H(e)&&e.constructor===t)return e;var n=Si.f(t);return (0, n.resolve)(e),n.promise}(this,t)}}),He({target:Ii,stat:!0,forced:Bi},{all:function(t){var e=this,n=Vi(e),r=n.resolve,o=n.reject,i=xi((function(){var n=it(e.resolve),i=[],u=0,a=1;wo(t,(function(t){var c=u++,f=!1;a++,x(n,e,t).then((function(t){f||(f=!0,i[c]=t,--a||r(i));}),o);})),--a||r(i);}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=Vi(e),r=n.reject,o=xi((function(){var o=it(e.resolve);wo(t,(function(t){x(o,e,t).then(n.resolve,r);}));}));return o.error&&r(o.value),n.promise}});var eu=function(){function n(){this.title=t.t(\"videoModule.insertVideo\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z\"></path></svg>',this.tag=\"button\",this.showModal=!0,this.modalWidth=320,this.$content=null,this.srcInputId=tu(),this.posterInputId=tu(),this.buttonId=tu();}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.exec=function(t,e){},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||!!t.DomEditor.getSelectedElems(n).some((function(e){var r=t.DomEditor.getNodeType(e);return \"pre\"===r||(\"list-item\"===r||!!n.isVoid(e))})))},n.prototype.getModalPositionNode=function(t){return null},n.prototype.getModalContentElem=function(e){var n=this,r=this,o=r.srcInputId,i=r.posterInputId,a=r.buttonId,s=l(t.genModalInputElems(t.t(\"videoModule.videoSrc\"),o,t.t(\"videoModule.videoSrcPlaceHolder\")),2),d=s[0],p=s[1],v=l(t.genModalInputElems(t.t(\"videoModule.videoPoster\"),i,t.t(\"videoModule.videoPosterPlaceHolder\")),2),h=v[0],y=v[1],g=u.default(p),m=u.default(y),b=l(t.genModalButtonElems(a,t.t(\"videoModule.ok\")),1)[0];if(null==this.$content){var w=u.default(\"<div></div>\");w.on(\"click\",\"#\"+a,(function(t){return c(n,void 0,void 0,(function(){var n,r;return f(this,(function(u){switch(u.label){case 0:return t.preventDefault(),n=w.find(\"#\"+o).val().trim(),r=w.find(\"#\"+i).val().trim(),[4,Zi(e,n,r)];case 1:return u.sent(),e.hidePanelOrModal(),[2]}}))}))})),this.$content=w;}var S=this.$content;return S.empty(),S.append(d),S.append(h),S.append(b),g.val(\"\"),m.val(\"\"),setTimeout((function(){g.focus();})),S[0]},n}(),nu=R([].join),ru=D!=Object,ou=function(t,e){var n=[][t];return !!n&&b((function(){n.call(null,e||function(){throw 1},1);}))}(\"join\",\",\");He({target:\"Array\",proto:!0,forced:ru||!ou},{join:function(t){return nu(_(this),void 0===t?\",\":t)}});var iu,uu,au,cu=!b((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),fu=Jt(\"IE_PROTO\"),su=m.Object,lu=su.prototype,du=cu?su.getPrototypeOf:function(t){var e=vt(t);if(yt(e,fu))return e[fu];var n=e.constructor;return $(n)&&e instanceof n?n.prototype:e instanceof su?lu:null},pu=jt(\"iterator\"),vu=!1;[].keys&&(\"next\"in(au=[].keys())?(uu=du(du(au)))!==Object.prototype&&(iu=uu):vu=!0);var hu=null==iu||b((function(){var t={};return iu[pu].call(t)!==t}));hu&&(iu={}),$(iu[pu])||de(iu,pu,(function(){return this}));var yu={IteratorPrototype:iu,BUGGY_SAFARI_ITERATORS:vu},gu=yu.IteratorPrototype,mu=function(){return this},bu=le.PROPER,wu=le.CONFIGURABLE,Su=yu.IteratorPrototype,xu=yu.BUGGY_SAFARI_ITERATORS,Eu=jt(\"iterator\"),Ou=\"keys\",ju=\"values\",Iu=\"entries\",Pu=function(){return this},Tu=function(t,e,n,r,o,i,u){!function(t,e,n,r){var o=e+\" Iterator\";t.prototype=Sn(gu,{next:I(+!r,n)}),io(t,o,!1),fo[o]=mu;}(n,e,r);var a,c,f,s=function(t){if(t===o&&h)return h;if(!xu&&t in p)return p[t];switch(t){case Ou:case ju:case Iu:return function(){return new n(this,t)}}return function(){return new n(this)}},l=e+\" Iterator\",d=!1,p=t.prototype,v=p[Eu]||p[\"@@iterator\"]||o&&p[o],h=!xu&&v||s(o),y=\"Array\"==e&&p.entries||v;if(y&&(a=du(y.call(new t)))!==Object.prototype&&a.next&&(du(a)!==Su&&(no?no(a,Su):$(a[Eu])||de(a,Eu,Pu)),io(a,l,!0)),bu&&o==ju&&v&&v.name!==ju&&(wu?Ht(p,\"name\",ju):(d=!0,h=function(){return x(v,this)})),o)if(c={values:s(ju),keys:i?h:s(Ou),entries:s(Iu)},u)for(f in c)(xu||d||!(f in p))&&de(p,f,c[f]);else He({target:e,proto:!0,forced:xu||d},c);return p[Eu]!==h&&de(p,Eu,h,{name:o}),fo[e]=h,c},Mu=\"Array Iterator\",Au=ae.set,Ru=ae.getterFor(Mu),ku=Tu(Array,\"Array\",(function(t,e){Au(this,{type:Mu,target:_(t),index:0,kind:e});}),(function(){var t=Ru(this),e=t.target,n=t.kind,r=t.index++;return !e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\");fo.Arguments=fo.Array,On(\"keys\"),On(\"values\"),On(\"entries\");var Cu=Ar.charAt,Nu=\"String Iterator\",Lu=ae.set,Vu=ae.getterFor(Nu);Tu(String,\"String\",(function(t){Lu(this,{type:Nu,string:Je(t),index:0});}),(function(){var t,e=Vu(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=Cu(n,r),e.index+=t.length,{value:t,done:!1})}));var Du=function(t,e,n){var r=Mt(e);r in t?$t.f(t,r,I(0,n)):t[r]=n;},zu=m.Array,Fu=Math.max,_u=Me.f,$u=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Hu=function(t){try{return _u(t)}catch(t){return function(t,e,n){for(var r=Se(t),o=me(e,r),i=me(void 0===n?r:n,r),u=zu(Fu(i-o,0)),a=0;o<i;o++,a++)Du(u,a,t[o]);return u.length=a,u}($u)}},Bu={f:function(t){return $u&&\"Window\"==N(t)?Hu(t):_u(_(t))}},Gu=b((function(){if(\"function\"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,\"a\",{value:8});}})),Wu=Object.isExtensible,Uu=b((function(){Wu(1);}))||Gu?function(t){return !!H(t)&&((!Gu||\"ArrayBuffer\"!=N(t))&&(!Wu||Wu(t)))}:Wu,qu=!b((function(){return Object.isExtensible(Object.preventExtensions({}))})),Ku=v((function(t){var e=$t.f,n=!1,r=wt(\"meta\"),o=0,i=function(t){e(t,r,{value:{objectID:\"O\"+o++,weakData:{}}});},u=t.exports={enable:function(){u.enable=function(){},n=!0;var t=Me.f,e=R([].splice),o={};o[r]=1,t(o).length&&(Me.f=function(n){for(var o=t(n),i=0,u=o.length;i<u;i++)if(o[i]===r){e(o,i,1);break}return o},He({target:\"Object\",stat:!0,forced:!0},{getOwnPropertyNames:Bu.f}));},fastKey:function(t,e){if(!H(t))return \"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!yt(t,r)){if(!Uu(t))return \"F\";if(!e)return \"E\";i(t);}return t[r].objectID},getWeakData:function(t,e){if(!yt(t,r)){if(!Uu(t))return !0;if(!e)return !1;i(t);}return t[r].weakData},onFreeze:function(t){return qu&&n&&Uu(t)&&!yt(t,r)&&i(t),t}};Qt[r]=!0;})),Xu=Ku.getWeakData,Yu=ae.set,Ju=ae.getterFor,Qu=Bn.find,Zu=Bn.findIndex,ta=R([].splice),ea=0,na=function(t){return t.frozen||(t.frozen=new ra)},ra=function(){this.entries=[];},oa=function(t,e){return Qu(t.entries,(function(t){return t[0]===e}))};ra.prototype={get:function(t){var e=oa(this,t);if(e)return e[1]},has:function(t){return !!oa(this,t)},set:function(t,e){var n=oa(this,t);n?n[1]=e:this.entries.push([t,e]);},delete:function(t){var e=Zu(this.entries,(function(e){return e[0]===t}));return ~e&&ta(this.entries,e,1),!!~e}};var ia,ua={getConstructor:function(t,e,n,r){var o=t((function(t,o){co(t,i),Yu(t,{type:e,id:ea++,frozen:void 0}),null!=o&&wo(o,t[r],{that:t,AS_ENTRIES:n});})),i=o.prototype,u=Ju(e),a=function(t,e,n){var r=u(t),o=Xu(zt(e),!0);return !0===o?na(r).set(e,n):o[r.id]=n,t};return Zr(i,{delete:function(t){var e=u(this);if(!H(t))return !1;var n=Xu(t);return !0===n?na(e).delete(t):n&&yt(n,e.id)&&delete n[e.id]},has:function(t){var e=u(this);if(!H(t))return !1;var n=Xu(t);return !0===n?na(e).has(t):n&&yt(n,e.id)}}),Zr(i,n?{get:function(t){var e=u(this);if(H(t)){var n=Xu(t);return !0===n?na(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return a(this,t,e)}}:{add:function(t){return a(this,t,!0)}}),o}},aa=ae.enforce,ca=!m.ActiveXObject&&\"ActiveXObject\"in m,fa=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},sa=function(t,e,n){var r=-1!==t.indexOf(\"Map\"),o=-1!==t.indexOf(\"Weak\"),i=r?\"set\":\"add\",u=m[t],a=u&&u.prototype,c=u,f={},s=function(t){var e=R(a[t]);de(a,t,\"add\"==t?function(t){return e(this,0===t?0:t),this}:\"delete\"==t?function(t){return !(o&&!H(t))&&e(this,0===t?0:t)}:\"get\"==t?function(t){return o&&!H(t)?void 0:e(this,0===t?0:t)}:\"has\"==t?function(t){return !(o&&!H(t))&&e(this,0===t?0:t)}:function(t,n){return e(this,0===t?0:t,n),this});};if(_e(t,!$(u)||!(o||a.forEach&&!b((function(){(new u).entries().next();})))))c=n.getConstructor(e,t,r,i),Ku.enable();else if(_e(t,!0)){var l=new c,d=l[i](o?{}:-0,1)!=l,p=b((function(){l.has(1);})),v=Mo((function(t){new u(t);})),h=!o&&b((function(){for(var t=new u,e=5;e--;)t[i](e,e);return !t.has(-0)}));v||((c=e((function(t,e){co(t,a);var n=function(t,e,n){var r,o;return no&&$(r=e.constructor)&&r!==n&&H(o=r.prototype)&&o!==n.prototype&&no(t,o),t}(new u,t,c);return null!=e&&wo(e,n[i],{that:n,AS_ENTRIES:r}),n}))).prototype=a,a.constructor=c),(p||h)&&(s(\"delete\"),s(\"has\"),r&&s(\"get\")),(h||d)&&s(i),o&&a.clear&&delete a.clear;}return f[t]=c,He({global:!0,forced:c!=u},f),io(c,t),o||n.setStrong(c,t,r),c}(\"WeakMap\",fa,ua);if(Xt&&ca){ia=ua.getConstructor(fa,\"WeakMap\",!0),Ku.enable();var la=sa.prototype,da=R(la.delete),pa=R(la.has),va=R(la.get),ha=R(la.set);Zr(la,{delete:function(t){if(H(t)&&!Uu(t)){var e=aa(this);return e.frozen||(e.frozen=new ia),da(this,t)||e.frozen.delete(t)}return da(this,t)},has:function(t){if(H(t)&&!Uu(t)){var e=aa(this);return e.frozen||(e.frozen=new ia),pa(this,t)||e.frozen.has(t)}return pa(this,t)},get:function(t){if(H(t)&&!Uu(t)){var e=aa(this);return e.frozen||(e.frozen=new ia),pa(this,t)?va(this,t):e.frozen.get(t)}return va(this,t)},set:function(t,e){if(H(t)&&!Uu(t)){var n=aa(this);n.frozen||(n.frozen=new ia),pa(this,t)?ha(this,t,e):n.frozen.set(t,e);}else ha(this,t,e);return this}});}var ya={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},ga=kt(\"span\").classList,ma=ga&&ga.constructor&&ga.constructor.prototype,ba=ma===Object.prototype?void 0:ma,wa=jt(\"iterator\"),Sa=jt(\"toStringTag\"),xa=ku.values,Ea=function(t,e){if(t){if(t[wa]!==xa)try{Ht(t,wa,xa);}catch(e){t[wa]=xa;}if(t[Sa]||Ht(t,Sa,e),ya[e])for(var n in ku)if(t[n]!==ku[n])try{Ht(t,n,ku[n]);}catch(e){t[n]=ku[n];}}};for(var Oa in ya)Ea(m[Oa]&&m[Oa].prototype,Oa);Ea(ba,\"DOMTokenList\");var ja=le.EXISTS,Ia=$t.f,Pa=Function.prototype,Ta=R(Pa.toString),Ma=/function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/,Aa=R(Ma.exec);w&&!ja&&Ia(Pa,\"name\",{configurable:!0,get:function(){try{return Aa(Ma,Ta(this))[1]}catch(t){return \"\"}}});var Ra=jt(\"species\"),ka=function(t){return J>=51||!b((function(){var e=[];return (e.constructor={})[Ra]=function(){return {foo:1}},1!==e[t](Boolean).foo}))}(\"slice\"),Ca=jt(\"species\"),Na=m.Array,La=Math.max;function Va(t){return t.getMenuConfig(\"uploadVideo\")}He({target:\"Array\",proto:!0,forced:!ka},{slice:function(t,e){var n,r,o,i=_(this),u=Se(i),a=me(t,u),c=me(void 0===e?u:e,u);if(Mn(i)&&(n=i.constructor,(Dn(n)&&(n===Na||Mn(n.prototype))||H(n)&&null===(n=n[Ca]))&&(n=void 0),n===Na||void 0===n))return Co(i,a,c);for(r=new(void 0===n?Na:n)(La(c-a,0)),o=0;a<c;a++,o++)a in i&&Du(r,o,i[a]);return r.length=o,r}});var Da=new WeakMap;function za(e,n){return c(this,void 0,void 0,(function(){var r,o,i,u;return f(this,(function(c){switch(c.label){case 0:return r=function(e){var n=Da.get(e);if(null!=n)return n;var r=Va(e),o=r.onSuccess,i=r.onProgress,u=r.onFailed,c=r.customInsert,f=r.onError;return n=t.createUploader(a(a({},r),{onProgress:function(t){e.showProgressBar(t),i&&i(t);},onSuccess:function(t,n){if(c)return c(n,(function(t,n){return Zi(e,t,n)})),void o(t,n);var r=n.errno,i=void 0===r?1:r,a=n.data,f=void 0===a?{}:a;if(0===i){var s=f.url,l=void 0===s?\"\":s,d=f.poster;Zi(e,l,void 0===d?\"\":d),o(t,n);}else u(t,n);},onError:function(t,e,n){f(t,e,n);}})),Da.set(e,n),n}(e),o=n.name,i=n.type,u=n.size,r.addFile({name:o,type:i,size:u,data:n}),[4,r.upload()];case 1:return c.sent(),[2]}}))}))}var Fa=function(){function n(){this.title=t.t(\"videoModule.uploadVideo\"),this.iconSvg='<svg viewBox=\"0 0 1056 1024\"><path d=\"M805.902261 521.819882a251.441452 251.441452 0 0 0-251.011972 246.600033 251.051015 251.051015 0 1 0 502.023944 8.823877 253.237463 253.237463 0 0 0-251.011972-255.42391z m59.463561 240.001647v129.898403h-116.701631v-129.898403h-44.041298l101.279368-103.504859 101.279368 103.504859z\" p-id=\"6802\"></path><path d=\"M788.254507 0.000781H99.094092A98.663439 98.663439 0 0 0 0.001171 99.093701v590.067495a98.663439 98.663439 0 0 0 99.092921 99.092921h411.7549a266.434235 266.434235 0 0 1-2.186448-41.815807 275.843767 275.843767 0 0 1 275.180024-270.729042 270.650955 270.650955 0 0 1 103.504859 19.834201V99.093701A101.51363 101.51363 0 0 0 788.254507 0.000781zM295.054441 640.747004V147.507894l394.146189 246.600033z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.exec=function(t,e){var n=this.getMenuConfig(t),r=n.allowedFileTypes,o=void 0===r?[]:r,i=n.customBrowseAndUpload;if(i)i((function(e,n){return Zi(t,e,n)}));else {var a=\"\";o.length>0&&(a='accept=\"'+o.join(\", \")+'\"');var s=u.default(\"body\"),l=u.default('<input type=\"file\" '+a+\" multiple/>\");l.hide(),s.append(l),l.click(),l.on(\"change\",(function(){var e=l[0].files;!function(t,e){var n,r;c(this,void 0,void 0,(function(){var o,i,u,a,c,s;return f(this,(function(f){switch(f.label){case 0:if(null==e)return [2];o=Array.prototype.slice.call(e),i=Va(t).customUpload,f.label=1;case 1:f.trys.push([1,9,10,15]),u=d(o),f.label=2;case 2:return [4,u.next()];case 3:return (a=f.sent()).done?[3,8]:(c=a.value,i?[4,i(c,(function(e,n){return Zi(t,e,n)}))]:[3,5]);case 4:return f.sent(),[3,7];case 5:return [4,za(t,c)];case 6:f.sent(),f.label=7;case 7:return [3,2];case 8:return [3,15];case 9:return s=f.sent(),n={error:s},[3,15];case 10:return f.trys.push([10,,13,14]),a&&!a.done&&(r=u.return)?[4,r.call(u)]:[3,12];case 11:f.sent(),f.label=12;case 12:return [3,14];case 13:if(n)throw n.error;return [7];case 14:return [7];case 15:return [2]}}))}));}(t,e);}));}},n.prototype.isDisabled=function(n){var r=n.selection;return null==r||(!e.Range.isCollapsed(r)||!!t.DomEditor.getSelectedElems(n).some((function(e){var r=t.DomEditor.getNodeType(e);return \"pre\"===r||(\"list-item\"===r||!!n.isVoid(e))})))},n.prototype.getMenuConfig=function(t){return t.getMenuConfig(\"uploadVideo\")},n}(),_a=le.PROPER,$a=\"toString\",Ha=RegExp.prototype,Ba=Ha.toString,Ga=R(Qn),Wa=b((function(){return \"/a/b\"!=Ba.call({source:\"a\",flags:\"b\"})})),Ua=_a&&Ba.name!=$a;function qa(){return Jr(\"w-e-insert-video\")}(Wa||Ua)&&de(RegExp.prototype,$a,(function(){var t=zt(this),e=Je(t.source),n=t.flags;return \"/\"+e+\"/\"+Je(void 0===n&&W(Ha,t)&&!(\"flags\"in Ha)?Ga(t):n)}),{unsafe:!0});var Ka=function(){function n(){this.title=t.t(\"videoModule.editSize\"),this.tag=\"button\",this.showModal=!0,this.modalWidth=320,this.$content=null,this.widthInputId=qa(),this.heightInputId=qa(),this.buttonId=qa();}return n.prototype.getSelectedVideoNode=function(e){return t.DomEditor.getSelectedNodeByType(e,\"video\")},n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.exec=function(t,e){},n.prototype.isDisabled=function(t){return null==t.selection||null==this.getSelectedVideoNode(t)},n.prototype.getModalPositionNode=function(t){return this.getSelectedVideoNode(t)},n.prototype.getModalContentElem=function(n){var r=this,o=r.widthInputId,i=r.heightInputId,a=r.buttonId,c=l(t.genModalInputElems(t.t(\"videoModule.width\"),o,\"auto\"),2),f=c[0],s=c[1],d=u.default(s),p=l(t.genModalInputElems(t.t(\"videoModule.height\"),i,\"auto\"),2),v=p[0],h=p[1],y=u.default(h),g=l(t.genModalButtonElems(a,t.t(\"videoModule.ok\")),1)[0];if(null==this.$content){var m=u.default(\"<div></div>\");m.on(\"click\",\"#\"+a,(function(r){r.preventDefault();var u=m.find(\"#\"+o).val().trim(),a=m.find(\"#\"+i).val().trim(),c=parseInt(u),f=parseInt(a),s=c?c.toString():\"auto\",l=f?f.toString():\"auto\";n.restoreSelection(),e.Transforms.setNodes(n,{width:s,height:l},{match:function(e){return t.DomEditor.checkNodeType(e,\"video\")}}),n.hidePanelOrModal();})),this.$content=m;}var b=this.$content;b.empty(),b.append(f),b.append(v),b.append(g);var w=this.getSelectedVideoNode(n);if(null==w)return b[0];var S=w.width,x=void 0===S?\"auto\":S,E=w.height,O=void 0===E?\"auto\":E;return d.val(x),y.val(O),setTimeout((function(){d.focus();})),b[0]},n}();var Xa={renderElems:[sn],elemsToHtml:[dn],preParseHtml:[In],parseElemsHtml:[Jn],menus:[{key:\"insertVideo\",factory:function(){return new eu},config:{onInsertedVideo:function(t){},checkVideo:function(t,e){return !0},parseVideoSrc:function(t){return t}}},{key:\"uploadVideo\",factory:function(){return new Fa},config:{server:\"\",fieldName:\"wangeditor-uploaded-video\",maxFileSize:10485760,maxNumberOfFiles:5,allowedFileTypes:[\"video/*\"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:3e4,onBeforeUpload:function(t){return t},onProgress:function(t){},onSuccess:function(t,e){},onFailed:function(t,e){console.error(\"'\"+t.name+\"' upload failed\",e);},onError:function(t,e,n){console.error(\"'\"+t.name+\" upload error\",e,n);}}},{key:\"editVideoSize\",factory:function(){return new Ka}}],editorPlugin:function(n){var r=n.isVoid,o=n.normalizeNode,i=n;return i.isVoid=function(t){return \"video\"===t.type||r(t)},i.normalizeNode=function(n){var r=l(n,2),u=r[0],a=r[1];\"video\"===t.DomEditor.getNodeType(u)&&(t.DomEditor.isLastNode(i,u)&&e.Transforms.insertNodes(i,t.DomEditor.genEmptyParagraph(),{at:[a[0]+1]}));return o([u,a])},i}};return Xa}));\n\n  });\n\n  var dist$1 = createCommonjsModule$1(function (module, exports) {\n  !function(t,e){module.exports=e(dist$6,dist$5,require$$1);}(commonjsGlobal,(function(t,e,n){function r(t){return t&&\"object\"==typeof t&&\"default\"in t?t:{default:t}}var o=r(n);t.i18nAddResources(\"en\",{uploadImgModule:{uploadImage:\"Upload Image\",uploadError:\"{{fileName}} upload error\"}}),t.i18nAddResources(\"zh-CN\",{uploadImgModule:{uploadImage:\"上传图片\",uploadError:\"{{fileName}} 上传出错\"}});var i=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function u(t){var e={exports:{}};return t(e,e.exports),e.exports}var a,c,f=function(t){return t&&t.Math==Math&&t},s=f(\"object\"==typeof globalThis&&globalThis)||f(\"object\"==typeof window&&window)||f(\"object\"==typeof self&&self)||f(\"object\"==typeof i&&i)||function(){return this}()||Function(\"return this\")(),l=function(t){try{return !!t()}catch(t){return !0}},p=!l((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),d=Function.prototype.call,v=d.bind?d.bind(d):function(){return d.apply(d,arguments)},h={}.propertyIsEnumerable,y=Object.getOwnPropertyDescriptor,g={f:y&&!h.call({1:2},1)?function(t){var e=y(this,t);return !!e&&e.enumerable}:h},m=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},b=Function.prototype,w=b.bind,x=b.call,S=w&&w.bind(x),O=w?function(t){return t&&S(x,t)}:function(t){return t&&function(){return x.apply(t,arguments)}},E=O({}.toString),j=O(\"\".slice),I=function(t){return j(E(t),8,-1)},T=s.Object,A=O(\"\".split),P=l((function(){return !T(\"z\").propertyIsEnumerable(0)}))?function(t){return \"String\"==I(t)?A(t,\"\"):T(t)}:T,R=s.TypeError,M=function(t){if(null==t)throw R(\"Can't call method on \"+t);return t},k=function(t){return P(M(t))},L=function(t){return \"function\"==typeof t},F=function(t){return \"object\"==typeof t?null!==t:L(t)},C=function(t){return L(t)?t:void 0},N=function(t,e){return arguments.length<2?C(s[t]):s[t]&&s[t][e]},z=O({}.isPrototypeOf),_=N(\"navigator\",\"userAgent\")||\"\",D=s.process,U=s.Deno,G=D&&D.versions||U&&U.version,B=G&&G.v8;B&&(c=(a=B.split(\".\"))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!c&&_&&(!(a=_.match(/Edge\\/(\\d+)/))||a[1]>=74)&&(a=_.match(/Chrome\\/(\\d+)/))&&(c=+a[1]);var W=c,V=!!Object.getOwnPropertySymbols&&!l((function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&W&&W<41})),H=V&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,q=s.Object,K=H?function(t){return \"symbol\"==typeof t}:function(t){var e=N(\"Symbol\");return L(e)&&z(e.prototype,q(t))},Y=s.String,X=function(t){try{return Y(t)}catch(t){return \"Object\"}},$=s.TypeError,J=function(t){if(L(t))return t;throw $(X(t)+\" is not a function\")},Q=function(t,e){var n=t[e];return null==n?void 0:J(n)},Z=s.TypeError,tt=Object.defineProperty,et=function(t,e){try{tt(s,t,{value:e,configurable:!0,writable:!0});}catch(n){s[t]=e;}return e},nt=\"__core-js_shared__\",rt=s[nt]||et(nt,{}),ot=u((function(t){(t.exports=function(t,e){return rt[t]||(rt[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),it=s.Object,ut=function(t){return it(M(t))},at=O({}.hasOwnProperty),ct=Object.hasOwn||function(t,e){return at(ut(t),e)},ft=0,st=Math.random(),lt=O(1..toString),pt=function(t){return \"Symbol(\"+(void 0===t?\"\":t)+\")_\"+lt(++ft+st,36)},dt=ot(\"wks\"),vt=s.Symbol,ht=vt&&vt.for,yt=H?vt:vt&&vt.withoutSetter||pt,gt=function(t){if(!ct(dt,t)||!V&&\"string\"!=typeof dt[t]){var e=\"Symbol.\"+t;V&&ct(vt,t)?dt[t]=vt[t]:dt[t]=H&&ht?ht(e):yt(e);}return dt[t]},mt=s.TypeError,bt=gt(\"toPrimitive\"),wt=function(t,e){if(!F(t)||K(t))return t;var n,r=Q(t,bt);if(r){if(void 0===e&&(e=\"default\"),n=v(r,t,e),!F(n)||K(n))return n;throw mt(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var n,r;if(\"string\"===e&&L(n=t.toString)&&!F(r=v(n,t)))return r;if(L(n=t.valueOf)&&!F(r=v(n,t)))return r;if(\"string\"!==e&&L(n=t.toString)&&!F(r=v(n,t)))return r;throw Z(\"Can't convert object to primitive value\")}(t,e)},xt=function(t){var e=wt(t,\"string\");return K(e)?e:e+\"\"},St=s.document,Ot=F(St)&&F(St.createElement),Et=function(t){return Ot?St.createElement(t):{}},jt=!p&&!l((function(){return 7!=Object.defineProperty(Et(\"div\"),\"a\",{get:function(){return 7}}).a})),It=Object.getOwnPropertyDescriptor,Tt={f:p?It:function(t,e){if(t=k(t),e=xt(e),jt)try{return It(t,e)}catch(t){}if(ct(t,e))return m(!v(g.f,t,e),t[e])}},At=s.String,Pt=s.TypeError,Rt=function(t){if(F(t))return t;throw Pt(At(t)+\" is not an object\")},Mt=s.TypeError,kt=Object.defineProperty,Lt={f:p?kt:function(t,e,n){if(Rt(t),e=xt(e),Rt(n),jt)try{return kt(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw Mt(\"Accessors not supported\");return \"value\"in n&&(t[e]=n.value),t}},Ft=p?function(t,e,n){return Lt.f(t,e,m(1,n))}:function(t,e,n){return t[e]=n,t},Ct=O(Function.toString);L(rt.inspectSource)||(rt.inspectSource=function(t){return Ct(t)});var Nt,zt,_t,Dt=rt.inspectSource,Ut=s.WeakMap,Gt=L(Ut)&&/native code/.test(Dt(Ut)),Bt=ot(\"keys\"),Wt=function(t){return Bt[t]||(Bt[t]=pt(t))},Vt={},Ht=\"Object already initialized\",qt=s.TypeError,Kt=s.WeakMap;if(Gt||rt.state){var Yt=rt.state||(rt.state=new Kt),Xt=O(Yt.get),$t=O(Yt.has),Jt=O(Yt.set);Nt=function(t,e){if($t(Yt,t))throw new qt(Ht);return e.facade=t,Jt(Yt,t,e),e},zt=function(t){return Xt(Yt,t)||{}},_t=function(t){return $t(Yt,t)};}else {var Qt=Wt(\"state\");Vt[Qt]=!0,Nt=function(t,e){if(ct(t,Qt))throw new qt(Ht);return e.facade=t,Ft(t,Qt,e),e},zt=function(t){return ct(t,Qt)?t[Qt]:{}},_t=function(t){return ct(t,Qt)};}var Zt={set:Nt,get:zt,has:_t,enforce:function(t){return _t(t)?zt(t):Nt(t,{})},getterFor:function(t){return function(e){var n;if(!F(e)||(n=zt(e)).type!==t)throw qt(\"Incompatible receiver, \"+t+\" required\");return n}}},te=Function.prototype,ee=p&&Object.getOwnPropertyDescriptor,ne=ct(te,\"name\"),re={EXISTS:ne,PROPER:ne&&\"something\"===function(){}.name,CONFIGURABLE:ne&&(!p||p&&ee(te,\"name\").configurable)},oe=u((function(t){var e=re.CONFIGURABLE,n=Zt.get,r=Zt.enforce,o=String(String).split(\"String\");(t.exports=function(t,n,i,u){var a,c=!!u&&!!u.unsafe,f=!!u&&!!u.enumerable,l=!!u&&!!u.noTargetGet,p=u&&void 0!==u.name?u.name:n;L(i)&&(\"Symbol(\"===String(p).slice(0,7)&&(p=\"[\"+String(p).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!ct(i,\"name\")||e&&i.name!==p)&&Ft(i,\"name\",p),(a=r(i)).source||(a.source=o.join(\"string\"==typeof p?p:\"\"))),t!==s?(c?!l&&t[n]&&(f=!0):delete t[n],f?t[n]=i:Ft(t,n,i)):f?t[n]=i:et(n,i);})(Function.prototype,\"toString\",(function(){return L(this)&&n(this).source||Dt(this)}));})),ie=Math.ceil,ue=Math.floor,ae=function(t){var e=+t;return e!=e||0===e?0:(e>0?ue:ie)(e)},ce=Math.max,fe=Math.min,se=function(t,e){var n=ae(t);return n<0?ce(n+e,0):fe(n,e)},le=Math.min,pe=function(t){return t>0?le(ae(t),9007199254740991):0},de=function(t){return pe(t.length)},ve=function(t){return function(e,n,r){var o,i=k(e),u=de(i),a=se(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return !0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return !t&&-1}},he={includes:ve(!0),indexOf:ve(!1)}.indexOf,ye=O([].push),ge=function(t,e){var n,r=k(t),o=0,i=[];for(n in r)!ct(Vt,n)&&ct(r,n)&&ye(i,n);for(;e.length>o;)ct(r,n=e[o++])&&(~he(i,n)||ye(i,n));return i},me=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],be=me.concat(\"length\",\"prototype\"),we={f:Object.getOwnPropertyNames||function(t){return ge(t,be)}},xe={f:Object.getOwnPropertySymbols},Se=O([].concat),Oe=N(\"Reflect\",\"ownKeys\")||function(t){var e=we.f(Rt(t)),n=xe.f;return n?Se(e,n(t)):e},Ee=function(t,e){for(var n=Oe(e),r=Lt.f,o=Tt.f,i=0;i<n.length;i++){var u=n[i];ct(t,u)||r(t,u,o(e,u));}},je=/#|\\.prototype\\./,Ie=function(t,e){var n=Ae[Te(t)];return n==Re||n!=Pe&&(L(e)?l(e):!!e)},Te=Ie.normalize=function(t){return String(t).replace(je,\".\").toLowerCase()},Ae=Ie.data={},Pe=Ie.NATIVE=\"N\",Re=Ie.POLYFILL=\"P\",Me=Ie,ke=Tt.f,Le=function(t,e){var n,r,o,i,u,a=t.target,c=t.global,f=t.stat;if(n=c?s:f?s[a]||et(a,{}):(s[a]||{}).prototype)for(r in e){if(i=e[r],o=t.noTargetGet?(u=ke(n,r))&&u.value:n[r],!Me(c?r:a+(f?\".\":\"#\")+r,t.forced)&&void 0!==o){if(typeof i==typeof o)continue;Ee(i,o);}(t.sham||o&&o.sham)&&Ft(i,\"sham\",!0),oe(n,r,i,t);}},Fe=Array.isArray||function(t){return \"Array\"==I(t)},Ce={};Ce[gt(\"toStringTag\")]=\"z\";var Ne,ze=\"[object z]\"===String(Ce),_e=gt(\"toStringTag\"),De=s.Object,Ue=\"Arguments\"==I(function(){return arguments}()),Ge=ze?I:function(t){var e,n,r;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=De(t),_e))?n:Ue?I(e):\"Object\"==(r=I(e))&&L(e.callee)?\"Arguments\":r},Be=function(){},We=[],Ve=N(\"Reflect\",\"construct\"),He=/^\\s*(?:class|function)\\b/,qe=O(He.exec),Ke=!He.exec(Be),Ye=function(t){if(!L(t))return !1;try{return Ve(Be,We,t),!0}catch(t){return !1}},Xe=!Ve||l((function(){var t;return Ye(Ye.call)||!Ye(Object)||!Ye((function(){t=!0;}))||t}))?function(t){if(!L(t))return !1;switch(Ge(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Ke||!!qe(He,Dt(t))}:Ye,$e=function(t,e,n){var r=xt(e);r in t?Lt.f(t,r,m(0,n)):t[r]=n;},Je=gt(\"species\"),Qe=O([].slice),Ze=(Ne=\"slice\",W>=51||!l((function(){var t=[];return (t.constructor={})[Je]=function(){return {foo:1}},1!==t[Ne](Boolean).foo}))),tn=gt(\"species\"),en=s.Array,nn=Math.max;Le({target:\"Array\",proto:!0,forced:!Ze},{slice:function(t,e){var n,r,o,i=k(this),u=de(i),a=se(t,u),c=se(void 0===e?u:e,u);if(Fe(i)&&(n=i.constructor,(Xe(n)&&(n===en||Fe(n.prototype))||F(n)&&null===(n=n[tn]))&&(n=void 0),n===en||void 0===n))return Qe(i,a,c);for(r=new(void 0===n?en:n)(nn(c-a,0)),o=0;a<c;a++,o++)a in i&&$e(r,o,i[a]);return r.length=o,r}});var rn=ze?{}.toString:function(){return \"[object \"+Ge(this)+\"]\"};ze||oe(Object.prototype,\"toString\",rn,{unsafe:!0});var on,un=s.String,an=function(t){if(\"Symbol\"===Ge(t))throw TypeError(\"Cannot convert a Symbol value to a string\");return un(t)},cn=function(){var t=Rt(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e},fn=s.RegExp,sn=l((function(){var t=fn(\"a\",\"y\");return t.lastIndex=2,null!=t.exec(\"abcd\")})),ln=sn||l((function(){return !fn(\"a\",\"y\").sticky})),pn={BROKEN_CARET:sn||l((function(){var t=fn(\"^r\",\"gy\");return t.lastIndex=2,null!=t.exec(\"str\")})),MISSED_STICKY:ln,UNSUPPORTED_Y:sn},dn=Object.keys||function(t){return ge(t,me)},vn=p?Object.defineProperties:function(t,e){Rt(t);for(var n,r=k(e),o=dn(e),i=o.length,u=0;i>u;)Lt.f(t,n=o[u++],r[n]);return t},hn=N(\"document\",\"documentElement\"),yn=Wt(\"IE_PROTO\"),gn=function(){},mn=function(t){return \"<script>\"+t+\"</\"+\"script>\"},bn=function(t){t.write(mn(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},wn=function(){try{on=new ActiveXObject(\"htmlfile\");}catch(t){}var t,e;wn=\"undefined\"!=typeof document?document.domain&&on?bn(on):((e=Et(\"iframe\")).style.display=\"none\",hn.appendChild(e),e.src=String(\"javascript:\"),(t=e.contentWindow.document).open(),t.write(mn(\"document.F=Object\")),t.close(),t.F):bn(on);for(var n=me.length;n--;)delete wn.prototype[me[n]];return wn()};Vt[yn]=!0;var xn,Sn,On=Object.create||function(t,e){var n;return null!==t?(gn.prototype=Rt(t),n=new gn,gn.prototype=null,n[yn]=t):n=wn(),void 0===e?n:vn(n,e)},En=s.RegExp,jn=l((function(){var t=En(\".\",\"s\");return !(t.dotAll&&t.exec(\"\\n\")&&\"s\"===t.flags)})),In=s.RegExp,Tn=l((function(){var t=In(\"(?<a>b)\",\"g\");return \"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")})),An=Zt.get,Pn=ot(\"native-string-replace\",String.prototype.replace),Rn=RegExp.prototype.exec,Mn=Rn,kn=O(\"\".charAt),Ln=O(\"\".indexOf),Fn=O(\"\".replace),Cn=O(\"\".slice),Nn=(Sn=/b*/g,v(Rn,xn=/a/,\"a\"),v(Rn,Sn,\"a\"),0!==xn.lastIndex||0!==Sn.lastIndex),zn=pn.BROKEN_CARET,_n=void 0!==/()??/.exec(\"\")[1];(Nn||_n||zn||jn||Tn)&&(Mn=function(t){var e,n,r,o,i,u,a,c=this,f=An(c),s=an(t),l=f.raw;if(l)return l.lastIndex=c.lastIndex,e=v(Mn,l,s),c.lastIndex=l.lastIndex,e;var p=f.groups,d=zn&&c.sticky,h=v(cn,c),y=c.source,g=0,m=s;if(d&&(h=Fn(h,\"y\",\"\"),-1===Ln(h,\"g\")&&(h+=\"g\"),m=Cn(s,c.lastIndex),c.lastIndex>0&&(!c.multiline||c.multiline&&\"\\n\"!==kn(s,c.lastIndex-1))&&(y=\"(?: \"+y+\")\",m=\" \"+m,g++),n=new RegExp(\"^(?:\"+y+\")\",h)),_n&&(n=new RegExp(\"^\"+y+\"$(?!\\\\s)\",h)),Nn&&(r=c.lastIndex),o=v(Rn,d?n:c,m),d?o?(o.input=Cn(o.input,g),o[0]=Cn(o[0],g),o.index=c.lastIndex,c.lastIndex+=o[0].length):c.lastIndex=0:Nn&&o&&(c.lastIndex=c.global?o.index+o[0].length:r),_n&&o&&o.length>1&&v(Pn,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0);})),o&&p)for(o.groups=u=On(null),i=0;i<p.length;i++)u[(a=p[i])[0]]=o[a[1]];return o});var Dn=Mn;Le({target:\"RegExp\",proto:!0,forced:/./.exec!==Dn},{exec:Dn});var Un=Function.prototype,Gn=Un.apply,Bn=Un.bind,Wn=Un.call,Vn=\"object\"==typeof Reflect&&Reflect.apply||(Bn?Wn.bind(Gn):function(){return Wn.apply(Gn,arguments)}),Hn=gt(\"species\"),qn=RegExp.prototype,Kn=gt(\"match\"),Yn=s.TypeError,Xn=gt(\"species\"),$n=function(t,e){var n,r=Rt(t).constructor;return void 0===r||null==(n=Rt(r)[Xn])?e:function(t){if(Xe(t))return t;throw Yn(X(t)+\" is not a constructor\")}(n)},Jn=O(\"\".charAt),Qn=O(\"\".charCodeAt),Zn=O(\"\".slice),tr=function(t){return function(e,n){var r,o,i=an(M(e)),u=ae(n),a=i.length;return u<0||u>=a?t?\"\":void 0:(r=Qn(i,u))<55296||r>56319||u+1===a||(o=Qn(i,u+1))<56320||o>57343?t?Jn(i,u):r:t?Zn(i,u,u+2):o-56320+(r-55296<<10)+65536}},er={codeAt:tr(!1),charAt:tr(!0)},nr=er.charAt,rr=function(t,e,n){return e+(n?nr(t,e).length:1)},or=s.Array,ir=Math.max,ur=function(t,e,n){for(var r=de(t),o=se(e,r),i=se(void 0===n?r:n,r),u=or(ir(i-o,0)),a=0;o<i;o++,a++)$e(u,a,t[o]);return u.length=a,u},ar=s.TypeError,cr=function(t,e){var n=t.exec;if(L(n)){var r=v(n,t,e);return null!==r&&Rt(r),r}if(\"RegExp\"===I(t))return v(Dn,t,e);throw ar(\"RegExp#exec called on incompatible receiver\")},fr=pn.UNSUPPORTED_Y,sr=4294967295,lr=Math.min,pr=[].push,dr=O(/./.exec),vr=O(pr),hr=O(\"\".slice),yr=!l((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n=\"ab\".split(t);return 2!==n.length||\"a\"!==n[0]||\"b\"!==n[1]}));!function(t,e,n,r){var o=gt(t),i=!l((function(){var e={};return e[o]=function(){return 7},7!=\"\"[t](e)})),u=i&&!l((function(){var e=!1,n=/a/;return \"split\"===t&&((n={}).constructor={},n.constructor[Hn]=function(){return n},n.flags=\"\",n[o]=/./[o]),n.exec=function(){return e=!0,null},n[o](\"\"),!e}));if(!i||!u||n){var a=O(/./[o]),c=e(o,\"\"[t],(function(t,e,n,r,o){var u=O(t),c=e.exec;return c===Dn||c===qn.exec?i&&!o?{done:!0,value:a(e,n,r)}:{done:!0,value:u(n,e,r)}:{done:!1}}));oe(String.prototype,t,c[0]),oe(qn,o,c[1]);}r&&Ft(qn[o],\"sham\",!0);}(\"split\",(function(t,e,n){var r;return r=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(t,n){var r,o,i=an(M(this)),u=void 0===n?sr:n>>>0;if(0===u)return [];if(void 0===t)return [i];if(!F(r=t)||!(void 0!==(o=r[Kn])?o:\"RegExp\"==I(r)))return v(e,i,t,u);for(var a,c,f,s=[],l=(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.unicode?\"u\":\"\")+(t.sticky?\"y\":\"\"),p=0,d=new RegExp(t.source,l+\"g\");(a=v(Dn,d,i))&&!((c=d.lastIndex)>p&&(vr(s,hr(i,p,a.index)),a.length>1&&a.index<i.length&&Vn(pr,s,ur(a,1)),f=a[0].length,p=c,s.length>=u));)d.lastIndex===a.index&&d.lastIndex++;return p===i.length?!f&&dr(d,\"\")||vr(s,\"\"):vr(s,hr(i,p)),s.length>u?ur(s,0,u):s}:\"0\".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:v(e,this,t,n)}:e,[function(e,n){var o=M(this),i=null==e?void 0:Q(e,t);return i?v(i,e,o,n):v(r,an(o),e,n)},function(t,o){var i=Rt(this),u=an(t),a=n(r,i,u,o,r!==e);if(a.done)return a.value;var c=$n(i,RegExp),f=i.unicode,s=(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(fr?\"g\":\"y\"),l=new c(fr?\"^(?:\"+i.source+\")\":i,s),p=void 0===o?sr:o>>>0;if(0===p)return [];if(0===u.length)return null===cr(l,u)?[u]:[];for(var d=0,v=0,h=[];v<u.length;){l.lastIndex=fr?0:v;var y,g=cr(l,fr?hr(u,v):u);if(null===g||(y=lr(pe(l.lastIndex+(fr?v:0)),u.length))===d)v=rr(u,v,f);else {if(vr(h,hr(u,d,v)),h.length===p)return h;for(var m=1;m<=g.length-1;m++)if(vr(h,g[m]),h.length===p)return h;v=d=y;}}return vr(h,hr(u,d)),h}]}),!yr,fr);\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n  var gr=function(){return gr=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},gr.apply(this,arguments)};function mr(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t));}catch(t){i(t);}}function a(t){try{c(r.throw(t));}catch(t){i(t);}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e);}))).then(u,a);}c((r=r.apply(t,e||[])).next());}))}function br(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u);}catch(t){i=[6,t],r=0;}finally{n=o=0;}if(5&i[0])throw i[1];return {value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function wr(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return {next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}function xr(t){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=wr(t),e={},r(\"next\"),r(\"throw\"),r(\"return\"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n});}),e);})(r,o,(e=t[n](e)).done,e.value);}))};}}var Sr=gt(\"unscopables\"),Or=Array.prototype;null==Or[Sr]&&Lt.f(Or,Sr,{configurable:!0,value:On(null)});var Er,jr,Ir,Tr=function(t){Or[Sr][t]=!0;},Ar={},Pr=!l((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})),Rr=Wt(\"IE_PROTO\"),Mr=s.Object,kr=Mr.prototype,Lr=Pr?Mr.getPrototypeOf:function(t){var e=ut(t);if(ct(e,Rr))return e[Rr];var n=e.constructor;return L(n)&&e instanceof n?n.prototype:e instanceof Mr?kr:null},Fr=gt(\"iterator\"),Cr=!1;[].keys&&(\"next\"in(Ir=[].keys())?(jr=Lr(Lr(Ir)))!==Object.prototype&&(Er=jr):Cr=!0);var Nr=null==Er||l((function(){var t={};return Er[Fr].call(t)!==t}));Nr&&(Er={}),L(Er[Fr])||oe(Er,Fr,(function(){return this}));var zr={IteratorPrototype:Er,BUGGY_SAFARI_ITERATORS:Cr},_r=Lt.f,Dr=gt(\"toStringTag\"),Ur=function(t,e,n){t&&!ct(t=n?t:t.prototype,Dr)&&_r(t,Dr,{configurable:!0,value:e});},Gr=zr.IteratorPrototype,Br=function(){return this},Wr=s.String,Vr=s.TypeError,Hr=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,n={};try{(t=O(Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\").set))(n,[]),e=n instanceof Array;}catch(t){}return function(n,r){return Rt(n),function(t){if(\"object\"==typeof t||L(t))return t;throw Vr(\"Can't set \"+Wr(t)+\" as a prototype\")}(r),e?t(n,r):n.__proto__=r,n}}():void 0),qr=re.PROPER,Kr=re.CONFIGURABLE,Yr=zr.IteratorPrototype,Xr=zr.BUGGY_SAFARI_ITERATORS,$r=gt(\"iterator\"),Jr=\"keys\",Qr=\"values\",Zr=\"entries\",to=function(){return this},eo=function(t,e,n,r,o,i,u){!function(t,e,n,r){var o=e+\" Iterator\";t.prototype=On(Gr,{next:m(+!r,n)}),Ur(t,o,!1),Ar[o]=Br;}(n,e,r);var a,c,f,s=function(t){if(t===o&&y)return y;if(!Xr&&t in d)return d[t];switch(t){case Jr:case Qr:case Zr:return function(){return new n(this,t)}}return function(){return new n(this)}},l=e+\" Iterator\",p=!1,d=t.prototype,h=d[$r]||d[\"@@iterator\"]||o&&d[o],y=!Xr&&h||s(o),g=\"Array\"==e&&d.entries||h;if(g&&(a=Lr(g.call(new t)))!==Object.prototype&&a.next&&(Lr(a)!==Yr&&(Hr?Hr(a,Yr):L(a[$r])||oe(a,$r,to)),Ur(a,l,!0)),qr&&o==Qr&&h&&h.name!==Qr&&(Kr?Ft(d,\"name\",Qr):(p=!0,y=function(){return v(h,this)})),o)if(c={values:s(Qr),keys:i?y:s(Jr),entries:s(Zr)},u)for(f in c)(Xr||p||!(f in d))&&oe(d,f,c[f]);else Le({target:e,proto:!0,forced:Xr||p},c);return d[$r]!==y&&oe(d,$r,y,{name:o}),Ar[e]=y,c},no=\"Array Iterator\",ro=Zt.set,oo=Zt.getterFor(no),io=eo(Array,\"Array\",(function(t,e){ro(this,{type:no,target:k(t),index:0,kind:e});}),(function(){var t=oo(this),e=t.target,n=t.kind,r=t.index++;return !e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):\"keys\"==n?{value:r,done:!1}:\"values\"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),\"values\");Ar.Arguments=Ar.Array,Tr(\"keys\"),Tr(\"values\"),Tr(\"entries\");var uo=er.charAt,ao=\"String Iterator\",co=Zt.set,fo=Zt.getterFor(ao);eo(String,\"String\",(function(t){co(this,{type:ao,string:an(t),index:0});}),(function(){var t,e=fo(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=uo(n,r),e.index+=t.length,{value:t,done:!1})}));var so=function(t,e,n){for(var r in e)oe(t,r,e[r],n);return t},lo=we.f,po=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],vo={f:function(t){return po&&\"Window\"==I(t)?function(t){try{return lo(t)}catch(t){return ur(po)}}(t):lo(k(t))}},ho=l((function(){if(\"function\"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,\"a\",{value:8});}})),yo=Object.isExtensible,go=l((function(){yo(1);}))||ho?function(t){return !!F(t)&&((!ho||\"ArrayBuffer\"!=I(t))&&(!yo||yo(t)))}:yo,mo=!l((function(){return Object.isExtensible(Object.preventExtensions({}))})),bo=u((function(t){var e=Lt.f,n=!1,r=pt(\"meta\"),o=0,i=function(t){e(t,r,{value:{objectID:\"O\"+o++,weakData:{}}});},u=t.exports={enable:function(){u.enable=function(){},n=!0;var t=we.f,e=O([].splice),o={};o[r]=1,t(o).length&&(we.f=function(n){for(var o=t(n),i=0,u=o.length;i<u;i++)if(o[i]===r){e(o,i,1);break}return o},Le({target:\"Object\",stat:!0,forced:!0},{getOwnPropertyNames:vo.f}));},fastKey:function(t,e){if(!F(t))return \"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!ct(t,r)){if(!go(t))return \"F\";if(!e)return \"E\";i(t);}return t[r].objectID},getWeakData:function(t,e){if(!ct(t,r)){if(!go(t))return !0;if(!e)return !1;i(t);}return t[r].weakData},onFreeze:function(t){return mo&&n&&go(t)&&!ct(t,r)&&i(t),t}};Vt[r]=!0;})),wo=O(O.bind),xo=function(t,e){return J(t),void 0===e?t:wo?wo(t,e):function(){return t.apply(e,arguments)}},So=gt(\"iterator\"),Oo=Array.prototype,Eo=gt(\"iterator\"),jo=function(t){if(null!=t)return Q(t,Eo)||Q(t,\"@@iterator\")||Ar[Ge(t)]},Io=s.TypeError,To=function(t,e,n){var r,o;Rt(t);try{if(!(r=Q(t,\"return\"))){if(\"throw\"===e)throw n;return n}r=v(r,t);}catch(t){o=!0,r=t;}if(\"throw\"===e)throw n;if(o)throw r;return Rt(r),n},Ao=s.TypeError,Po=function(t,e){this.stopped=t,this.result=e;},Ro=Po.prototype,Mo=function(t,e,n){var r,o,i,u,a,c,f,s,l=n&&n.that,p=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),y=xo(e,l),g=function(t){return r&&To(r,\"normal\",t),new Po(!0,t)},m=function(t){return p?(Rt(t),h?y(t[0],t[1],g):y(t[0],t[1])):h?y(t,g):y(t)};if(d)r=t;else {if(!(o=jo(t)))throw Ao(X(t)+\" is not iterable\");if(void 0!==(s=o)&&(Ar.Array===s||Oo[So]===s)){for(i=0,u=de(t);u>i;i++)if((a=m(t[i]))&&z(Ro,a))return a;return new Po(!1)}r=function(t,e){var n=arguments.length<2?jo(t):e;if(J(n))return Rt(v(n,t));throw Io(X(t)+\" is not iterable\")}(t,o);}for(c=r.next;!(f=v(c,r)).done;){try{a=m(f.value);}catch(t){To(r,\"throw\",t);}if(\"object\"==typeof a&&a&&z(Ro,a))return a}return new Po(!1)},ko=s.TypeError,Lo=function(t,e){if(z(e,t))return t;throw ko(\"Incorrect invocation\")},Fo=gt(\"iterator\"),Co=!1;try{var No=0,zo={next:function(){return {done:!!No++}},return:function(){Co=!0;}};zo[Fo]=function(){return this},Array.from(zo,(function(){throw 2}));}catch(t){}var _o=function(t,e){if(!e&&!Co)return !1;var n=!1;try{var r={};r[Fo]=function(){return {next:function(){return {done:n=!0}}}},t(r);}catch(t){}return n},Do=gt(\"species\"),Uo=s.Array,Go=function(t,e){return new(function(t){var e;return Fe(t)&&(e=t.constructor,(Xe(e)&&(e===Uo||Fe(e.prototype))||F(e)&&null===(e=e[Do]))&&(e=void 0)),void 0===e?Uo:e}(t))(0===e?0:e)},Bo=O([].push),Wo=function(t){var e=1==t,n=2==t,r=3==t,o=4==t,i=6==t,u=7==t,a=5==t||i;return function(c,f,s,l){for(var p,d,v=ut(c),h=P(v),y=xo(f,s),g=de(h),m=0,b=l||Go,w=e?b(c,g):n||u?b(c,0):void 0;g>m;m++)if((a||m in h)&&(d=y(p=h[m],m,v),t))if(e)w[m]=d;else if(d)switch(t){case 3:return !0;case 5:return p;case 6:return m;case 2:Bo(w,p);}else switch(t){case 4:return !1;case 7:Bo(w,p);}return i?-1:r||o?o:w}},Vo={forEach:Wo(0),map:Wo(1),filter:Wo(2),some:Wo(3),every:Wo(4),find:Wo(5),findIndex:Wo(6),filterReject:Wo(7)},Ho=bo.getWeakData,qo=Zt.set,Ko=Zt.getterFor,Yo=Vo.find,Xo=Vo.findIndex,$o=O([].splice),Jo=0,Qo=function(t){return t.frozen||(t.frozen=new Zo)},Zo=function(){this.entries=[];},ti=function(t,e){return Yo(t.entries,(function(t){return t[0]===e}))};Zo.prototype={get:function(t){var e=ti(this,t);if(e)return e[1]},has:function(t){return !!ti(this,t)},set:function(t,e){var n=ti(this,t);n?n[1]=e:this.entries.push([t,e]);},delete:function(t){var e=Xo(this.entries,(function(e){return e[0]===t}));return ~e&&$o(this.entries,e,1),!!~e}};var ei,ni={getConstructor:function(t,e,n,r){var o=t((function(t,o){Lo(t,i),qo(t,{type:e,id:Jo++,frozen:void 0}),null!=o&&Mo(o,t[r],{that:t,AS_ENTRIES:n});})),i=o.prototype,u=Ko(e),a=function(t,e,n){var r=u(t),o=Ho(Rt(e),!0);return !0===o?Qo(r).set(e,n):o[r.id]=n,t};return so(i,{delete:function(t){var e=u(this);if(!F(t))return !1;var n=Ho(t);return !0===n?Qo(e).delete(t):n&&ct(n,e.id)&&delete n[e.id]},has:function(t){var e=u(this);if(!F(t))return !1;var n=Ho(t);return !0===n?Qo(e).has(t):n&&ct(n,e.id)}}),so(i,n?{get:function(t){var e=u(this);if(F(t)){var n=Ho(t);return !0===n?Qo(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return a(this,t,e)}}:{add:function(t){return a(this,t,!0)}}),o}},ri=Zt.enforce,oi=!s.ActiveXObject&&\"ActiveXObject\"in s,ii=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},ui=function(t,e,n){var r=-1!==t.indexOf(\"Map\"),o=-1!==t.indexOf(\"Weak\"),i=r?\"set\":\"add\",u=s[t],a=u&&u.prototype,c=u,f={},p=function(t){var e=O(a[t]);oe(a,t,\"add\"==t?function(t){return e(this,0===t?0:t),this}:\"delete\"==t?function(t){return !(o&&!F(t))&&e(this,0===t?0:t)}:\"get\"==t?function(t){return o&&!F(t)?void 0:e(this,0===t?0:t)}:\"has\"==t?function(t){return !(o&&!F(t))&&e(this,0===t?0:t)}:function(t,n){return e(this,0===t?0:t,n),this});};if(Me(t,!L(u)||!(o||a.forEach&&!l((function(){(new u).entries().next();})))))c=n.getConstructor(e,t,r,i),bo.enable();else if(Me(t,!0)){var d=new c,v=d[i](o?{}:-0,1)!=d,h=l((function(){d.has(1);})),y=_o((function(t){new u(t);})),g=!o&&l((function(){for(var t=new u,e=5;e--;)t[i](e,e);return !t.has(-0)}));y||((c=e((function(t,e){Lo(t,a);var n=function(t,e,n){var r,o;return Hr&&L(r=e.constructor)&&r!==n&&F(o=r.prototype)&&o!==n.prototype&&Hr(t,o),t}(new u,t,c);return null!=e&&Mo(e,n[i],{that:n,AS_ENTRIES:r}),n}))).prototype=a,a.constructor=c),(h||g)&&(p(\"delete\"),p(\"has\"),r&&p(\"get\")),(g||v)&&p(i),o&&a.clear&&delete a.clear;}return f[t]=c,Le({global:!0,forced:c!=u},f),Ur(c,t),o||n.setStrong(c,t,r),c}(\"WeakMap\",ii,ni);if(Gt&&oi){ei=ni.getConstructor(ii,\"WeakMap\",!0),bo.enable();var ai=ui.prototype,ci=O(ai.delete),fi=O(ai.has),si=O(ai.get),li=O(ai.set);so(ai,{delete:function(t){if(F(t)&&!go(t)){var e=ri(this);return e.frozen||(e.frozen=new ei),ci(this,t)||e.frozen.delete(t)}return ci(this,t)},has:function(t){if(F(t)&&!go(t)){var e=ri(this);return e.frozen||(e.frozen=new ei),fi(this,t)||e.frozen.has(t)}return fi(this,t)},get:function(t){if(F(t)&&!go(t)){var e=ri(this);return e.frozen||(e.frozen=new ei),fi(this,t)?si(this,t):e.frozen.get(t)}return si(this,t)},set:function(t,e){if(F(t)&&!go(t)){var n=ri(this);n.frozen||(n.frozen=new ei),fi(this,t)?li(this,t,e):n.frozen.set(t,e);}else li(this,t,e);return this}});}var pi={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},di=Et(\"span\").classList,vi=di&&di.constructor&&di.constructor.prototype,hi=vi===Object.prototype?void 0:vi,yi=gt(\"iterator\"),gi=gt(\"toStringTag\"),mi=io.values,bi=function(t,e){if(t){if(t[yi]!==mi)try{Ft(t,yi,mi);}catch(e){t[yi]=mi;}if(t[gi]||Ft(t,gi,e),pi[e])for(var n in io)if(t[n]!==io[n])try{Ft(t,n,io[n]);}catch(e){t[n]=io[n];}}};for(var wi in pi)bi(s[wi]&&s[wi].prototype,wi);bi(hi,\"DOMTokenList\");var xi=function(t,e){var n=[][t];return !!n&&l((function(){n.call(null,e||function(){throw 1},1);}))},Si=Vo.forEach,Oi=xi(\"forEach\")?[].forEach:function(t){return Si(this,t,arguments.length>1?arguments[1]:void 0)},Ei=function(t){if(t&&t.forEach!==Oi)try{Ft(t,\"forEach\",Oi);}catch(e){t.forEach=Oi;}};for(var ji in pi)pi[ji]&&Ei(s[ji]&&s[ji].prototype);Ei(hi);var Ii,Ti,Ai,Pi,Ri=s.Promise,Mi=gt(\"species\"),ki=/(?:ipad|iphone|ipod).*applewebkit/i.test(_),Li=\"process\"==I(s.process),Fi=s.setImmediate,Ci=s.clearImmediate,Ni=s.process,zi=s.Dispatch,_i=s.Function,Di=s.MessageChannel,Ui=s.String,Gi=0,Bi={},Wi=\"onreadystatechange\";try{Ii=s.location;}catch(t){}var Vi=function(t){if(ct(Bi,t)){var e=Bi[t];delete Bi[t],e();}},Hi=function(t){return function(){Vi(t);}},qi=function(t){Vi(t.data);},Ki=function(t){s.postMessage(Ui(t),Ii.protocol+\"//\"+Ii.host);};Fi&&Ci||(Fi=function(t){var e=Qe(arguments,1);return Bi[++Gi]=function(){Vn(L(t)?t:_i(t),void 0,e);},Ti(Gi),Gi},Ci=function(t){delete Bi[t];},Li?Ti=function(t){Ni.nextTick(Hi(t));}:zi&&zi.now?Ti=function(t){zi.now(Hi(t));}:Di&&!ki?(Pi=(Ai=new Di).port2,Ai.port1.onmessage=qi,Ti=xo(Pi.postMessage,Pi)):s.addEventListener&&L(s.postMessage)&&!s.importScripts&&Ii&&\"file:\"!==Ii.protocol&&!l(Ki)?(Ti=Ki,s.addEventListener(\"message\",qi,!1)):Ti=Wi in Et(\"script\")?function(t){hn.appendChild(Et(\"script\")).onreadystatechange=function(){hn.removeChild(this),Vi(t);};}:function(t){setTimeout(Hi(t),0);});var Yi,Xi,$i,Ji,Qi,Zi,tu,eu,nu={set:Fi,clear:Ci},ru=/ipad|iphone|ipod/i.test(_)&&void 0!==s.Pebble,ou=/web0s(?!.*chrome)/i.test(_),iu=Tt.f,uu=nu.set,au=s.MutationObserver||s.WebKitMutationObserver,cu=s.document,fu=s.process,su=s.Promise,lu=iu(s,\"queueMicrotask\"),pu=lu&&lu.value;pu||(Yi=function(){var t,e;for(Li&&(t=fu.domain)&&t.exit();Xi;){e=Xi.fn,Xi=Xi.next;try{e();}catch(t){throw Xi?Ji():$i=void 0,t}}$i=void 0,t&&t.enter();},ki||Li||ou||!au||!cu?!ru&&su&&su.resolve?((tu=su.resolve(void 0)).constructor=su,eu=xo(tu.then,tu),Ji=function(){eu(Yi);}):Li?Ji=function(){fu.nextTick(Yi);}:(uu=xo(uu,s),Ji=function(){uu(Yi);}):(Qi=!0,Zi=cu.createTextNode(\"\"),new au(Yi).observe(Zi,{characterData:!0}),Ji=function(){Zi.data=Qi=!Qi;}));var du,vu,hu,yu,gu=pu||function(t){var e={fn:t,next:void 0};$i&&($i.next=e),Xi||(Xi=e,Ji()),$i=e;},mu=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=r;})),this.resolve=J(e),this.reject=J(n);},bu={f:function(t){return new mu(t)}},wu=function(t){try{return {error:!1,value:t()}}catch(t){return {error:!0,value:t}}},xu=\"object\"==typeof window,Su=nu.set,Ou=gt(\"species\"),Eu=\"Promise\",ju=Zt.getterFor(Eu),Iu=Zt.set,Tu=Zt.getterFor(Eu),Au=Ri&&Ri.prototype,Pu=Ri,Ru=Au,Mu=s.TypeError,ku=s.document,Lu=s.process,Fu=bu.f,Cu=Fu,Nu=!!(ku&&ku.createEvent&&s.dispatchEvent),zu=L(s.PromiseRejectionEvent),_u=\"unhandledrejection\",Du=!1,Uu=Me(Eu,(function(){var t=Dt(Pu),e=t!==String(Pu);if(!e&&66===W)return !0;if(W>=51&&/native code/.test(t))return !1;var n=new Pu((function(t){t(1);})),r=function(t){t((function(){}),(function(){}));};return (n.constructor={})[Ou]=r,!(Du=n.then((function(){}))instanceof r)||!e&&xu&&!zu})),Gu=Uu||!_o((function(t){Pu.all(t).catch((function(){}));})),Bu=function(t){var e;return !(!F(t)||!L(e=t.then))&&e},Wu=function(t,e){if(!t.notified){t.notified=!0;var n=t.reactions;gu((function(){for(var r=t.value,o=1==t.state,i=0;n.length>i;){var u,a,c,f=n[i++],s=o?f.ok:f.fail,l=f.resolve,p=f.reject,d=f.domain;try{s?(o||(2===t.rejection&&Ku(t),t.rejection=1),!0===s?u=r:(d&&d.enter(),u=s(r),d&&(d.exit(),c=!0)),u===f.promise?p(Mu(\"Promise-chain cycle\")):(a=Bu(u))?v(a,u,l,p):l(u)):p(r);}catch(t){d&&!c&&d.exit(),p(t);}}t.reactions=[],t.notified=!1,e&&!t.rejection&&Hu(t);}));}},Vu=function(t,e,n){var r,o;Nu?((r=ku.createEvent(\"Event\")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},!zu&&(o=s[\"on\"+t])?o(r):t===_u&&function(t,e){var n=s.console;n&&n.error&&(1==arguments.length?n.error(t):n.error(t,e));}(\"Unhandled promise rejection\",n);},Hu=function(t){v(Su,s,(function(){var e,n=t.facade,r=t.value;if(qu(t)&&(e=wu((function(){Li?Lu.emit(\"unhandledRejection\",r,n):Vu(_u,n,r);})),t.rejection=Li||qu(t)?2:1,e.error))throw e.value}));},qu=function(t){return 1!==t.rejection&&!t.parent},Ku=function(t){v(Su,s,(function(){var e=t.facade;Li?Lu.emit(\"rejectionHandled\",e):Vu(\"rejectionhandled\",e,t.value);}));},Yu=function(t,e,n){return function(r){t(e,r,n);}},Xu=function(t,e,n){t.done||(t.done=!0,n&&(t=n),t.value=e,t.state=2,Wu(t,!0));},$u=function(t,e,n){if(!t.done){t.done=!0,n&&(t=n);try{if(t.facade===e)throw Mu(\"Promise can't be resolved itself\");var r=Bu(e);r?gu((function(){var n={done:!1};try{v(r,e,Yu($u,n,t),Yu(Xu,n,t));}catch(e){Xu(n,e,t);}})):(t.value=e,t.state=1,Wu(t,!1));}catch(e){Xu({done:!1},e,t);}}};if(Uu&&(Ru=(Pu=function(t){Lo(this,Ru),J(t),v(du,this);var e=ju(this);try{t(Yu($u,e),Yu(Xu,e));}catch(t){Xu(e,t);}}).prototype,(du=function(t){Iu(this,{type:Eu,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0});}).prototype=so(Ru,{then:function(t,e){var n=Tu(this),r=n.reactions,o=Fu($n(this,Pu));return o.ok=!L(t)||t,o.fail=L(e)&&e,o.domain=Li?Lu.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&Wu(n,!1),o.promise},catch:function(t){return this.then(void 0,t)}}),vu=function(){var t=new du,e=ju(t);this.promise=t,this.resolve=Yu($u,e),this.reject=Yu(Xu,e);},bu.f=Fu=function(t){return t===Pu||t===hu?new vu(t):Cu(t)},L(Ri)&&Au!==Object.prototype)){yu=Au.then,Du||(oe(Au,\"then\",(function(t,e){var n=this;return new Pu((function(t,e){v(yu,n,t,e);})).then(t,e)}),{unsafe:!0}),oe(Au,\"catch\",Ru.catch,{unsafe:!0}));try{delete Au.constructor;}catch(t){}Hr&&Hr(Au,Ru);}Le({global:!0,wrap:!0,forced:Uu},{Promise:Pu}),Ur(Pu,Eu,!1),function(t){var e=N(t),n=Lt.f;p&&e&&!e[Mi]&&n(e,Mi,{configurable:!0,get:function(){return this}});}(Eu),hu=N(Eu),Le({target:Eu,stat:!0,forced:Uu},{reject:function(t){var e=Fu(this);return v(e.reject,void 0,t),e.promise}}),Le({target:Eu,stat:!0,forced:Uu},{resolve:function(t){return function(t,e){if(Rt(t),F(e)&&e.constructor===t)return e;var n=bu.f(t);return (0, n.resolve)(e),n.promise}(this,t)}}),Le({target:Eu,stat:!0,forced:Gu},{all:function(t){var e=this,n=Fu(e),r=n.resolve,o=n.reject,i=wu((function(){var n=J(e.resolve),i=[],u=0,a=1;Mo(t,(function(t){var c=u++,f=!1;a++,v(n,e,t).then((function(t){f||(f=!0,i[c]=t,--a||r(i));}),o);})),--a||r(i);}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=Fu(e),r=n.reject,o=wu((function(){var o=J(e.resolve);Mo(t,(function(t){v(o,e,t).then(n.resolve,r);}));}));return o.error&&r(o.value),n.promise}});var Ju=re.PROPER,Qu=\"toString\",Zu=RegExp.prototype,ta=Zu.toString,ea=O(cn),na=l((function(){return \"/a/b\"!=ta.call({source:\"a\",flags:\"b\"})})),ra=Ju&&ta.name!=Qu;(na||ra)&&oe(RegExp.prototype,Qu,(function(){var t=Rt(this),e=an(t.source),n=t.flags;return \"/\"+e+\"/\"+an(void 0===n&&z(Zu,t)&&!(\"flags\"in Zu)?ea(t):n)}),{unsafe:!0});var oa=re.EXISTS,ia=Lt.f,ua=Function.prototype,aa=O(ua.toString),ca=/function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/,fa=O(ca.exec);p&&!oa&&ia(ua,\"name\",{configurable:!0,get:function(){try{return fa(ca,aa(this))[1]}catch(t){return \"\"}}});var sa=new WeakMap;function la(t){return t.getMenuConfig(\"uploadImage\")}function pa(t,n){return mr(this,void 0,void 0,(function(){return br(this,(function(r){return [2,new Promise((function(r){var o=new FileReader;o.readAsDataURL(n),o.onload=function(){var i=o.result;if(i){var u=i.toString(),a=0===u.indexOf(\"data:image\")?\"\":u;e.insertImageNode(t,u,n.name,a),r(\"ok\");}};}))]}))}))}function da(n,r){return mr(this,void 0,void 0,(function(){var o,i,u,a;return br(this,(function(c){switch(c.label){case 0:return o=function(n){var r=sa.get(n);if(null!=r)return r;var o=la(n),i=o.onSuccess,u=o.onProgress,a=o.onFailed,c=o.customInsert,f=o.onError;return r=t.createUploader(gr(gr({},o),{onProgress:function(t){n.showProgressBar(t),u&&u(t);},onSuccess:function(t,r){if(c)return c(r,(function(t,r,o){return e.insertImageNode(n,t,r,o)})),void i(t,r);var o=r.errno,u=void 0===o?1:o,f=r.data,s=void 0===f?{}:f;if(0===u){if(Array.isArray(s))s.forEach((function(t){var r=t.url,o=void 0===r?\"\":r,i=t.alt,u=void 0===i?\"\":i,a=t.href,c=void 0===a?\"\":a;e.insertImageNode(n,o,u,c);}));else {var l=s.url,p=void 0===l?\"\":l,d=s.alt,v=void 0===d?\"\":d,h=s.href,y=void 0===h?\"\":h;e.insertImageNode(n,p,v,y);}i(t,r);}else a(t,r);},onError:function(t,e,n){f(t,e,n);}})),sa.set(n,r),r}(n),i=r.name,u=r.type,a=r.size,o.addFile({name:i,type:u,size:a,data:r}),[4,o.upload()];case 1:return c.sent(),[2]}}))}))}function va(t,n){var r,o;return mr(this,void 0,void 0,(function(){var i,u,a,c,f,s,l,p,d;return br(this,(function(v){switch(v.label){case 0:if(null==n)return [2];i=Array.prototype.slice.call(n),u=la(t),a=u.customUpload,c=u.base64LimitSize,v.label=1;case 1:v.trys.push([1,11,12,17]),f=xr(i),v.label=2;case 2:return [4,f.next()];case 3:return (s=v.sent()).done?[3,10]:(l=s.value,p=l.size,c&&p<=c?[4,pa(t,l)]:[3,5]);case 4:return v.sent(),[3,9];case 5:return a?[4,a(l,(function(n,r,o){return e.insertImageNode(t,n,r,o)}))]:[3,7];case 6:return v.sent(),[3,9];case 7:return [4,da(t,l)];case 8:v.sent(),v.label=9;case 9:return [3,2];case 10:return [3,17];case 11:return d=v.sent(),r={error:d},[3,17];case 12:return v.trys.push([12,,15,16]),s&&!s.done&&(o=f.return)?[4,o.call(f)]:[3,14];case 13:v.sent(),v.label=14;case 14:return [3,16];case 15:if(r)throw r.error;return [7];case 16:return [7];case 17:return [2]}}))}))}var ha=O([].join),ya=P!=Object,ga=xi(\"join\",\",\");Le({target:\"Array\",proto:!0,forced:ya||!ga},{join:function(t){return ha(k(this),void 0===t?\",\":t)}});n.append&&(o.default.fn.append=n.append),n.on&&(o.default.fn.on=n.on),n.remove&&(o.default.fn.remove=n.remove),n.val&&(o.default.fn.val=n.val),n.click&&(o.default.fn.click=n.click),n.hide&&(o.default.fn.hide=n.hide);var ma=function(){function n(){this.title=t.t(\"uploadImgModule.uploadImage\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M828.708571 585.045333a48.761905 48.761905 0 0 0-48.737523 48.761905v18.529524l-72.143238-72.167619a135.972571 135.972571 0 0 0-191.585524 0l-34.133334 34.133333-120.880762-120.953905a138.898286 138.898286 0 0 0-191.585523 0l-72.167619 72.167619V292.400762a48.786286 48.786286 0 0 1 48.761904-48.761905h341.23581a48.737524 48.737524 0 0 0 34.474667-83.285333 48.737524 48.737524 0 0 0-34.474667-14.287238H146.236952A146.212571 146.212571 0 0 0 0 292.400762v585.289143A146.358857 146.358857 0 0 0 146.236952 1024h584.996572a146.212571 146.212571 0 0 0 146.236952-146.310095V633.807238a48.786286 48.786286 0 0 0-48.761905-48.761905zM146.261333 926.45181a48.737524 48.737524 0 0 1-48.761904-48.761905v-174.128762l141.409523-141.458286a38.497524 38.497524 0 0 1 53.126096 0l154.526476 154.624 209.627428 209.724953H146.236952z m633.734096-48.761905c-0.073143 9.337905-3.145143 18.383238-8.777143 25.843809l-219.843048-220.94019 34.133333-34.133334a37.546667 37.546667 0 0 1 53.613715 0l140.873143 141.897143V877.714286zM1009.615238 160.231619L863.329524 13.897143a48.737524 48.737524 0 0 0-16.091429-10.24c-11.849143-4.87619-25.161143-4.87619-37.059047 0a48.761905 48.761905 0 0 0-16.067048 10.24l-146.236952 146.334476a49.005714 49.005714 0 0 0 69.217523 69.241905l62.902858-63.390476v272.627809a48.761905 48.761905 0 1 0 97.475047 0V166.083048l62.902857 63.390476a48.737524 48.737524 0 0 0 69.217524 0 48.761905 48.761905 0 0 0 0-69.241905z\"></path></svg>',this.tag=\"button\";}return n.prototype.getValue=function(t){return \"\"},n.prototype.isActive=function(t){return !1},n.prototype.isDisabled=function(t){return e.isInsertImageMenuDisabled(t)},n.prototype.getMenuConfig=function(t){return t.getMenuConfig(\"uploadImage\")},n.prototype.exec=function(t,n){var r=this.getMenuConfig(t),i=r.allowedFileTypes,u=void 0===i?[]:i,a=r.customBrowseAndUpload;if(a)a((function(n,r,o){return e.insertImageNode(t,n,r,o)}));else {var c=\"\";u.length>0&&(c='accept=\"'+u.join(\", \")+'\"');var f=o.default(\"body\"),s=o.default('<input type=\"file\" '+c+\" multiple/>\");s.hide(),f.append(s),s.click(),s.on(\"change\",(function(){var e=s[0].files;va(t,e);}));}},n}();var ba={menus:[{key:\"uploadImage\",factory:function(){return new ma},config:{server:\"\",fieldName:\"wangeditor-uploaded-image\",maxFileSize:2097152,maxNumberOfFiles:100,allowedFileTypes:[\"image/*\"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:1e4,onBeforeUpload:function(t){return t},onProgress:function(t){},onSuccess:function(t,e){},onFailed:function(t,e){console.error(\"'\"+t.name+\"' upload failed\",e);},onError:function(t,e,n){console.error(\"'\"+t.name+\"' upload error\",n);},base64LimitSize:0}}],editorPlugin:function(t){var n=t.insertData,r=t;return r.insertData=function(o){if(e.isInsertImageMenuDisabled(r))n(o);else if(o.getData(\"text/plain\"))n(o);else {var i=o.files;if(i.length<=0)n(o);else Array.prototype.slice.call(i).some((function(t){return \"image\"===function(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value);}catch(t){o={error:t};}finally{try{r&&!r.done&&(n=i.return)&&n.call(i);}finally{if(o)throw o.error}}return u}(t.type.split(\"/\"),1)[0]}))?va(t,i):n(o);}},r}};return ba}));\n\n  });\n\n  var dist = createCommonjsModule$1(function (module, exports) {\n  !function(e,t){t(exports,dist$6,require$$1,require$$2$1);}(commonjsGlobal,(function(e,t,n,a){function r(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var i=r(n);t.i18nAddResources(\"en\",{highLightModule:{selectLang:\"Language\"}}),t.i18nAddResources(\"zh-CN\",{highLightModule:{selectLang:\"选择语言\"}});var s=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof commonjsGlobal?commonjsGlobal:\"undefined\"!=typeof self?self:{};function o(e){var t={exports:{}};return e(t,t.exports),t.exports}var l,u,c=function(e){return e&&e.Math==Math&&e},d=c(\"object\"==typeof globalThis&&globalThis)||c(\"object\"==typeof window&&window)||c(\"object\"==typeof self&&self)||c(\"object\"==typeof s&&s)||function(){return this}()||Function(\"return this\")(),p=Object.defineProperty,g=function(e,t){try{p(d,e,{value:t,configurable:!0,writable:!0});}catch(n){d[e]=t;}return t},f=\"__core-js_shared__\",b=d[f]||g(f,{}),h=o((function(e){(e.exports=function(e,t){return b[e]||(b[e]=void 0!==t?t:{})})(\"versions\",[]).push({version:\"3.19.3\",mode:\"global\",copyright:\"© 2021 Denis Pushkarev (zloirock.ru)\"});})),m=Function.prototype,y=m.bind,E=m.call,v=y&&y.bind(E),S=y?function(e){return e&&v(E,e)}:function(e){return e&&function(){return E.apply(e,arguments)}},w=d.TypeError,k=function(e){if(null==e)throw w(\"Can't call method on \"+e);return e},A=d.Object,x=function(e){return A(k(e))},T=S({}.hasOwnProperty),_=Object.hasOwn||function(e,t){return T(x(e),t)},O=0,I=Math.random(),R=S(1..toString),N=function(e){return \"Symbol(\"+(void 0===e?\"\":e)+\")_\"+R(++O+I,36)},L=function(e){return \"function\"==typeof e},P=function(e){return L(e)?e:void 0},C=function(e,t){return arguments.length<2?P(d[e]):d[e]&&d[e][t]},F=C(\"navigator\",\"userAgent\")||\"\",D=d.process,$=d.Deno,M=D&&D.versions||$&&$.version,B=M&&M.v8;B&&(u=(l=B.split(\".\"))[0]>0&&l[0]<4?1:+(l[0]+l[1])),!u&&F&&(!(l=F.match(/Edge\\/(\\d+)/))||l[1]>=74)&&(l=F.match(/Chrome\\/(\\d+)/))&&(u=+l[1]);var U=u,j=function(e){try{return !!e()}catch(e){return !0}},z=!!Object.getOwnPropertySymbols&&!j((function(){var e=Symbol();return !String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&U&&U<41})),G=z&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,H=h(\"wks\"),q=d.Symbol,Y=q&&q.for,W=G?q:q&&q.withoutSetter||N,X=function(e){if(!_(H,e)||!z&&\"string\"!=typeof H[e]){var t=\"Symbol.\"+e;z&&_(q,e)?H[e]=q[e]:H[e]=G&&Y?Y(t):W(t);}return H[e]},Z={};Z[X(\"toStringTag\")]=\"z\";var V=\"[object z]\"===String(Z),K=!j((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),J=function(e){return \"object\"==typeof e?null!==e:L(e)},Q=d.document,ee=J(Q)&&J(Q.createElement),te=function(e){return ee?Q.createElement(e):{}},ne=!K&&!j((function(){return 7!=Object.defineProperty(te(\"div\"),\"a\",{get:function(){return 7}}).a})),ae=d.String,re=d.TypeError,ie=function(e){if(J(e))return e;throw re(ae(e)+\" is not an object\")},se=Function.prototype.call,oe=se.bind?se.bind(se):function(){return se.apply(se,arguments)},le=S({}.isPrototypeOf),ue=d.Object,ce=G?function(e){return \"symbol\"==typeof e}:function(e){var t=C(\"Symbol\");return L(t)&&le(t.prototype,ue(e))},de=d.String,pe=function(e){try{return de(e)}catch(e){return \"Object\"}},ge=d.TypeError,fe=function(e){if(L(e))return e;throw ge(pe(e)+\" is not a function\")},be=function(e,t){var n=e[t];return null==n?void 0:fe(n)},he=d.TypeError,me=d.TypeError,ye=X(\"toPrimitive\"),Ee=function(e,t){if(!J(e)||ce(e))return e;var n,a=be(e,ye);if(a){if(void 0===t&&(t=\"default\"),n=oe(a,e,t),!J(n)||ce(n))return n;throw me(\"Can't convert object to primitive value\")}return void 0===t&&(t=\"number\"),function(e,t){var n,a;if(\"string\"===t&&L(n=e.toString)&&!J(a=oe(n,e)))return a;if(L(n=e.valueOf)&&!J(a=oe(n,e)))return a;if(\"string\"!==t&&L(n=e.toString)&&!J(a=oe(n,e)))return a;throw he(\"Can't convert object to primitive value\")}(e,t)},ve=function(e){var t=Ee(e,\"string\");return ce(t)?t:t+\"\"},Se=d.TypeError,we=Object.defineProperty,ke={f:K?we:function(e,t,n){if(ie(e),t=ve(t),ie(n),ne)try{return we(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw Se(\"Accessors not supported\");return \"value\"in n&&(e[t]=n.value),e}},Ae=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},xe=K?function(e,t,n){return ke.f(e,t,Ae(1,n))}:function(e,t,n){return e[t]=n,e},Te=S(Function.toString);L(b.inspectSource)||(b.inspectSource=function(e){return Te(e)});var _e,Oe,Ie,Re=b.inspectSource,Ne=d.WeakMap,Le=L(Ne)&&/native code/.test(Re(Ne)),Pe=h(\"keys\"),Ce=function(e){return Pe[e]||(Pe[e]=N(e))},Fe={},De=\"Object already initialized\",$e=d.TypeError,Me=d.WeakMap;if(Le||b.state){var Be=b.state||(b.state=new Me),Ue=S(Be.get),je=S(Be.has),ze=S(Be.set);_e=function(e,t){if(je(Be,e))throw new $e(De);return t.facade=e,ze(Be,e,t),t},Oe=function(e){return Ue(Be,e)||{}},Ie=function(e){return je(Be,e)};}else {var Ge=Ce(\"state\");Fe[Ge]=!0,_e=function(e,t){if(_(e,Ge))throw new $e(De);return t.facade=e,xe(e,Ge,t),t},Oe=function(e){return _(e,Ge)?e[Ge]:{}},Ie=function(e){return _(e,Ge)};}var He={set:_e,get:Oe,has:Ie,enforce:function(e){return Ie(e)?Oe(e):_e(e,{})},getterFor:function(e){return function(t){var n;if(!J(t)||(n=Oe(t)).type!==e)throw $e(\"Incompatible receiver, \"+e+\" required\");return n}}},qe=Function.prototype,Ye=K&&Object.getOwnPropertyDescriptor,We=_(qe,\"name\"),Xe={EXISTS:We,PROPER:We&&\"something\"===function(){}.name,CONFIGURABLE:We&&(!K||K&&Ye(qe,\"name\").configurable)},Ze=o((function(e){var t=Xe.CONFIGURABLE,n=He.get,a=He.enforce,r=String(String).split(\"String\");(e.exports=function(e,n,i,s){var o,l=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,c=!!s&&!!s.noTargetGet,p=s&&void 0!==s.name?s.name:n;L(i)&&(\"Symbol(\"===String(p).slice(0,7)&&(p=\"[\"+String(p).replace(/^Symbol\\(([^)]*)\\)/,\"$1\")+\"]\"),(!_(i,\"name\")||t&&i.name!==p)&&xe(i,\"name\",p),(o=a(i)).source||(o.source=r.join(\"string\"==typeof p?p:\"\"))),e!==d?(l?!c&&e[n]&&(u=!0):delete e[n],u?e[n]=i:xe(e,n,i)):u?e[n]=i:g(n,i);})(Function.prototype,\"toString\",(function(){return L(this)&&n(this).source||Re(this)}));})),Ve=S({}.toString),Ke=S(\"\".slice),Je=function(e){return Ke(Ve(e),8,-1)},Qe=X(\"toStringTag\"),et=d.Object,tt=\"Arguments\"==Je(function(){return arguments}()),nt=V?Je:function(e){var t,n,a;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=et(e),Qe))?n:tt?Je(t):\"Object\"==(a=Je(t))&&L(t.callee)?\"Arguments\":a},at=V?{}.toString:function(){return \"[object \"+nt(this)+\"]\"};V||Ze(Object.prototype,\"toString\",at,{unsafe:!0});var rt,it,st={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},ot=te(\"span\").classList,lt=ot&&ot.constructor&&ot.constructor.prototype,ut=lt===Object.prototype?void 0:lt,ct=S(S.bind),dt=d.Object,pt=S(\"\".split),gt=j((function(){return !dt(\"z\").propertyIsEnumerable(0)}))?function(e){return \"String\"==Je(e)?pt(e,\"\"):dt(e)}:dt,ft=Math.ceil,bt=Math.floor,ht=function(e){var t=+e;return t!=t||0===t?0:(t>0?bt:ft)(t)},mt=Math.min,yt=function(e){return e>0?mt(ht(e),9007199254740991):0},Et=function(e){return yt(e.length)},vt=Array.isArray||function(e){return \"Array\"==Je(e)},St=function(){},wt=[],kt=C(\"Reflect\",\"construct\"),At=/^\\s*(?:class|function)\\b/,xt=S(At.exec),Tt=!At.exec(St),_t=function(e){if(!L(e))return !1;try{return kt(St,wt,e),!0}catch(e){return !1}},Ot=!kt||j((function(){var e;return _t(_t.call)||!_t(Object)||!_t((function(){e=!0;}))||e}))?function(e){if(!L(e))return !1;switch(nt(e)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return !1}return Tt||!!xt(At,Re(e))}:_t,It=X(\"species\"),Rt=d.Array,Nt=function(e,t){return new(function(e){var t;return vt(e)&&(t=e.constructor,(Ot(t)&&(t===Rt||vt(t.prototype))||J(t)&&null===(t=t[It]))&&(t=void 0)),void 0===t?Rt:t}(e))(0===t?0:t)},Lt=S([].push),Pt=function(e){var t=1==e,n=2==e,a=3==e,r=4==e,i=6==e,s=7==e,o=5==e||i;return function(l,u,c,d){for(var p,g,f=x(l),b=gt(f),h=function(e,t){return fe(e),void 0===t?e:ct?ct(e,t):function(){return e.apply(t,arguments)}}(u,c),m=Et(b),y=0,E=d||Nt,v=t?E(l,m):n||s?E(l,0):void 0;m>y;y++)if((o||y in b)&&(g=h(p=b[y],y,f),e))if(t)v[y]=g;else if(g)switch(e){case 3:return !0;case 5:return p;case 6:return y;case 2:Lt(v,p);}else switch(e){case 4:return !1;case 7:Lt(v,p);}return i?-1:a||r?r:v}},Ct={forEach:Pt(0),map:Pt(1),filter:Pt(2),some:Pt(3),every:Pt(4),find:Pt(5),findIndex:Pt(6),filterReject:Pt(7)}.forEach,Ft=!!(it=[][\"forEach\"])&&j((function(){it.call(null,rt||function(){throw 1},1);}))?[].forEach:function(e){return Ct(this,e,arguments.length>1?arguments[1]:void 0)},Dt=function(e){if(e&&e.forEach!==Ft)try{xe(e,\"forEach\",Ft);}catch(t){e.forEach=Ft;}};for(var $t in st)st[$t]&&Dt(d[$t]&&d[$t].prototype);Dt(ut);var Mt={}.propertyIsEnumerable,Bt=Object.getOwnPropertyDescriptor,Ut={f:Bt&&!Mt.call({1:2},1)?function(e){var t=Bt(this,e);return !!t&&t.enumerable}:Mt},jt=function(e){return gt(k(e))},zt=Object.getOwnPropertyDescriptor,Gt={f:K?zt:function(e,t){if(e=jt(e),t=ve(t),ne)try{return zt(e,t)}catch(e){}if(_(e,t))return Ae(!oe(Ut.f,e,t),e[t])}},Ht=Math.max,qt=Math.min,Yt=function(e,t){var n=ht(e);return n<0?Ht(n+t,0):qt(n,t)},Wt=function(e){return function(t,n,a){var r,i=jt(t),s=Et(i),o=Yt(a,s);if(e&&n!=n){for(;s>o;)if((r=i[o++])!=r)return !0}else for(;s>o;o++)if((e||o in i)&&i[o]===n)return e||o||0;return !e&&-1}},Xt={includes:Wt(!0),indexOf:Wt(!1)}.indexOf,Zt=S([].push),Vt=function(e,t){var n,a=jt(e),r=0,i=[];for(n in a)!_(Fe,n)&&_(a,n)&&Zt(i,n);for(;t.length>r;)_(a,n=t[r++])&&(~Xt(i,n)||Zt(i,n));return i},Kt=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],Jt=Kt.concat(\"length\",\"prototype\"),Qt={f:Object.getOwnPropertyNames||function(e){return Vt(e,Jt)}},en={f:Object.getOwnPropertySymbols},tn=S([].concat),nn=C(\"Reflect\",\"ownKeys\")||function(e){var t=Qt.f(ie(e)),n=en.f;return n?tn(t,n(e)):t},an=function(e,t){for(var n=nn(t),a=ke.f,r=Gt.f,i=0;i<n.length;i++){var s=n[i];_(e,s)||a(e,s,r(t,s));}},rn=/#|\\.prototype\\./,sn=function(e,t){var n=ln[on(e)];return n==cn||n!=un&&(L(t)?j(t):!!t)},on=sn.normalize=function(e){return String(e).replace(rn,\".\").toLowerCase()},ln=sn.data={},un=sn.NATIVE=\"N\",cn=sn.POLYFILL=\"P\",dn=sn,pn=Gt.f,gn=function(e,t){var n,a,r,i,s,o=e.target,l=e.global,u=e.stat;if(n=l?d:u?d[o]||g(o,{}):(d[o]||{}).prototype)for(a in t){if(i=t[a],r=e.noTargetGet?(s=pn(n,a))&&s.value:n[a],!dn(l?a:o+(u?\".\":\"#\")+a,e.forced)&&void 0!==r){if(typeof i==typeof r)continue;an(i,r);}(e.sham||r&&r.sham)&&xe(i,\"sham\",!0),Ze(n,a,i,e);}},fn=Object.keys||function(e){return Vt(e,Kt)},bn=Object.assign,hn=Object.defineProperty,mn=S([].concat),yn=!bn||j((function(){if(K&&1!==bn({b:1},bn(hn({},\"a\",{enumerable:!0,get:function(){hn(this,\"b\",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var e={},t={},n=Symbol(),a=\"abcdefghijklmnopqrst\";return e[n]=7,a.split(\"\").forEach((function(e){t[e]=e;})),7!=bn({},e)[n]||fn(bn({},t)).join(\"\")!=a}))?function(e,t){for(var n=x(e),a=arguments.length,r=1,i=en.f,s=Ut.f;a>r;)for(var o,l=gt(arguments[r++]),u=i?mn(fn(l),i(l)):fn(l),c=u.length,d=0;c>d;)o=u[d++],K&&!oe(s,l,o)||(n[o]=l[o]);return n}:bn;gn({target:\"Object\",stat:!0,forced:Object.assign!==yn},{assign:yn});var En=o((function(e){var t=function(e){var t=/\\blang(?:uage)?-([\\w-]+)\\b/i,n=0,a={},r={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function e(t){return t instanceof i?new i(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++n}),e.__id},clone:function e(t,n){var a,i;switch(n=n||{},r.util.type(t)){case\"Object\":if(i=r.util.objId(t),n[i])return n[i];for(var s in a={},n[i]=a,t)t.hasOwnProperty(s)&&(a[s]=e(t[s],n));return a;case\"Array\":return i=r.util.objId(t),n[i]?n[i]:(a=[],n[i]=a,t.forEach((function(t,r){a[r]=e(t,n);})),a);default:return t}},getLanguage:function(e){for(;e&&!t.test(e.className);)e=e.parentElement;return e?(e.className.match(t)||[,\"none\"])[1].toLowerCase():\"none\"},currentScript:function(){if(\"undefined\"==typeof document)return null;if(\"currentScript\"in document)return document.currentScript;try{throw new Error}catch(a){var e=(/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(a.stack)||[])[1];if(e){var t=document.getElementsByTagName(\"script\");for(var n in t)if(t[n].src==e)return t[n]}return null}},isActive:function(e,t,n){for(var a=\"no-\"+t;e;){var r=e.classList;if(r.contains(t))return !0;if(r.contains(a))return !1;e=e.parentElement;}return !!n}},languages:{plain:a,plaintext:a,text:a,txt:a,extend:function(e,t){var n=r.util.clone(r.languages[e]);for(var a in t)n[a]=t[a];return n},insertBefore:function(e,t,n,a){var i=(a=a||r.languages)[e],s={};for(var o in i)if(i.hasOwnProperty(o)){if(o==t)for(var l in n)n.hasOwnProperty(l)&&(s[l]=n[l]);n.hasOwnProperty(o)||(s[o]=i[o]);}var u=a[e];return a[e]=s,r.languages.DFS(r.languages,(function(t,n){n===u&&t!=e&&(this[t]=s);})),s},DFS:function e(t,n,a,i){i=i||{};var s=r.util.objId;for(var o in t)if(t.hasOwnProperty(o)){n.call(t,o,t[o],a||o);var l=t[o],u=r.util.type(l);\"Object\"!==u||i[s(l)]?\"Array\"!==u||i[s(l)]||(i[s(l)]=!0,e(l,n,o,i)):(i[s(l)]=!0,e(l,n,null,i));}}},plugins:{},highlightAll:function(e,t){r.highlightAllUnder(document,e,t);},highlightAllUnder:function(e,t,n){var a={callback:n,container:e,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};r.hooks.run(\"before-highlightall\",a),a.elements=Array.prototype.slice.apply(a.container.querySelectorAll(a.selector)),r.hooks.run(\"before-all-elements-highlight\",a);for(var i,s=0;i=a.elements[s++];)r.highlightElement(i,!0===t,a.callback);},highlightElement:function(n,a,i){var s=r.util.getLanguage(n),o=r.languages[s];n.className=n.className.replace(t,\"\").replace(/\\s+/g,\" \")+\" language-\"+s;var l=n.parentElement;l&&\"pre\"===l.nodeName.toLowerCase()&&(l.className=l.className.replace(t,\"\").replace(/\\s+/g,\" \")+\" language-\"+s);var u={element:n,language:s,grammar:o,code:n.textContent};function c(e){u.highlightedCode=e,r.hooks.run(\"before-insert\",u),u.element.innerHTML=u.highlightedCode,r.hooks.run(\"after-highlight\",u),r.hooks.run(\"complete\",u),i&&i.call(u.element);}if(r.hooks.run(\"before-sanity-check\",u),(l=u.element.parentElement)&&\"pre\"===l.nodeName.toLowerCase()&&!l.hasAttribute(\"tabindex\")&&l.setAttribute(\"tabindex\",\"0\"),!u.code)return r.hooks.run(\"complete\",u),void(i&&i.call(u.element));if(r.hooks.run(\"before-highlight\",u),u.grammar)if(a&&e.Worker){var d=new Worker(r.filename);d.onmessage=function(e){c(e.data);},d.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}));}else c(r.highlight(u.code,u.grammar,u.language));else c(r.util.encode(u.code));},highlight:function(e,t,n){var a={code:e,grammar:t,language:n};return r.hooks.run(\"before-tokenize\",a),a.tokens=r.tokenize(a.code,a.grammar),r.hooks.run(\"after-tokenize\",a),i.stringify(r.util.encode(a.tokens),a.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var a in n)t[a]=n[a];delete t.rest;}var r=new l;return u(r,r.head,e),o(e,r,t,r.head,0),function(e){var t=[],n=e.head.next;for(;n!==e.tail;)t.push(n.value),n=n.next;return t}(r)},hooks:{all:{},add:function(e,t){var n=r.hooks.all;n[e]=n[e]||[],n[e].push(t);},run:function(e,t){var n=r.hooks.all[e];if(n&&n.length)for(var a,i=0;a=n[i++];)a(t);}},Token:i};function i(e,t,n,a){this.type=e,this.content=t,this.alias=n,this.length=0|(a||\"\").length;}function s(e,t,n,a){e.lastIndex=t;var r=e.exec(n);if(r&&a&&r[1]){var i=r[1].length;r.index+=i,r[0]=r[0].slice(i);}return r}function o(e,t,n,a,l,d){for(var p in n)if(n.hasOwnProperty(p)&&n[p]){var g=n[p];g=Array.isArray(g)?g:[g];for(var f=0;f<g.length;++f){if(d&&d.cause==p+\",\"+f)return;var b=g[f],h=b.inside,m=!!b.lookbehind,y=!!b.greedy,E=b.alias;if(y&&!b.pattern.global){var v=b.pattern.toString().match(/[imsuy]*$/)[0];b.pattern=RegExp(b.pattern.source,v+\"g\");}for(var S=b.pattern||b,w=a.next,k=l;w!==t.tail&&!(d&&k>=d.reach);k+=w.value.length,w=w.next){var A=w.value;if(t.length>e.length)return;if(!(A instanceof i)){var x,T=1;if(y){if(!(x=s(S,k,e,m)))break;var _=x.index,O=x.index+x[0].length,I=k;for(I+=w.value.length;_>=I;)I+=(w=w.next).value.length;if(k=I-=w.value.length,w.value instanceof i)continue;for(var R=w;R!==t.tail&&(I<O||\"string\"==typeof R.value);R=R.next)T++,I+=R.value.length;T--,A=e.slice(k,I),x.index-=k;}else if(!(x=s(S,0,A,m)))continue;_=x.index;var N=x[0],L=A.slice(0,_),P=A.slice(_+N.length),C=k+A.length;d&&C>d.reach&&(d.reach=C);var F=w.prev;if(L&&(F=u(t,F,L),k+=L.length),c(t,F,T),w=u(t,F,new i(p,h?r.tokenize(N,h):N,E,N)),P&&u(t,w,P),T>1){var D={cause:p+\",\"+f,reach:C};o(e,t,n,w.prev,k,D),d&&D.reach>d.reach&&(d.reach=D.reach);}}}}}}function l(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0;}function u(e,t,n){var a=t.next,r={value:n,prev:t,next:a};return t.next=r,a.prev=r,e.length++,r}function c(e,t,n){for(var a=t.next,r=0;r<n&&a!==e.tail;r++)a=a.next;t.next=a,a.prev=t,e.length-=r;}if(e.Prism=r,i.stringify=function e(t,n){if(\"string\"==typeof t)return t;if(Array.isArray(t)){var a=\"\";return t.forEach((function(t){a+=e(t,n);})),a}var i={type:t.type,content:e(t.content,n),tag:\"span\",classes:[\"token\",t.type],attributes:{},language:n},s=t.alias;s&&(Array.isArray(s)?Array.prototype.push.apply(i.classes,s):i.classes.push(s)),r.hooks.run(\"wrap\",i);var o=\"\";for(var l in i.attributes)o+=\" \"+l+'=\"'+(i.attributes[l]||\"\").replace(/\"/g,\"&quot;\")+'\"';return \"<\"+i.tag+' class=\"'+i.classes.join(\" \")+'\"'+o+\">\"+i.content+\"</\"+i.tag+\">\"},!e.document)return e.addEventListener?(r.disableWorkerMessageHandler||e.addEventListener(\"message\",(function(t){var n=JSON.parse(t.data),a=n.language,i=n.code,s=n.immediateClose;e.postMessage(r.highlight(i,r.languages[a],a)),s&&e.close();}),!1),r):r;var d=r.util.currentScript();function p(){r.manual||r.highlightAll();}if(d&&(r.filename=d.src,d.hasAttribute(\"data-manual\")&&(r.manual=!0)),!r.manual){var g=document.readyState;\"loading\"===g||\"interactive\"===g&&d&&d.defer?document.addEventListener(\"DOMContentLoaded\",p):window.requestAnimationFrame?window.requestAnimationFrame(p):window.setTimeout(p,16);}return r}(\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});\n  /**\n     * Prism: Lightweight, robust, elegant syntax highlighting\n     *\n     * @license MIT <https://opensource.org/licenses/MIT>\n     * @author Lea Verou <https://lea.verou.me>\n     * @namespace\n     * @public\n     */e.exports&&(e.exports=t),void 0!==s&&(s.Prism=t),t.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\\s\\S])*?-->/,greedy:!0},prolog:{pattern:/<\\?[\\s\\S]+?\\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,greedy:!0,inside:{\"internal-subset\":{pattern:/(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\\]]/,\"doctype-tag\":/^DOCTYPE/i,name:/[^\\s<>'\"]+/}},cdata:{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,greedy:!0},tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"special-attr\":[],\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:[{pattern:/&[\\da-z]{1,8};/i,alias:\"named-entity\"},/&#x?[\\da-f]{1,8};/i]},t.languages.markup.tag.inside[\"attr-value\"].inside.entity=t.languages.markup.entity,t.languages.markup.doctype.inside[\"internal-subset\"].inside=t.languages.markup,t.hooks.add(\"wrap\",(function(e){\"entity\"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"));})),Object.defineProperty(t.languages.markup.tag,\"addInlined\",{value:function(e,n){var a={};a[\"language-\"+n]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:t.languages[n]},a.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;var r={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:a}};r[\"language-\"+n]={pattern:/[\\s\\S]+/,inside:t.languages[n]};var i={};i[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g,(function(){return e})),\"i\"),lookbehind:!0,greedy:!0,inside:r},t.languages.insertBefore(\"markup\",\"cdata\",i);}}),Object.defineProperty(t.languages.markup.tag,\"addAttribute\",{value:function(e,n){t.languages.markup.tag.inside[\"special-attr\"].push({pattern:RegExp(/(^|[\"'\\s])/.source+\"(?:\"+e+\")\"+/\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\"i\"),lookbehind:!0,inside:{\"attr-name\":/^[^\\s=]+/,\"attr-value\":{pattern:/=[\\s\\S]+/,inside:{value:{pattern:/(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,lookbehind:!0,alias:[n,\"language-\"+n],inside:t.languages[n]},punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}}}});}}),t.languages.html=t.languages.markup,t.languages.mathml=t.languages.markup,t.languages.svg=t.languages.markup,t.languages.xml=t.languages.extend(\"markup\",{}),t.languages.ssml=t.languages.xml,t.languages.atom=t.languages.xml,t.languages.rss=t.languages.xml,function(e){var t=/(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;e.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,inside:{rule:/^@[\\w-]+/,\"selector-function-argument\":{pattern:/(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,lookbehind:!0,alias:\"selector\"},keyword:{pattern:/(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,lookbehind:!0}}},url:{pattern:RegExp(\"\\\\burl\\\\((?:\"+t.source+\"|\"+/(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source+\")\\\\)\",\"i\"),greedy:!0,inside:{function:/^url/i,punctuation:/^\\(|\\)$/,string:{pattern:RegExp(\"^\"+t.source+\"$\"),alias:\"url\"}}},selector:{pattern:RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\"+t.source+\")*(?=\\\\s*\\\\{)\"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,lookbehind:!0},important:/!important\\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined(\"style\",\"css\"),n.tag.addAttribute(\"style\",\"css\"));}(t),t.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(?:true|false)\\b/,function:/\\b\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,punctuation:/[{}[\\];(),.:]/},t.languages.javascript=t.languages.extend(\"clike\",{\"class-name\":[t.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\\})\\s*)catch\\b/,lookbehind:!0},{pattern:/(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,lookbehind:!0}],function:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,number:/\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,operator:/--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/}),t.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,t.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,lookbehind:!0,greedy:!0,inside:{\"regex-source\":{pattern:/^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,lookbehind:!0,alias:\"language-regex\",inside:t.languages.regex},\"regex-delimiter\":/^\\/|\\/$/,\"regex-flags\":/^[a-z]+$/}},\"function-variable\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,alias:\"function\"},parameter:[{pattern:/(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,lookbehind:!0,inside:t.languages.javascript},{pattern:/(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,lookbehind:!0,inside:t.languages.javascript},{pattern:/(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,lookbehind:!0,inside:t.languages.javascript},{pattern:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,lookbehind:!0,inside:t.languages.javascript}],constant:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/}),t.languages.insertBefore(\"javascript\",\"string\",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:\"comment\"},\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^\\$\\{|\\}$/,alias:\"punctuation\"},rest:t.languages.javascript}},string:/[\\s\\S]+/}}}),t.languages.markup&&(t.languages.markup.tag.addInlined(\"script\",\"javascript\"),t.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\"javascript\")),t.languages.js=t.languages.javascript,function(){if(void 0!==t&&\"undefined\"!=typeof document){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var e={js:\"javascript\",py:\"python\",rb:\"ruby\",ps1:\"powershell\",psm1:\"powershell\",sh:\"bash\",bat:\"batch\",h:\"c\",tex:\"latex\"},n=\"data-src-status\",a=\"loading\",r=\"loaded\",i='pre[data-src]:not([data-src-status=\"loaded\"]):not([data-src-status=\"loading\"])',s=/\\blang(?:uage)?-([\\w-]+)\\b/i;t.hooks.add(\"before-highlightall\",(function(e){e.selector+=\", \"+i;})),t.hooks.add(\"before-sanity-check\",(function(s){var o=s.element;if(o.matches(i)){s.code=\"\",o.setAttribute(n,a);var u=o.appendChild(document.createElement(\"CODE\"));u.textContent=\"Loading…\";var c=o.getAttribute(\"data-src\"),d=s.language;if(\"none\"===d){var p=(/\\.(\\w+)$/.exec(c)||[,\"none\"])[1];d=e[p]||p;}l(u,d),l(o,d);var g=t.plugins.autoloader;g&&g.loadLanguages(d);var f=new XMLHttpRequest;f.open(\"GET\",c,!0),f.onreadystatechange=function(){var e,a;4==f.readyState&&(f.status<400&&f.responseText?(o.setAttribute(n,r),u.textContent=f.responseText,t.highlightElement(u)):(o.setAttribute(n,\"failed\"),f.status>=400?u.textContent=(e=f.status,a=f.statusText,\"✖ Error \"+e+\" while fetching file: \"+a):u.textContent=\"✖ Error: File does not exist or is empty\"));},f.send(null);}})),t.plugins.fileHighlight={highlight:function(e){for(var n,a=(e||document).querySelectorAll(i),r=0;n=a[r++];)t.highlightElement(n);}};var o=!1;t.fileHighlight=function(){o||(console.warn(\"Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.\"),o=!0),t.plugins.fileHighlight.highlight.apply(this,arguments);};}function l(e,t){var n=e.className;n=n.replace(s,\" \")+\" language-\"+t,e.className=n.replace(/\\s+/g,\" \").trim();}}();}));!function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source,a=/(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source,r=/(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;function i(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return a})).replace(/<SPREAD>/g,(function(){return r})),RegExp(e,t)}r=i(r).source,e.languages.jsx=e.languages.extend(\"markup\",t),e.languages.jsx.tag.pattern=i(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,e.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i,e.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:i(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore(\"inside\",\"special-attr\",{script:{pattern:i(/=<BRACES>/.source),inside:{\"script-punctuation\":{pattern:/^=(?=\\{)/,alias:\"punctuation\"},rest:e.languages.jsx},alias:\"language-javascript\"}},e.languages.jsx.tag);var s=function(e){return e?\"string\"==typeof e?e:\"string\"==typeof e.content?e.content:e.content.map(s).join(\"\"):\"\"},o=function(t){for(var n=[],a=0;a<t.length;a++){var r=t[a],i=!1;if(\"string\"!=typeof r&&(\"tag\"===r.type&&r.content[0]&&\"tag\"===r.content[0].type?\"</\"===r.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===s(r.content[0].content[1])&&n.pop():\"/>\"===r.content[r.content.length-1].content||n.push({tagName:s(r.content[0].content[1]),openedBraces:0}):n.length>0&&\"punctuation\"===r.type&&\"{\"===r.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&\"punctuation\"===r.type&&\"}\"===r.content?n[n.length-1].openedBraces--:i=!0),(i||\"string\"==typeof r)&&n.length>0&&0===n[n.length-1].openedBraces){var l=s(r);a<t.length-1&&(\"string\"==typeof t[a+1]||\"plain-text\"===t[a+1].type)&&(l+=s(t[a+1]),t.splice(a+1,1)),a>0&&(\"string\"==typeof t[a-1]||\"plain-text\"===t[a-1].type)&&(l=s(t[a-1])+l,t.splice(a-1,1),a--),t[a]=new e.Token(\"plain-text\",l,null,l);}r.content&&\"string\"!=typeof r.content&&o(r.content);}};e.hooks.add(\"after-tokenize\",(function(e){\"jsx\"!==e.language&&\"tsx\"!==e.language||o(e.tokens);}));}(Prism),function(e){e.languages.typescript=e.languages.extend(\"javascript\",{\"class-name\":{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/}),e.languages.typescript.keyword.push(/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/,/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,/\\btype\\b(?=\\s*(?:[\\{*]|$))/),delete e.languages.typescript.parameter;var t=e.languages.extend(\"typescript\",{});delete t[\"class-name\"],e.languages.typescript[\"class-name\"].inside=t,e.languages.insertBefore(\"typescript\",\"function\",{decorator:{pattern:/@[$\\w\\xA0-\\uFFFF]+/,inside:{at:{pattern:/^@/,alias:\"operator\"},function:/^[\\s\\S]+/}},\"generic-function\":{pattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,greedy:!0,inside:{function:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:t}}}}),e.languages.ts=e.languages.typescript;}(Prism),Prism.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\\s\\S])*?-->/,greedy:!0},prolog:{pattern:/<\\?[\\s\\S]+?\\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,greedy:!0,inside:{\"internal-subset\":{pattern:/(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\\]]/,\"doctype-tag\":/^DOCTYPE/i,name:/[^\\s<>'\"]+/}},cdata:{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,greedy:!0},tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"special-attr\":[],\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:[{pattern:/&[\\da-z]{1,8};/i,alias:\"named-entity\"},/&#x?[\\da-f]{1,8};/i]},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside[\"internal-subset\"].inside=Prism.languages.markup,Prism.hooks.add(\"wrap\",(function(e){\"entity\"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,\"&\"));})),Object.defineProperty(Prism.languages.markup.tag,\"addInlined\",{value:function(e,t){var n={};n[\"language-\"+t]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:Prism.languages[t]},n.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;var a={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:n}};a[\"language-\"+t]={pattern:/[\\s\\S]+/,inside:Prism.languages[t]};var r={};r[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g,(function(){return e})),\"i\"),lookbehind:!0,greedy:!0,inside:a},Prism.languages.insertBefore(\"markup\",\"cdata\",r);}}),Object.defineProperty(Prism.languages.markup.tag,\"addAttribute\",{value:function(e,t){Prism.languages.markup.tag.inside[\"special-attr\"].push({pattern:RegExp(/(^|[\"'\\s])/.source+\"(?:\"+e+\")\"+/\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\"i\"),lookbehind:!0,inside:{\"attr-name\":/^[^\\s=]+/,\"attr-value\":{pattern:/=[\\s\\S]+/,inside:{value:{pattern:/(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,lookbehind:!0,alias:[t,\"language-\"+t],inside:Prism.languages[t]},punctuation:[{pattern:/^=/,alias:\"attr-equals\"},/\"|'/]}}}});}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend(\"markup\",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml,Prism.languages.go=Prism.languages.extend(\"clike\",{string:{pattern:/([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,greedy:!0},keyword:/\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,boolean:/\\b(?:_|iota|nil|true|false)\\b/,number:/(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,operator:/[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,builtin:/\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/}),delete Prism.languages.go[\"class-name\"],function(e){var t=/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/,n=[{pattern:/\\b(?:false|true)\\b/i,alias:\"boolean\"},{pattern:/(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,greedy:!0,lookbehind:!0},{pattern:/(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,greedy:!0,lookbehind:!0},/\\b(?:null)\\b/i,/\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/],a=/\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,r=/<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,i=/[{}\\[\\](),:;]/;e.languages.php={delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"},comment:t,variable:/\\$+(?:\\w+\\b|(?=\\{))/i,package:{pattern:/(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,lookbehind:!0,inside:{punctuation:/\\\\/}},\"class-name-definition\":{pattern:/(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,lookbehind:!0,alias:\"class-name\"},\"function-definition\":{pattern:/(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,lookbehind:!0,alias:\"function\"},keyword:[{pattern:/(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,alias:\"type-casting\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*[\\w|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?[\\w|]\\|\\s*)(?:null|false)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,alias:\"type-declaration\",greedy:!0},{pattern:/(\\|\\s*)(?:null|false)\\b/i,alias:\"type-declaration\",greedy:!0,lookbehind:!0},{pattern:/\\b(?:parent|self|static)(?=\\s*::)/i,alias:\"static-context\",greedy:!0},{pattern:/(\\byield\\s+)from\\b/i,lookbehind:!0},/\\bclass\\b/i,{pattern:/((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,lookbehind:!0}],\"argument-name\":{pattern:/([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,lookbehind:!0},\"class-name\":[{pattern:/(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,greedy:!0,lookbehind:!0},{pattern:/\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,greedy:!0},{pattern:/(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,alias:\"class-name-fully-qualified\",greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,alias:\"class-name-fully-qualified\",greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-declaration\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-declaration\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/\\b[a-z_]\\w*(?=\\s*::)/i,alias:\"static-context\",greedy:!0},{pattern:/(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,alias:[\"class-name-fully-qualified\",\"static-context\"],greedy:!0,inside:{punctuation:/\\\\/}},{pattern:/([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,alias:\"type-hint\",greedy:!0,lookbehind:!0},{pattern:/([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,alias:[\"class-name-fully-qualified\",\"type-hint\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"return-type\",greedy:!0,lookbehind:!0},{pattern:/(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,alias:[\"class-name-fully-qualified\",\"return-type\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant:n,function:{pattern:/(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,lookbehind:!0,inside:{punctuation:/\\\\/}},property:{pattern:/(->\\s*)\\w+/,lookbehind:!0},number:a,operator:r,punctuation:i};var s={pattern:/\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,lookbehind:!0,inside:e.languages.php},o=[{pattern:/<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,alias:\"nowdoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},{pattern:/<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,alias:\"heredoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:s}},{pattern:/`(?:\\\\[\\s\\S]|[^\\\\`])*`/,alias:\"backtick-quoted-string\",greedy:!0},{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,alias:\"single-quoted-string\",greedy:!0},{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,alias:\"double-quoted-string\",greedy:!0,inside:{interpolation:s}}];e.languages.insertBefore(\"php\",\"variable\",{string:o,attribute:{pattern:/#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,greedy:!0,inside:{\"attribute-content\":{pattern:/^(#\\[)[\\s\\S]+(?=\\]$)/,lookbehind:!0,inside:{comment:t,string:o,\"attribute-class-name\":[{pattern:/([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,alias:\"class-name\",greedy:!0,lookbehind:!0},{pattern:/([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,alias:[\"class-name\",\"class-name-fully-qualified\"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\\\/}}],constant:n,number:a,operator:r,punctuation:i}},delimiter:{pattern:/^#\\[|\\]$/,alias:\"punctuation\"}}}}),e.hooks.add(\"before-tokenize\",(function(t){if(/<\\?/.test(t.code)){e.languages[\"markup-templating\"].buildPlaceholders(t,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi);}})),e.hooks.add(\"after-tokenize\",(function(t){e.languages[\"markup-templating\"].tokenizePlaceholders(t,\"php\");}));}(Prism),Prism.languages.c=Prism.languages.extend(\"clike\",{comment:{pattern:/\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,greedy:!0},\"class-name\":{pattern:/(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,lookbehind:!0},keyword:/\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,function:/\\b[a-z_]\\w*(?=\\s*\\()/i,number:/(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/}),Prism.languages.insertBefore(\"c\",\"string\",{macro:{pattern:/(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,lookbehind:!0,greedy:!0,alias:\"property\",inside:{string:[{pattern:/^(#\\s*include\\s*)<[^>]+>/,lookbehind:!0},Prism.languages.c.string],comment:Prism.languages.c.comment,\"macro-name\":[{pattern:/(^#\\s*define\\s+)\\w+\\b(?!\\()/i,lookbehind:!0},{pattern:/(^#\\s*define\\s+)\\w+\\b(?=\\()/i,lookbehind:!0,alias:\"function\"}],directive:{pattern:/^(#\\s*)[a-z]+/,lookbehind:!0,alias:\"keyword\"},\"directive-hash\":/^#/,punctuation:/##|\\\\(?=[\\r\\n])/,expression:{pattern:/\\S[\\s\\S]*/,inside:Prism.languages.c}}},constant:/\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/}),delete Prism.languages.c.boolean,Prism.languages.python={comment:{pattern:/(^|[^\\\\])#.*/,lookbehind:!0},\"string-interpolation\":{pattern:/(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,lookbehind:!0,inside:{\"format-spec\":{pattern:/(:)[^:(){}]+(?=\\}$)/,lookbehind:!0},\"conversion-option\":{pattern:/![sra](?=[:}]$)/,alias:\"punctuation\"},rest:null}},string:/[\\s\\S]+/}},\"triple-quoted-string\":{pattern:/(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]*?\\1/i,greedy:!0,alias:\"string\"},string:{pattern:/(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,greedy:!0},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,lookbehind:!0},\"class-name\":{pattern:/(\\bclass\\s+)\\w+/i,lookbehind:!0},decorator:{pattern:/(^[\\t ]*)@\\w+(?:\\.\\w+)*/im,lookbehind:!0,alias:[\"annotation\",\"punctuation\"],inside:{punctuation:/\\./}},keyword:/\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,builtin:/\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,boolean:/\\b(?:True|False|None)\\b/,number:/\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?\\b/i,operator:/[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\\];(),.:]/},Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python,function(e){var t=/\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/,n=/(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source,a={pattern:RegExp(n+/[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,inside:{punctuation:/\\./}},punctuation:/\\./}};e.languages.java=e.languages.extend(\"clike\",{\"class-name\":[a,{pattern:RegExp(n+/[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),lookbehind:!0,inside:a.inside}],keyword:t,function:[e.languages.clike.function,{pattern:/(::\\s*)[a-z_]\\w*/,lookbehind:!0}],number:/\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore(\"java\",\"string\",{\"triple-quoted-string\":{pattern:/\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,greedy:!0,alias:\"string\"}}),e.languages.insertBefore(\"java\",\"class-name\",{annotation:{pattern:/(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,lookbehind:!0,alias:\"punctuation\"},generics:{pattern:/<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,inside:{\"class-name\":a,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}},namespace:{pattern:RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0,inside:{punctuation:/\\./}}});}(Prism),function(e){var t=/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,n=/\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend(\"c\",{\"class-name\":[{pattern:RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],keyword:t,number:{pattern:/(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,boolean:/\\b(?:true|false)\\b/}),e.languages.insertBefore(\"cpp\",\"string\",{module:{pattern:RegExp(/(\\b(?:module|import)\\s+)/.source+\"(?:\"+/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source+\"|\"+/<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+\")\"),lookbehind:!0,greedy:!0,inside:{string:/^[<\"][\\s\\S]+/,operator:/:/,punctuation:/\\./}},\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}}),e.languages.insertBefore(\"cpp\",\"keyword\",{\"generic-function\":{pattern:/\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,inside:{function:/^\\w+/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:e.languages.cpp}}}}),e.languages.insertBefore(\"cpp\",\"operator\",{\"double-colon\":{pattern:/::/,alias:\"punctuation\"}}),e.languages.insertBefore(\"cpp\",\"class-name\",{\"base-clause\":{pattern:/(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend(\"cpp\",{})}}),e.languages.insertBefore(\"inside\",\"double-colon\",{\"class-name\":/\\b[a-z_]\\w*\\b(?!\\s*::)/i},e.languages.cpp[\"base-clause\"]);}(Prism),function(e){function t(e,t){return e.replace(/<<(\\d+)>>/g,(function(e,n){return \"(?:\"+t[+n]+\")\"}))}function n(e,n,a){return RegExp(t(e,n),a||\"\")}function a(e,t){for(var n=0;n<t;n++)e=e.replace(/<<self>>/g,(function(){return \"(?:\"+e+\")\"}));return e.replace(/<<self>>/g,\"[^\\\\s\\\\S]\")}var r=\"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",i=\"class enum interface record struct\",s=\"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",o=\"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\";function l(e){return \"\\\\b(?:\"+e.trim().replace(/ /g,\"|\")+\")\\\\b\"}var u=l(i),c=RegExp(l(r+\" \"+i+\" \"+s+\" \"+o)),d=l(i+\" \"+s+\" \"+o),p=l(r+\" \"+i+\" \"+o),g=a(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source,2),f=a(/\\((?:[^()]|<<self>>)*\\)/.source,2),b=/@?\\b[A-Za-z_]\\w*\\b/.source,h=t(/<<0>>(?:\\s*<<1>>)?/.source,[b,g]),m=t(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source,[d,h]),y=/\\[\\s*(?:,\\s*)*\\]/.source,E=t(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source,[m,y]),v=t(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,[g,f,y]),S=t(/\\(<<0>>+(?:,<<0>>+)+\\)/.source,[v]),w=t(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source,[S,m,y]),k={keyword:c,punctuation:/[<>()?,.:[\\]]/},A=/'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source,x=/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source,T=/@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;e.languages.csharp=e.languages.extend(\"clike\",{string:[{pattern:n(/(^|[^$\\\\])<<0>>/.source,[T]),lookbehind:!0,greedy:!0},{pattern:n(/(^|[^@$\\\\])<<0>>/.source,[x]),lookbehind:!0,greedy:!0},{pattern:RegExp(A),greedy:!0,alias:\"character\"}],\"class-name\":[{pattern:n(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source,[m]),lookbehind:!0,inside:k},{pattern:n(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source,[b,w]),lookbehind:!0,inside:k},{pattern:n(/(\\busing\\s+)<<0>>(?=\\s*=)/.source,[b]),lookbehind:!0},{pattern:n(/(\\b<<0>>\\s+)<<1>>/.source,[u,h]),lookbehind:!0,inside:k},{pattern:n(/(\\bcatch\\s*\\(\\s*)<<0>>/.source,[m]),lookbehind:!0,inside:k},{pattern:n(/(\\bwhere\\s+)<<0>>/.source,[b]),lookbehind:!0},{pattern:n(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source,[E]),lookbehind:!0,inside:k},{pattern:n(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source,[w,p,b]),inside:k}],keyword:c,number:/(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,operator:/>>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,punctuation:/\\?\\.?|::|[{}[\\];(),.:]/}),e.languages.insertBefore(\"csharp\",\"number\",{range:{pattern:/\\.\\./,alias:\"operator\"}}),e.languages.insertBefore(\"csharp\",\"punctuation\",{\"named-parameter\":{pattern:n(/([(,]\\s*)<<0>>(?=\\s*:)/.source,[b]),lookbehind:!0,alias:\"punctuation\"}}),e.languages.insertBefore(\"csharp\",\"class-name\",{namespace:{pattern:n(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source,[b]),lookbehind:!0,inside:{punctuation:/\\./}},\"type-expression\":{pattern:n(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source,[f]),lookbehind:!0,alias:\"class-name\",inside:k},\"return-type\":{pattern:n(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source,[w,m]),inside:k,alias:\"class-name\"},\"constructor-invocation\":{pattern:n(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source,[w]),lookbehind:!0,inside:k,alias:\"class-name\"},\"generic-method\":{pattern:n(/<<0>>\\s*<<1>>(?=\\s*\\()/.source,[b,g]),inside:{function:n(/^<<0>>/.source,[b]),generic:{pattern:RegExp(g),alias:\"class-name\",inside:k}}},\"type-list\":{pattern:n(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source,[u,h,b,w,c.source,f,/\\bnew\\s*\\(\\s*\\)/.source]),lookbehind:!0,inside:{\"record-arguments\":{pattern:n(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source,[h,f]),lookbehind:!0,greedy:!0,inside:e.languages.csharp},keyword:c,\"class-name\":{pattern:RegExp(w),greedy:!0,inside:k},punctuation:/[,()]/}},preprocessor:{pattern:/(^[\\t ]*)#.*/m,lookbehind:!0,alias:\"property\",inside:{directive:{pattern:/(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,lookbehind:!0,alias:\"keyword\"}}}});var _=x+\"|\"+A,O=t(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,[_]),I=a(t(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source,[O]),2),R=/\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source,N=t(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source,[m,I]);e.languages.insertBefore(\"csharp\",\"class-name\",{attribute:{pattern:n(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source,[R,N]),lookbehind:!0,greedy:!0,inside:{target:{pattern:n(/^<<0>>(?=\\s*:)/.source,[R]),alias:\"keyword\"},\"attribute-arguments\":{pattern:n(/\\(<<0>>*\\)/.source,[I]),inside:e.languages.csharp},\"class-name\":{pattern:RegExp(m),inside:{punctuation:/\\./}},punctuation:/[:,]/}}});var L=/:[^}\\r\\n]+/.source,P=a(t(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source,[O]),2),C=t(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source,[P,L]),F=a(t(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source,[_]),2),D=t(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source,[F,L]);function $(t,a){return {interpolation:{pattern:n(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source,[t]),lookbehind:!0,inside:{\"format-string\":{pattern:n(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source,[a,L]),lookbehind:!0,inside:{punctuation:/^:/}},punctuation:/^\\{|\\}$/,expression:{pattern:/[\\s\\S]+/,alias:\"language-csharp\",inside:e.languages.csharp}}},string:/[\\s\\S]+/}}e.languages.insertBefore(\"csharp\",\"string\",{\"interpolation-string\":[{pattern:n(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source,[C]),lookbehind:!0,greedy:!0,inside:$(C,P)},{pattern:n(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source,[D]),lookbehind:!0,greedy:!0,inside:$(D,F)}]});}(Prism),Prism.languages.dotnet=Prism.languages.cs=Prism.languages.csharp,Prism.languages[\"visual-basic\"]={comment:{pattern:/(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\\S\\r\\n]_[^\\S\\r\\n]*(?:\\r\\n?|\\n)|.)+/i,alias:\"comment\",greedy:!0},string:{pattern:/\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,greedy:!0},date:{pattern:/#[^\\S\\r\\n]*(?:\\d+([/-])\\d+\\1\\d+(?:[^\\S\\r\\n]+(?:\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?))?|\\d+[^\\S\\r\\n]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[^\\S\\r\\n]*(?:AM|PM))?)[^\\S\\r\\n]*#/i,alias:\"builtin\"},number:/(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\\b(?:True|False|Nothing)\\b/i,keyword:/\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\\b/i,operator:[/[+\\-*/\\\\^<=>&#@$%!]/,{pattern:/([^\\S\\r\\n])_(?=[^\\S\\r\\n]*[\\r\\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages[\"visual-basic\"],Prism.languages.vba=Prism.languages[\"visual-basic\"],Prism.languages.sql={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,lookbehind:!0},variable:[{pattern:/@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,greedy:!0},/@[\\w.$]+/],string:{pattern:/(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,greedy:!0,lookbehind:!0},function:/\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,keyword:/\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,boolean:/\\b(?:TRUE|FALSE|NULL)\\b/i,number:/\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,operator:/[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,punctuation:/[;[\\]()`,.]/},function(e){e.languages.ruby=e.languages.extend(\"clike\",{comment:[/#.*/,{pattern:/^=begin\\s[\\s\\S]*?^=end/m,greedy:!0}],\"class-name\":{pattern:/(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/});var t={pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"tag\"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore(\"ruby\",\"keyword\",{regex:[{pattern:RegExp(/%r/.source+\"(?:\"+[/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join(\"|\")+\")\"+/[egimnosux]{0,6}/.source),greedy:!0,inside:{interpolation:t}},{pattern:/(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,lookbehind:!0,greedy:!0,inside:{interpolation:t}}],variable:/[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,lookbehind:!0},\"method-definition\":{pattern:/(\\bdef\\s+)[\\w.]+/,lookbehind:!0,inside:{function:/\\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore(\"ruby\",\"number\",{builtin:/\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,constant:/\\b[A-Z]\\w*(?:[?!]|\\b)/}),e.languages.ruby.string=[{pattern:RegExp(/%[qQiIwWxs]?/.source+\"(?:\"+[/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,/\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,/\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,/\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,/<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join(\"|\")+\")\"),greedy:!0,inside:{interpolation:t}},{pattern:/(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,greedy:!0,inside:{interpolation:t}},{pattern:/<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,alias:\"heredoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,alias:\"symbol\",inside:{punctuation:/^<<[-~]?/}},interpolation:t}},{pattern:/<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,alias:\"heredoc-string\",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,alias:\"symbol\",inside:{punctuation:/^<<[-~]?'|'$/}}}}],e.languages.rb=e.languages.ruby;}(Prism),Prism.languages.swift={comment:{pattern:/(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,lookbehind:!0,greedy:!0},\"string-literal\":[{pattern:RegExp(/(^|[^\"#])/.source+\"(?:\"+/\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source+\"|\"+/\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source+\")\"+/(?![\"#])/.source),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,lookbehind:!0,inside:null},\"interpolation-punctuation\":{pattern:/^\\)|\\\\\\($/,alias:\"punctuation\"},punctuation:/\\\\(?=[\\r\\n])/,string:/[\\s\\S]+/}},{pattern:RegExp(/(^|[^\"#])(#+)/.source+\"(?:\"+/\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source+\"|\"+/\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source+\")\\\\2\"),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,lookbehind:!0,inside:null},\"interpolation-punctuation\":{pattern:/^\\)|\\\\#+\\($/,alias:\"punctuation\"},string:/[\\s\\S]+/}}],directive:{pattern:RegExp(/#/.source+\"(?:\"+/(?:elseif|if)\\b/.source+\"(?:[ \\t]*\"+/(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source+\")+|\"+/(?:else|endif)\\b/.source+\")\"),alias:\"property\",inside:{\"directive-name\":/^#\\w+/,boolean:/\\b(?:true|false)\\b/,number:/\\b\\d+(?:\\.\\d+)*\\b/,operator:/!|&&|\\|\\||[<>]=?/,punctuation:/[(),]/}},literal:{pattern:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,alias:\"constant\"},\"other-directive\":{pattern:/#\\w+\\b/,alias:\"property\"},attribute:{pattern:/@\\w+/,alias:\"atrule\"},\"function-definition\":{pattern:/(\\bfunc\\s+)\\w+/,lookbehind:!0,alias:\"function\"},label:{pattern:/\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,lookbehind:!0,alias:\"important\"},keyword:/\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,boolean:/\\b(?:true|false)\\b/,nil:{pattern:/\\bnil\\b/,alias:\"constant\"},\"short-argument\":/\\$\\d+\\b/,omit:{pattern:/\\b_\\b/,alias:\"keyword\"},number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\"class-name\":/\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,function:/\\b[a-z_]\\w*(?=\\s*\\()/i,constant:/\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,operator:/[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,punctuation:/[{}[\\]();,.:\\\\]/},Prism.languages.swift[\"string-literal\"].forEach((function(e){e.inside.interpolation.inside=Prism.languages.swift;})),function(e){var t=\"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\",n={pattern:/(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,lookbehind:!0,alias:\"punctuation\",inside:null},a={bash:n,environment:{pattern:RegExp(\"\\\\$\"+t),alias:\"constant\"},variable:[{pattern:/\\$?\\(\\([\\s\\S]+?\\)\\)/,greedy:!0,inside:{variable:[{pattern:/(^\\$\\(\\([\\s\\S]+)\\)\\)/,lookbehind:!0},/^\\$\\(\\(/],number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,punctuation:/\\(\\(?|\\)\\)?|,|;/}},{pattern:/\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,greedy:!0,inside:{variable:/^\\$\\(|^`|\\)$|`$/}},{pattern:/\\$\\{[^}]+\\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,punctuation:/[\\[\\]]/,environment:{pattern:RegExp(\"(\\\\{)\"+t),lookbehind:!0,alias:\"constant\"}}},/\\$(?:\\w+|[#?*!@$])/],entity:/\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\\s*\\/.*/,alias:\"important\"},comment:{pattern:/(^|[^\"{\\\\$])#.*/,lookbehind:!0},\"function-name\":[{pattern:/(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,lookbehind:!0,alias:\"function\"},{pattern:/\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,alias:\"function\"}],\"for-or-select\":{pattern:/(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,alias:\"variable\",lookbehind:!0},\"assign-left\":{pattern:/(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,inside:{environment:{pattern:RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\"+t),lookbehind:!0,alias:\"constant\"}},alias:\"variable\",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,lookbehind:!0,greedy:!0,inside:a},{pattern:/((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,lookbehind:!0,greedy:!0,inside:a},{pattern:/(^|[^$\\\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,greedy:!0,inside:{entity:a.entity}}],environment:{pattern:RegExp(\"\\\\$?\"+t),alias:\"constant\"},variable:a.variable,function:{pattern:/(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,lookbehind:!0,alias:\"class-name\"},boolean:{pattern:/(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,lookbehind:!0},\"file-descriptor\":{pattern:/\\B&\\d\\b/,alias:\"important\"},operator:{pattern:/\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,inside:{\"file-descriptor\":{pattern:/^\\d/,alias:\"important\"}}},punctuation:/\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,number:{pattern:/(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var r=[\"comment\",\"function-name\",\"for-or-select\",\"assign-left\",\"string\",\"environment\",\"function\",\"keyword\",\"builtin\",\"boolean\",\"file-descriptor\",\"operator\",\"punctuation\",\"number\"],i=a.variable[1].inside,s=0;s<r.length;s++)i[r[s]]=e.languages.bash[r[s]];e.languages.shell=e.languages.bash;}(Prism),function(e){var t=/(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source+\"(?:\"+e+\")\")}var a=/(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source,r=/\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g,(function(){return a})),i=/\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;e.languages.markdown=e.languages.extend(\"markup\",{}),e.languages.insertBefore(\"markdown\",\"prolog\",{\"front-matter-block\":{pattern:/(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,\"font-matter\":{pattern:/\\S+(?:\\s+\\S+)*/,alias:[\"yaml\",\"language-yaml\"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},table:{pattern:RegExp(\"^\"+r+i+\"(?:\"+r+\")*\",\"m\"),inside:{\"table-data-rows\":{pattern:RegExp(\"^(\"+r+i+\")(?:\"+r+\")*$\"),lookbehind:!0,inside:{\"table-data\":{pattern:RegExp(a),inside:e.languages.markdown},punctuation:/\\|/}},\"table-line\":{pattern:RegExp(\"^(\"+r+\")\"+i+\"$\"),lookbehind:!0,inside:{punctuation:/\\||:?-{3,}:?/}},\"table-header-row\":{pattern:RegExp(\"^\"+r+\"$\"),inside:{\"table-header\":{pattern:RegExp(a),alias:\"important\",inside:e.languages.markdown},punctuation:/\\|/}}}},code:[{pattern:/((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,lookbehind:!0,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:n(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\\s\\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\\*\\*|__/}},italic:{pattern:n(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\\s\\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},\"code-snippet\":{pattern:/(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:[\"code\",\"keyword\"]},url:{pattern:n(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\\[)[^\\]]+(?=\\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},url:{pattern:/(^\\]\\()[^\\s)]+/,lookbehind:!0},string:{pattern:/(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,lookbehind:!0}}}}),[\"url\",\"bold\",\"italic\",\"strike\"].forEach((function(t){[\"url\",\"bold\",\"italic\",\"strike\",\"code-snippet\"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n]);}));})),e.hooks.add(\"after-tokenize\",(function(e){\"markdown\"!==e.language&&\"md\"!==e.language||function e(t){if(t&&\"string\"!=typeof t)for(var n=0,a=t.length;n<a;n++){var r=t[n];if(\"code\"===r.type){var i=r.content[1],s=r.content[3];if(i&&s&&\"code-language\"===i.type&&\"code-block\"===s.type&&\"string\"==typeof i.content){var o=i.content.replace(/\\b#/g,\"sharp\").replace(/\\b\\+\\+/g,\"pp\"),l=\"language-\"+(o=(/[a-z][\\w-]*/i.exec(o)||[\"\"])[0].toLowerCase());s.alias?\"string\"==typeof s.alias?s.alias=[s.alias,l]:s.alias.push(l):s.alias=[l];}}else e(r.content);}}(e.tokens);})),e.hooks.add(\"wrap\",(function(t){if(\"code-block\"===t.type){for(var n=\"\",a=0,r=t.classes.length;a<r;a++){var i=t.classes[a],u=/language-(.+)/.exec(i);if(u){n=u[1];break}}var c=e.languages[n];if(c)t.content=e.highlight(function(e){var t=e.replace(s,\"\");return t=t.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi,(function(e,t){var n;if(\"#\"===(t=t.toLowerCase())[0])return n=\"x\"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),l(n);var a=o[t];return a||e}))}(t.content),c,n);else if(n&&\"none\"!==n&&e.plugins.autoloader){var d=\"md-\"+(new Date).valueOf()+\"-\"+Math.floor(1e16*Math.random());t.attributes.id=d,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(d);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n));}));}}}));var s=RegExp(e.languages.markup.tag.pattern.source,\"gi\"),o={amp:\"&\",lt:\"<\",gt:\">\",quot:'\"'},l=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown;}(Prism),Prism.languages.lua={comment:/^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,string:{pattern:/([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,greedy:!0},number:/\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,keyword:/\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,function:/(?!\\d)\\w+(?=\\s*(?:[({]))/,operator:[/[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\\.\\.(?!\\.)/,lookbehind:!0}],punctuation:/[\\[\\](){},;]|\\.+|:+/},Prism.languages.groovy=Prism.languages.extend(\"clike\",{string:[{pattern:/(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,greedy:!0},{pattern:/([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0}],keyword:/\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,number:/\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,lookbehind:!0},punctuation:/\\.+|[{}[\\];(),:$]/}),Prism.languages.insertBefore(\"groovy\",\"string\",{shebang:{pattern:/#!.+/,alias:\"comment\"}}),Prism.languages.insertBefore(\"groovy\",\"punctuation\",{\"spock-block\":/\\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore(\"groovy\",\"function\",{annotation:{pattern:/(^|[^.])@\\w+/,lookbehind:!0,alias:\"punctuation\"}}),Prism.hooks.add(\"wrap\",(function(e){if(\"groovy\"===e.language&&\"string\"===e.type){var t=e.content[0];if(\"'\"!=t){var n=/([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\"$\"===t&&(n=/([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/),e.content=e.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push(\"/\"===t?\"regex\":\"gstring\");}}}));var vn=[\"comment\",\"prolog\",\"doctype\",\"cdata\",\"punctuation\",\"namespace\",\"property\",\"tag\",\"boolean\",\"number\",\"constant\",\"symbol\",\"deleted\",\"selector\",\"attr-name\",\"string\",\"builtin\",\"inserted\",\"operator\",\"entity\",\"url\",\"string\",\"atrule\",\"attr-value\",\"keyword\",\"function\",\"class-name\",\"regex\",\"important\",\"variable\",\"bold\",\"italic\",\"entity\",\"char\"];function Sn(e){return \"string\"==typeof e?e.length:\"string\"==typeof e.content?e.content.length:e.content.reduce((function(e,t){return e+Sn(t)}),0)}var wn,kn=d.String,An=function(e){if(\"Symbol\"===nt(e))throw TypeError(\"Cannot convert a Symbol value to a string\");return kn(e)},xn=function(){var e=ie(this),t=\"\";return e.global&&(t+=\"g\"),e.ignoreCase&&(t+=\"i\"),e.multiline&&(t+=\"m\"),e.dotAll&&(t+=\"s\"),e.unicode&&(t+=\"u\"),e.sticky&&(t+=\"y\"),t},Tn=d.RegExp,_n=j((function(){var e=Tn(\"a\",\"y\");return e.lastIndex=2,null!=e.exec(\"abcd\")})),On=_n||j((function(){return !Tn(\"a\",\"y\").sticky})),In={BROKEN_CARET:_n||j((function(){var e=Tn(\"^r\",\"gy\");return e.lastIndex=2,null!=e.exec(\"str\")})),MISSED_STICKY:On,UNSUPPORTED_Y:_n},Rn=K?Object.defineProperties:function(e,t){ie(e);for(var n,a=jt(t),r=fn(t),i=r.length,s=0;i>s;)ke.f(e,n=r[s++],a[n]);return e},Nn=C(\"document\",\"documentElement\"),Ln=Ce(\"IE_PROTO\"),Pn=function(){},Cn=function(e){return \"<script>\"+e+\"</\"+\"script>\"},Fn=function(e){e.write(Cn(\"\")),e.close();var t=e.parentWindow.Object;return e=null,t},Dn=function(){try{wn=new ActiveXObject(\"htmlfile\");}catch(e){}var e,t;Dn=\"undefined\"!=typeof document?document.domain&&wn?Fn(wn):((t=te(\"iframe\")).style.display=\"none\",Nn.appendChild(t),t.src=String(\"javascript:\"),(e=t.contentWindow.document).open(),e.write(Cn(\"document.F=Object\")),e.close(),e.F):Fn(wn);for(var n=Kt.length;n--;)delete Dn.prototype[Kt[n]];return Dn()};Fe[Ln]=!0;var $n,Mn,Bn=Object.create||function(e,t){var n;return null!==e?(Pn.prototype=ie(e),n=new Pn,Pn.prototype=null,n[Ln]=e):n=Dn(),void 0===t?n:Rn(n,t)},Un=d.RegExp,jn=j((function(){var e=Un(\".\",\"s\");return !(e.dotAll&&e.exec(\"\\n\")&&\"s\"===e.flags)})),zn=d.RegExp,Gn=j((function(){var e=zn(\"(?<a>b)\",\"g\");return \"b\"!==e.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(e,\"$<a>c\")})),Hn=He.get,qn=h(\"native-string-replace\",String.prototype.replace),Yn=RegExp.prototype.exec,Wn=Yn,Xn=S(\"\".charAt),Zn=S(\"\".indexOf),Vn=S(\"\".replace),Kn=S(\"\".slice),Jn=(Mn=/b*/g,oe(Yn,$n=/a/,\"a\"),oe(Yn,Mn,\"a\"),0!==$n.lastIndex||0!==Mn.lastIndex),Qn=In.BROKEN_CARET,ea=void 0!==/()??/.exec(\"\")[1];(Jn||ea||Qn||jn||Gn)&&(Wn=function(e){var t,n,a,r,i,s,o,l=this,u=Hn(l),c=An(e),d=u.raw;if(d)return d.lastIndex=l.lastIndex,t=oe(Wn,d,c),l.lastIndex=d.lastIndex,t;var p=u.groups,g=Qn&&l.sticky,f=oe(xn,l),b=l.source,h=0,m=c;if(g&&(f=Vn(f,\"y\",\"\"),-1===Zn(f,\"g\")&&(f+=\"g\"),m=Kn(c,l.lastIndex),l.lastIndex>0&&(!l.multiline||l.multiline&&\"\\n\"!==Xn(c,l.lastIndex-1))&&(b=\"(?: \"+b+\")\",m=\" \"+m,h++),n=new RegExp(\"^(?:\"+b+\")\",f)),ea&&(n=new RegExp(\"^\"+b+\"$(?!\\\\s)\",f)),Jn&&(a=l.lastIndex),r=oe(Yn,g?n:l,m),g?r?(r.input=Kn(r.input,h),r[0]=Kn(r[0],h),r.index=l.lastIndex,l.lastIndex+=r[0].length):l.lastIndex=0:Jn&&r&&(l.lastIndex=l.global?r.index+r[0].length:a),ea&&r&&r.length>1&&oe(qn,r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0);})),r&&p)for(r.groups=s=Bn(null),i=0;i<p.length;i++)s[(o=p[i])[0]]=r[o[1]];return r});var ta=Wn;gn({target:\"RegExp\",proto:!0,forced:/./.exec!==ta},{exec:ta});var na=Function.prototype,aa=na.apply,ra=na.bind,ia=na.call,sa=\"object\"==typeof Reflect&&Reflect.apply||(ra?ia.bind(aa):function(){return ia.apply(aa,arguments)}),oa=X(\"species\"),la=RegExp.prototype,ua=X(\"match\"),ca=d.TypeError,da=X(\"species\"),pa=function(e,t){var n,a=ie(e).constructor;return void 0===a||null==(n=ie(a)[da])?t:function(e){if(Ot(e))return e;throw ca(pe(e)+\" is not a constructor\")}(n)},ga=S(\"\".charAt),fa=S(\"\".charCodeAt),ba=S(\"\".slice),ha=function(e){return function(t,n){var a,r,i=An(k(t)),s=ht(n),o=i.length;return s<0||s>=o?e?\"\":void 0:(a=fa(i,s))<55296||a>56319||s+1===o||(r=fa(i,s+1))<56320||r>57343?e?ga(i,s):a:e?ba(i,s,s+2):r-56320+(a-55296<<10)+65536}},ma={codeAt:ha(!1),charAt:ha(!0)}.charAt,ya=function(e,t,n){return t+(n?ma(e,t).length:1)},Ea=d.Array,va=Math.max,Sa=function(e,t,n){for(var a,r,i,s,o=Et(e),l=Yt(t,o),u=Yt(void 0===n?o:n,o),c=Ea(va(u-l,0)),d=0;l<u;l++,d++)a=c,r=d,i=e[l],s=void 0,(s=ve(r))in a?ke.f(a,s,Ae(0,i)):a[s]=i;return c.length=d,c},wa=d.TypeError,ka=function(e,t){var n=e.exec;if(L(n)){var a=oe(n,e,t);return null!==a&&ie(a),a}if(\"RegExp\"===Je(e))return oe(ta,e,t);throw wa(\"RegExp#exec called on incompatible receiver\")},Aa=In.UNSUPPORTED_Y,xa=4294967295,Ta=Math.min,_a=[].push,Oa=S(/./.exec),Ia=S(_a),Ra=S(\"\".slice),Na=!j((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n=\"ab\".split(e);return 2!==n.length||\"a\"!==n[0]||\"b\"!==n[1]}));!function(e,t,n,a){var r=X(e),i=!j((function(){var t={};return t[r]=function(){return 7},7!=\"\"[e](t)})),s=i&&!j((function(){var t=!1,n=/a/;return \"split\"===e&&((n={}).constructor={},n.constructor[oa]=function(){return n},n.flags=\"\",n[r]=/./[r]),n.exec=function(){return t=!0,null},n[r](\"\"),!t}));if(!i||!s||n){var o=S(/./[r]),l=t(r,\"\"[e],(function(e,t,n,a,r){var s=S(e),l=t.exec;return l===ta||l===la.exec?i&&!r?{done:!0,value:o(t,n,a)}:{done:!0,value:s(n,t,a)}:{done:!1}}));Ze(String.prototype,e,l[0]),Ze(la,r,l[1]);}a&&xe(la[r],\"sham\",!0);}(\"split\",(function(e,t,n){var a;return a=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1).length||2!=\"ab\".split(/(?:ab)*/).length||4!=\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length?function(e,n){var a,r,i=An(k(this)),s=void 0===n?xa:n>>>0;if(0===s)return [];if(void 0===e)return [i];if(!J(a=e)||!(void 0!==(r=a[ua])?r:\"RegExp\"==Je(a)))return oe(t,i,e,s);for(var o,l,u,c=[],d=(e.ignoreCase?\"i\":\"\")+(e.multiline?\"m\":\"\")+(e.unicode?\"u\":\"\")+(e.sticky?\"y\":\"\"),p=0,g=new RegExp(e.source,d+\"g\");(o=oe(ta,g,i))&&!((l=g.lastIndex)>p&&(Ia(c,Ra(i,p,o.index)),o.length>1&&o.index<i.length&&sa(_a,c,Sa(o,1)),u=o[0].length,p=l,c.length>=s));)g.lastIndex===o.index&&g.lastIndex++;return p===i.length?!u&&Oa(g,\"\")||Ia(c,\"\"):Ia(c,Ra(i,p)),c.length>s?Sa(c,0,s):c}:\"0\".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:oe(t,this,e,n)}:t,[function(t,n){var r=k(this),i=null==t?void 0:be(t,e);return i?oe(i,t,r,n):oe(a,An(r),t,n)},function(e,r){var i=ie(this),s=An(e),o=n(a,i,s,r,a!==t);if(o.done)return o.value;var l=pa(i,RegExp),u=i.unicode,c=(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(Aa?\"g\":\"y\"),d=new l(Aa?\"^(?:\"+i.source+\")\":i,c),p=void 0===r?xa:r>>>0;if(0===p)return [];if(0===s.length)return null===ka(d,s)?[s]:[];for(var g=0,f=0,b=[];f<s.length;){d.lastIndex=Aa?0:f;var h,m=ka(d,Aa?Ra(s,f):s);if(null===m||(h=Ta(yt(d.lastIndex+(Aa?f:0)),s.length))===g)f=ya(s,f,u);else {if(Ia(b,Ra(s,g,f)),b.length===p)return b;for(var y=1;y<=m.length-1;y++)if(Ia(b,m[y]),b.length===p)return b;f=g=h;}}return Ia(b,Ra(s,g)),b}]}),!Na,Aa),gn({global:!0},{globalThis:d}),n.attr&&(i.default.fn.attr=n.attr);var La=Xe.PROPER,Pa=\"toString\",Ca=RegExp.prototype,Fa=Ca.toString,Da=S(xn),$a=j((function(){return \"/a/b\"!=Fa.call({source:\"a\",flags:\"b\"})})),Ma=La&&Fa.name!=Pa;($a||Ma)&&Ze(RegExp.prototype,Pa,(function(){var e=ie(this),t=An(e.source),n=e.flags;return \"/\"+t+\"/\"+An(void 0===n&&le(Ca,e)&&!(\"flags\"in Ca)?Da(e):n)}),{unsafe:!0});var Ba=function(){function e(){this.title=t.t(\"highLightModule.selectLang\"),this.iconSvg='<svg viewBox=\"0 0 1024 1024\"><path d=\"M64 64v896h896V64H64z m487.6 698.8c0 87.2-51.2 127-125.8 127-67.4 0-106.4-34.8-126.4-77l68.6-41.4c13.2 23.4 25.2 43.2 54.2 43.2 27.6 0 45.2-10.8 45.2-53V475.4h84.2v287.4z m199.2 127c-78.2 0-128.8-37.2-153.4-86l68.6-39.6c18 29.4 41.6 51.2 83 51.2 34.8 0 57.2-17.4 57.2-41.6 0-28.8-22.8-39-61.4-56l-21-9c-60.8-25.8-101-58.4-101-127 0-63.2 48.2-111.2 123.2-111.2 53.6 0 92 18.6 119.6 67.4L800 580c-14.4-25.8-30-36-54.2-36-24.6 0-40.2 15.6-40.2 36 0 25.2 15.6 35.4 51.8 51.2l21 9c71.6 30.6 111.8 62 111.8 132.4 0 75.6-59.6 117.2-139.4 117.2z\"></path></svg>',this.tag=\"select\",this.width=95,this.selectPanelWidth=115;}return e.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig(\"codeSelectLang\").codeLangs,a=void 0===n?[]:n;t.push({text:\"plain text\",value:\"\"}),a.forEach((function(e){var n=e.text,a=e.value;t.push({text:n,value:a});}));var r=this.getValue(e);return t.forEach((function(e){e.value===r?e.selected=!0:delete e.selected;})),t},e.prototype.isActive=function(e){return !1},e.prototype.getValue=function(e){var t=this.getSelectCodeElem(e);if(null==t)return \"\";if(!a.Element.isElement(t))return \"\";var n=t.language.toString(),r=e.getMenuConfig(\"codeSelectLang\").codeLangs;return (void 0===r?[]:r).some((function(e){return e.value===n}))?n:\"\"},e.prototype.isDisabled=function(e){return null==e.selection||!this.getSelectCodeElem(e)},e.prototype.exec=function(e,n){if(null!=this.getSelectCodeElem(e)){var r={language:n.toString()};a.Transforms.setNodes(e,r,{match:function(e){return t.DomEditor.checkNodeType(e,\"code\")}});}},e.prototype.getSelectCodeElem=function(e){var n=t.DomEditor.getSelectedNodeByType(e,\"code\");if(null==n)return null;var r=t.DomEditor.getParentNode(e,n);return a.Element.isElement(r)?\"pre\"!==r.type?null:n:null},e}();var Ua={renderStyle:function(e,t){var n=e,a=t,r=\"\";return vn.forEach((function(e){n[e]&&(r=e);})),r&&function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={}),Object.assign(n.props,{className:t});}(a,r=\"token \"+r),a},parseStyleHtml:function(e,n,r){var s=i.default(e);if(!a.Element.isElement(n))return n;if(\"code\"!==t.DomEditor.getNodeType(n))return n;var o=n,l=s.attr(\"class\")||\"\";return 0===l.indexOf(\"language-\")?o.language=l.split(\"-\")[1]||\"\":o.language=l.toLowerCase(),o},menus:[{key:\"codeSelectLang\",factory:function(){return new Ba},config:{codeLangs:[{text:\"CSS\",value:\"css\"},{text:\"HTML\",value:\"html\"},{text:\"XML\",value:\"xml\"},{text:\"Javascript\",value:\"javascript\"},{text:\"Typescript\",value:\"typescript\"},{text:\"JSX\",value:\"jsx\"},{text:\"Go\",value:\"go\"},{text:\"PHP\",value:\"php\"},{text:\"C\",value:\"c\"},{text:\"Python\",value:\"python\"},{text:\"Java\",value:\"java\"},{text:\"C++\",value:\"cpp\"},{text:\"C#\",value:\"csharp\"},{text:\"Visual Basic\",value:\"visual-basic\"},{text:\"SQL\",value:\"sql\"},{text:\"Ruby\",value:\"ruby\"},{text:\"Swift\",value:\"swift\"},{text:\"Bash\",value:\"bash\"},{text:\"Lua\",value:\"lua\"},{text:\"Groovy\",value:\"groovy\"},{text:\"Markdown\",value:\"markdown\"}]}}],elemsToHtml:[{type:\"code\",elemToHtml:function(e,t){var n=e.language,a=void 0===n?\"\":n;return \"<code \"+(a?'class=\"language-'+a+'\"':\"\")+\">\"+t+\"</code>\"}}]},ja=/\"/g,za=S(\"\".replace);gn({target:\"String\",proto:!0,forced:function(e){return j((function(){var t=\"\"[e]('\"');return t!==t.toLowerCase()||t.split('\"').length>3}))}(\"anchor\")},{anchor:function(e){return t=\"a\",n=\"name\",a=e,r=An(k(this)),i=\"<\"+t,\"\"!==n&&(i+=\" \"+n+'=\"'+za(An(a),ja,\"&quot;\")+'\"'),i+\">\"+r+\"</\"+t+\">\";var t,n,a,r,i;}});e.wangEditorCodeHighLightDecorate=function(e){var n,r,i,s=function(e,t){var n=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(a=i.next()).done;)s.push(a.value);}catch(e){r={error:e};}finally{try{a&&!a.done&&(n=i.return)&&n.call(i);}finally{if(r)throw r.error}}return s}(e,2),o=s[0],l=s[1],u=[],c=function(e){if(!a.Text.isText(e))return null;var n=t.DomEditor.getParentNode(null,e);if(n&&\"code\"===t.DomEditor.getNodeType(n)){var r=t.DomEditor.getParentNode(null,n);if(r&&\"pre\"===t.DomEditor.getNodeType(r))return n}return null}(o);if(null==c)return u;var d=c.language,p=void 0===d?\"\":d;if(!p)return u;var g=function(e,t){if(!t)return [];var n=En.languages[t];return n?En.tokenize(e.text,n):[]}(o,p),f=0;try{for(var b=\n  /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n  function(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],a=0;if(n)return n.call(e);if(e&&\"number\"==typeof e.length)return {next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}(g),h=b.next();!h.done;h=b.next()){var m=h.value,y=f+Sn(m);\"string\"!=typeof m&&u.push(((i={})[m.type]=!0,i.anchor={path:l,offset:f},i.focus={path:l,offset:y},i)),f=y;}}catch(e){n={error:e};}finally{try{h&&!h.done&&(r=b.return)&&r.call(b);}finally{if(n)throw n.error}}return u},e.wangEditorCodeHighlightModule=Ua,Object.defineProperty(e,\"__esModule\",{value:!0});}));\n\n  });\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\n\n  /**\r\n   * @description Editor View class\r\n   * @author wangfupeng\r\n   */\r\n  var Boot = /** @class */ (function () {\r\n      function Boot() {\r\n          throw new Error('不能实例化\\nCan not construct a instance');\r\n      }\r\n      Boot.setEditorConfig = function (newConfig) {\r\n          if (newConfig === void 0) { newConfig = {}; }\r\n          this.editorConfig = __assign(__assign({}, this.editorConfig), newConfig);\r\n      };\r\n      Boot.setSimpleEditorConfig = function (newConfig) {\r\n          if (newConfig === void 0) { newConfig = {}; }\r\n          this.simpleEditorConfig = __assign(__assign({}, this.simpleEditorConfig), newConfig);\r\n      };\r\n      Boot.setToolbarConfig = function (newConfig) {\r\n          if (newConfig === void 0) { newConfig = {}; }\r\n          this.toolbarConfig = __assign(__assign({}, this.toolbarConfig), newConfig);\r\n      };\r\n      Boot.setSimpleToolbarConfig = function (newConfig) {\r\n          if (newConfig === void 0) { newConfig = {}; }\r\n          this.simpleToolbarConfig = __assign(__assign({}, this.simpleToolbarConfig), newConfig);\r\n      };\r\n      Boot.registerPlugin = function (plugin) {\r\n          this.plugins.push(plugin);\r\n      };\r\n      // 注册 menu\r\n      // TODO 可在注册时传入配置，在开发文档中说明\r\n      Boot.registerMenu = function (menuConf, customConfig) {\r\n          dist$6.registerMenu(menuConf, customConfig);\r\n      };\r\n      // 注册 renderElem\r\n      Boot.registerRenderElem = function (renderElemConf) {\r\n          dist$6.registerRenderElemConf(renderElemConf);\r\n      };\r\n      // 注册 renderStyle\r\n      Boot.registerRenderStyle = function (fn) {\r\n          dist$6.registerStyleHandler(fn);\r\n      };\r\n      // 注册 elemToHtml\r\n      Boot.registerElemToHtml = function (elemToHtmlConf) {\r\n          dist$6.registerElemToHtmlConf(elemToHtmlConf);\r\n      };\r\n      // 注册 styleToHtml\r\n      Boot.registerStyleToHtml = function (fn) {\r\n          dist$6.registerStyleToHtmlHandler(fn);\r\n      };\r\n      // 注册 preParseHtml\r\n      Boot.registerPreParseHtml = function (preParseHtmlConf) {\r\n          dist$6.registerPreParseHtmlConf(preParseHtmlConf);\r\n      };\r\n      // 注册 parseElemHtml\r\n      Boot.registerParseElemHtml = function (parseElemHtmlConf) {\r\n          dist$6.registerParseElemHtmlConf(parseElemHtmlConf);\r\n      };\r\n      // 注册 parseStyleHtml\r\n      Boot.registerParseStyleHtml = function (fn) {\r\n          dist$6.registerParseStyleHtmlHandler(fn);\r\n      };\r\n      // 注册 module\r\n      Boot.registerModule = function (module) {\r\n          registerModule(module);\r\n      };\r\n      // editor 配置\r\n      Boot.editorConfig = {};\r\n      Boot.simpleEditorConfig = {};\r\n      //toolbar 配置\r\n      Boot.toolbarConfig = {};\r\n      Boot.simpleToolbarConfig = {};\r\n      // 注册插件\r\n      Boot.plugins = [];\r\n      return Boot;\r\n  }());\n\n  /**\r\n   * @description 注册 module\r\n   * @author wangfupeng\r\n   */\r\n  function registerModule(module) {\r\n      var menus = module.menus, renderElems = module.renderElems, renderStyle = module.renderStyle, elemsToHtml = module.elemsToHtml, styleToHtml = module.styleToHtml, preParseHtml = module.preParseHtml, parseElemsHtml = module.parseElemsHtml, parseStyleHtml = module.parseStyleHtml, editorPlugin = module.editorPlugin;\r\n      if (menus) {\r\n          menus.forEach(function (menu) { return Boot.registerMenu(menu); });\r\n      }\r\n      if (renderElems) {\r\n          renderElems.forEach(function (renderElemConf) { return Boot.registerRenderElem(renderElemConf); });\r\n      }\r\n      if (renderStyle) {\r\n          Boot.registerRenderStyle(renderStyle);\r\n      }\r\n      if (elemsToHtml) {\r\n          elemsToHtml.forEach(function (elemToHtmlConf) { return Boot.registerElemToHtml(elemToHtmlConf); });\r\n      }\r\n      if (styleToHtml) {\r\n          Boot.registerStyleToHtml(styleToHtml);\r\n      }\r\n      if (preParseHtml) {\r\n          preParseHtml.forEach(function (conf) { return Boot.registerPreParseHtml(conf); });\r\n      }\r\n      if (parseElemsHtml) {\r\n          parseElemsHtml.forEach(function (parseElemHtmlConf) { return Boot.registerParseElemHtml(parseElemHtmlConf); });\r\n      }\r\n      if (parseStyleHtml) {\r\n          Boot.registerParseStyleHtml(parseStyleHtml);\r\n      }\r\n      if (editorPlugin) {\r\n          Boot.registerPlugin(editorPlugin);\r\n      }\r\n  }\n\n  /**\r\n   * @description register builtin modules\r\n   * @author wangfupeng\r\n   */\r\n  basicModules.forEach(function (module) { return registerModule(module); });\r\n  registerModule(dist$4);\r\n  registerModule(dist$3);\r\n  registerModule(dist$2);\r\n  registerModule(dist$1);\r\n  registerModule(dist.wangEditorCodeHighlightModule);\n\n  /**\r\n   * @description svg tag\r\n   * @author wangfupeng\r\n   */\r\n  /**\r\n   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大\r\n   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293\r\n   * 找不到再从 iconfont.com 搜索\r\n   */\r\n  // 缩进 right\r\n  var INDENT_RIGHT_SVG = '<svg viewBox=\"0 0 1024 1024\"><path d=\"M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z\"></path></svg>';\r\n  // 左对齐\r\n  var JUSTIFY_LEFT_SVG = '<svg viewBox=\"0 0 1024 1024\"><path d=\"M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z\"></path></svg>';\r\n  // 图片\r\n  var IMAGE_SVG = '<svg viewBox=\"0 0 1024 1024\"><path d=\"M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z\"></path></svg>';\r\n  // plus\r\n  var MORE_SVG = '<svg viewBox=\"0 0 1024 1024\"><path d=\"M204.8 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z\"></path><path d=\"M505.6 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z\"></path><path d=\"M806.4 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z\"></path></svg>';\r\n  // 视频\r\n  var VIDEO_SVG = '<svg viewBox=\"0 0 1024 1024\"><path d=\"M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z\"></path></svg>';\n\n  /**\r\n   * @description toolbar 配置\r\n   * @author wangfupeng\r\n   */\r\n  function genDefaultToolbarKeys() {\r\n      return [\r\n          'headerSelect',\r\n          // 'header1',\r\n          // 'header2',\r\n          // 'header3',\r\n          'blockquote',\r\n          '|',\r\n          'bold',\r\n          'underline',\r\n          'italic',\r\n          {\r\n              key: 'group-more-style',\r\n              title: dist$6.t('editor.more'),\r\n              iconSvg: MORE_SVG,\r\n              menuKeys: ['through', 'code', 'sup', 'sub', 'clearStyle'],\r\n          },\r\n          'color',\r\n          'bgColor',\r\n          '|',\r\n          'fontSize',\r\n          'fontFamily',\r\n          'lineHeight',\r\n          '|',\r\n          'bulletedList',\r\n          'numberedList',\r\n          'todo',\r\n          {\r\n              key: 'group-justify',\r\n              title: dist$6.t('editor.justify'),\r\n              iconSvg: JUSTIFY_LEFT_SVG,\r\n              menuKeys: ['justifyLeft', 'justifyRight', 'justifyCenter', 'justifyJustify'],\r\n          },\r\n          {\r\n              key: 'group-indent',\r\n              title: dist$6.t('editor.indent'),\r\n              iconSvg: INDENT_RIGHT_SVG,\r\n              menuKeys: ['indent', 'delIndent'],\r\n          },\r\n          '|',\r\n          'emotion',\r\n          'insertLink',\r\n          // 'editLink',\r\n          // 'unLink',\r\n          // 'viewLink',\r\n          {\r\n              key: 'group-image',\r\n              title: dist$6.t('editor.image'),\r\n              iconSvg: IMAGE_SVG,\r\n              menuKeys: ['insertImage', 'uploadImage'],\r\n          },\r\n          // 'deleteImage',\r\n          // 'editImage',\r\n          // 'viewImageLink',\r\n          {\r\n              key: 'group-video',\r\n              title: dist$6.t('editor.video'),\r\n              iconSvg: VIDEO_SVG,\r\n              menuKeys: ['insertVideo', 'uploadVideo'],\r\n          },\r\n          // 'deleteVideo',\r\n          'insertTable',\r\n          'codeBlock',\r\n          // 'codeSelectLang',\r\n          'divider',\r\n          // 'deleteTable',\r\n          '|',\r\n          'undo',\r\n          'redo',\r\n          '|',\r\n          'fullScreen',\r\n      ];\r\n  }\r\n  function genSimpleToolbarKeys() {\r\n      return [\r\n          'blockquote',\r\n          'header1',\r\n          'header2',\r\n          'header3',\r\n          '|',\r\n          'bold',\r\n          'underline',\r\n          'italic',\r\n          'through',\r\n          'color',\r\n          'bgColor',\r\n          'clearStyle',\r\n          '|',\r\n          'bulletedList',\r\n          'numberedList',\r\n          'todo',\r\n          'justifyLeft',\r\n          'justifyRight',\r\n          'justifyCenter',\r\n          '|',\r\n          'insertLink',\r\n          {\r\n              key: 'group-image',\r\n              title: dist$6.t('editor.image'),\r\n              iconSvg: IMAGE_SVG,\r\n              menuKeys: ['insertImage', 'uploadImage'],\r\n          },\r\n          'insertVideo',\r\n          'insertTable',\r\n          'codeBlock',\r\n          '|',\r\n          'undo',\r\n          'redo',\r\n          '|',\r\n          'fullScreen',\r\n      ];\r\n  }\n\n  /**\r\n   * @description hoverbar 配置\r\n   * @author wangfupeng\r\n   */\r\n  var COMMON_HOVERBAR_KEYS = {\r\n      // key 即 element type\r\n      link: {\r\n          menuKeys: ['editLink', 'unLink', 'viewLink'],\r\n      },\r\n      image: {\r\n          menuKeys: [\r\n              'imageWidth30',\r\n              'imageWidth50',\r\n              'imageWidth100',\r\n              'editImage',\r\n              'viewImageLink',\r\n              'deleteImage',\r\n          ],\r\n      },\r\n      pre: {\r\n          menuKeys: ['enter', 'codeBlock', 'codeSelectLang'],\r\n      },\r\n      table: {\r\n          menuKeys: [\r\n              'enter',\r\n              'tableHeader',\r\n              'tableFullWidth',\r\n              'insertTableRow',\r\n              'deleteTableRow',\r\n              'insertTableCol',\r\n              'deleteTableCol',\r\n              'deleteTable',\r\n          ],\r\n      },\r\n      divider: {\r\n          menuKeys: ['enter'],\r\n      },\r\n      video: {\r\n          menuKeys: ['enter', 'editVideoSize'],\r\n      },\r\n  };\r\n  function genDefaultHoverbarKeys() {\r\n      return __assign(__assign({}, COMMON_HOVERBAR_KEYS), { \r\n          // 也可以自定义 match 来匹配元素，此时 key 就随意了\r\n          text: {\r\n              menuKeys: [\r\n                  'headerSelect',\r\n                  'insertLink',\r\n                  'bulletedList',\r\n                  '|',\r\n                  'bold',\r\n                  'through',\r\n                  'color',\r\n                  'bgColor',\r\n                  'clearStyle',\r\n              ],\r\n          } });\r\n  }\r\n  function genSimpleHoverbarKeys() {\r\n      return COMMON_HOVERBAR_KEYS;\r\n  }\n\n  /**\r\n   * @description 获取编辑器默认配置\r\n   * @author wangfupeng\r\n   */\r\n  function getDefaultEditorConfig() {\r\n      return {\r\n          hoverbarKeys: genDefaultHoverbarKeys(),\r\n      };\r\n  }\r\n  function getSimpleEditorConfig() {\r\n      return {\r\n          hoverbarKeys: genSimpleHoverbarKeys(),\r\n      };\r\n  }\r\n  function getDefaultToolbarConfig() {\r\n      return {\r\n          toolbarKeys: genDefaultToolbarKeys(),\r\n      };\r\n  }\r\n  function getSimpleToolbarConfig() {\r\n      return {\r\n          toolbarKeys: genSimpleToolbarKeys(),\r\n      };\r\n  }\n\n  /**\r\n   * @description set default config\r\n   * @author wangfupeng\r\n   */\r\n  var defaultEditorConfig = getDefaultEditorConfig();\r\n  Boot.setEditorConfig(__assign(__assign({}, defaultEditorConfig), { decorate: dist.wangEditorCodeHighLightDecorate }));\r\n  var simpleEditorConfig = getSimpleEditorConfig();\r\n  Boot.setSimpleEditorConfig(__assign(__assign({}, simpleEditorConfig), { decorate: dist.wangEditorCodeHighLightDecorate }));\r\n  var defaultToolbarConfig = getDefaultToolbarConfig();\r\n  Boot.setToolbarConfig(defaultToolbarConfig);\r\n  var simpleToolbarConfig = getSimpleToolbarConfig();\r\n  Boot.setSimpleToolbarConfig(simpleToolbarConfig);\n\n  /**\r\n   * @description create\r\n   * @author wangfupeng\r\n   */\r\n  /**\r\n   * 创建 editor 实例\r\n   */\r\n  function createEditor(option) {\r\n      if (option === void 0) { option = {}; }\r\n      var _a = option.selector, selector = _a === void 0 ? '' : _a, _b = option.content, content = _b === void 0 ? [] : _b, html = option.html, _c = option.config, config = _c === void 0 ? {} : _c, _d = option.mode, mode = _d === void 0 ? 'default' : _d;\r\n      var globalConfig = mode === 'simple' ? Boot.simpleEditorConfig : Boot.editorConfig;\r\n      // 单独处理 hoverbarKeys\r\n      var newHoverbarKeys = __assign(__assign({}, (globalConfig.hoverbarKeys || {})), (config.hoverbarKeys || {}));\r\n      var editor = dist$6.coreCreateEditor({\r\n          selector: selector,\r\n          config: __assign(__assign(__assign({}, globalConfig), config), { hoverbarKeys: newHoverbarKeys }),\r\n          content: content,\r\n          html: html,\r\n          plugins: Boot.plugins,\r\n      });\r\n      return editor;\r\n  }\r\n  /**\r\n   * 创建 toolbar 实例\r\n   */\r\n  function createToolbar(option) {\r\n      var selector = option.selector, editor = option.editor, _a = option.config, config = _a === void 0 ? {} : _a, _b = option.mode, mode = _b === void 0 ? 'default' : _b;\r\n      if (!selector) {\r\n          throw new Error(\"Cannot find 'selector' when create toolbar\");\r\n      }\r\n      var globalConfig = mode === 'simple' ? Boot.simpleToolbarConfig : Boot.toolbarConfig;\r\n      var toolbar = dist$6.coreCreateToolbar(editor, {\r\n          selector: selector,\r\n          config: __assign(__assign({}, globalConfig), config),\r\n      });\r\n      return toolbar;\r\n  }\n\n  /**\r\n   * @description editor entry\r\n   * @author wangfupeng\r\n   */\r\n  var index = {};\n\n  exports.Boot = Boot;\n  exports.DomEditor = dist$6.DomEditor;\n  exports.SlateEditor = Editor_1;\n  exports.SlateElement = Element_1;\n  exports.SlateLocation = Location_1;\n  exports.SlateNode = Node_1;\n  exports.SlatePath = Path_1;\n  exports.SlatePoint = Point_1;\n  exports.SlateRange = Range_1;\n  exports.SlateText = Text_1;\n  exports.SlateTransforms = Transforms_1;\n  exports.Toolbar = dist$6.Toolbar;\n  exports.createEditor = createEditor;\n  exports.createToolbar = createToolbar;\n  exports.createUploader = dist$6.createUploader;\n  exports[\"default\"] = index;\n  exports.genModalButtonElems = dist$6.genModalButtonElems;\n  exports.genModalInputElems = dist$6.genModalInputElems;\n  exports.genModalTextareaElems = dist$6.genModalTextareaElems;\n  exports.i18nAddResources = dist$6.i18nAddResources;\n  exports.i18nChangeLanguage = dist$6.i18nChangeLanguage;\n  exports.i18nGetResources = dist$6.i18nGetResources;\n  exports.t = dist$6.t;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wangeditor/editor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wangeditor/editor/dist/css/style.css":
/*!************************************************************!*\
  !*** ./node_modules/@wangeditor/editor/dist/css/style.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"5cedaea7837a\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbmdlZGl0b3IvZWRpdG9yL2Rpc3QvY3NzL3N0eWxlLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LW5leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FuZ2VkaXRvci9lZGl0b3IvZGlzdC9jc3Mvc3R5bGUuY3NzPzliZGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI1Y2VkYWVhNzgzN2FcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wangeditor/editor/dist/css/style.css\n");

/***/ })

};
;